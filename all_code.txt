File: .\app\Console\Kernel.php
<?php

namespace App\Console;

use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;

class Kernel extends ConsoleKernel
{
    /**
     * Define the application's command schedule.
     */
    protected function schedule(Schedule $schedule): void
    {
    // Run the production status update every minute (for testing)
    $schedule->command('production:update-status-interval')->everyMinute();
        
    }

    /**
     * Register the commands for the application.
     */
    protected function commands(): void
    {
        $this->load(__DIR__.'/Commands');
        require base_path('routes/console.php');
    }
}


--- End of File ---

File: .\app\Console\Commands\UpdateProductionStatusByInterval.php
<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Production;

class UpdateProductionStatusByInterval extends Command
{
    protected $signature = 'production:update-status-interval';
    protected $description = 'Update production batch statuses based on defined time intervals';

    public function handle()
    {
        $updated = 0;
        Production::whereIn('status', [Production::STATUS_PENDING, Production::STATUS_IN_PROGRESS])
            ->get()
            ->each(function ($batch) use (&$updated) {
                $nextStatus = $batch->getNextStatusByInterval();
                if ($nextStatus) {
                    $batch->status = $nextStatus;
                    $batch->save();
                    $updated++;
                    $this->info("Batch #{$batch->batch_number} status updated to {$nextStatus}");
                }
            });
        $this->info("Total batches updated: $updated");
        return 0;
    }
}


--- End of File ---

File: .\app\Http\Controllers\AuthController.php
<?php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use App\Models\User;
use App\Models\Employee;

class AuthController extends Controller
{
    public function showLogin()
    {
        return view('auth.login');
    }

    public function login(Request $request)
    {
        $credentials = $request->only('username', 'password');
        
        \Log::info('Login attempt', ['credentials' => $credentials]);
        
        if (Auth::attempt($credentials)) {
            $user = Auth::user();
            \Log::info('User authenticated', ['user_id' => $user->user_id, 'role' => $user->role]);

            // Prevent login if status is pending
            if ($user->status === 'pending') {
                Auth::logout();
                return back()->withErrors(['username' => 'Your account is pending admin approval. Please wait for approval before logging in.']);
            }

            if ($user->isAdmin()) {
                \Log::info('User is admin, redirecting to admin dashboard');
                return redirect('/admin/dashboard');
            } elseif ($user->isBaker()) {
                \Log::info('User is baker, redirecting to baker dashboard');
                return redirect('/dashboard/baker');
            } elseif ($user->isCashier()) {
                \Log::info('User is cashier, redirecting to cashier dashboard');
                return redirect('dashboard/cashier');
            }
        } else {
            \Log::info('Authentication failed');
        }

        return back()->withErrors(['username' => 'Invalid credentials']);
    }

    public function showRegister()
    {
        return view('auth.register');
    }

    public function register(Request $request)
    {
        $validated = $request->validate([
            'username' => 'required|string|max:255|unique:users',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:6|confirmed',
            'role' => 'required|in:baker,cashier',
        ]);

        // Create employee record with minimal info (to be completed later)
        $employee = Employee::create([
            'first_name' => '', // Empty - to be filled later
            'middle_name' => '',
            'last_name' => '',
            'phone' => '',
            'address' => '',
            'status' => 'inactive', // Mark as inactive until they fill the profile
        ]);

        // Create user record with employee relationship, status 'pending'
        $user = User::create([
            'emp_id' => $employee->emp_id,
            'username' => $validated['username'],
            'email' => $validated['email'],
            'password' => Hash::make($validated['password']),
            'role' => $validated['role'],
            'status' => 'pending',
        ]);

        // Do not log in user, show approval message
        return redirect()->route('login')->with('info', 'Your account request has been submitted and is pending admin approval. You will be notified once approved.');
    }
}


--- End of File ---

File: .\app\Http\Controllers\Controller.php
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}


--- End of File ---

File: .\app\Http\Controllers\Admin\AdminDashboardController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Product;
use App\Models\Category;
use App\Models\Employee;
use App\Models\Sale;
use App\Models\Purchase;
use App\Models\SaleItem;
use Illuminate\Support\Facades\DB;
use App\Models\AuditLog;
use Carbon\Carbon;

class AdminDashboardController extends Controller
{
    public function index()
    {
        // Check if AJAX request for dynamic period data
        if (request()->ajax() || request()->has('ajax')) {
            $period = (int) request()->get('period', 7);
            $salesData = $this->getSalesByPeriod($period);
            $categoryData = $this->getSalesByCategoryByPeriod($period);
            
            return response()->json([
                'salesData' => $salesData,
                'categoryData' => $categoryData,
            ]);
        }

        // Dashboard statistics with safe data retrieval
        $stats = [
            // User & Employee Management
            'total_users' => $this->safeCount(User::class),
            'active_users' => $this->safeCount(User::class, ['status' => 'active']),
            'total_employees' => $this->safeCount(Employee::class),
            'active_employees' => $this->safeCount(Employee::class, ['status' => 'active']),
            
            // Product & Inventory Management
            'total_products' => $this->safeCount(Product::class),
            'active_products' => $this->safeCount(Product::class, ['status' => 'active']),
            'low_stock_products' => $this->getLowStockCount(),
            'total_categories' => $this->safeCount(Category::class),
            
            // Sales & Financial
            'today_sales' => $this->getTodaySales(),
            'today_transactions' => $this->getTodayTransactions(),
            'this_month_sales' => $this->getMonthSales(),
            
            // Purchase Management
            'pending_purchases' => $this->safeCount(Purchase::class, ['status' => 'pending']),
            
            // Production
            'production_batches' => $this->getProductionBatches(),
            'production_items' => $this->getProductionItems(),
        ];

        // Get supporting data for widgets
        $recentActivities = $this->getRecentActivities();
        $lowStockProducts = $this->getLowStockProducts();
        $productionBatches = $this->getTodayProduction();
        $last7DaysSales = $this->getLast7DaysSales();
        $topProducts = $this->getTopProductsLast7Days();
        $salesByCategory = $this->getSalesByCategoryLast7Days();
        $inventoryStats = $this->getInventoryStats();

        return view('admin.dashboard.index', compact(
            'stats', 
            'recentActivities', 
            'lowStockProducts', 
            'productionBatches',
            'last7DaysSales', 
            'topProducts',
            'salesByCategory',
            'inventoryStats'
        ));
    }

    /**
     * Lightweight API: System overview snapshot for async widgets
     */
    public function getSystemOverview()
    {
        $data = [
            'today_sales' => $this->getTodaySales(),
            'today_transactions' => $this->getTodayTransactions(),
            'this_month_sales' => $this->getMonthSales(),
            'low_stock_products' => $this->getLowStockCount(),
            'pending_purchases' => $this->safeCount(\App\Models\Purchase::class, ['status' => 'pending']),
        ];
        return response()->json($data);
    }

    /**
     * Safely count records with error handling
     */
    private function safeCount($model, $conditions = [])
    {
        try {
            $query = $model::query();
            foreach ($conditions as $field => $value) {
                $query->where($field, $value);
            }
            return $query->count();
        } catch (\Exception $e) {
            return 0;
        }
    }

    /**
     * Get low stock product count
     */
    private function getLowStockCount()
    {
        try {
            return Product::query()
                ->join('inventory_stocks as i', 'i.prod_id', '=', 'products.prod_id')
                ->where('products.status', 'active')
                ->whereColumn('i.quantity', '<=', 'i.reorder_level')
                ->count();
        } catch (\Exception $e) {
            return 0;
        }
    }

    /**
     * Get today's sales total
     */
    private function getTodaySales()
    {
        try {
            return Sale::where('status', 'completed')
                ->whereRaw('DATE(COALESCE(order_date, created_at)) = ?', [Carbon::today()->toDateString()])
                ->sum('total_amount') ?? 0;
        } catch (\Exception $e) {
            return 0;
        }
    }

    /**
     * Get today's transaction count
     */
    private function getTodayTransactions()
    {
        try {
            return Sale::where('status', 'completed')
                ->whereRaw('DATE(COALESCE(order_date, created_at)) = ?', [Carbon::today()->toDateString()])
                ->count();
        } catch (\Exception $e) {
            return 0;
        }
    }

    /**
     * Get this month's sales
     */
    private function getMonthSales()
    {
        try {
            return Sale::where('status', 'completed')
                ->whereRaw('MONTH(COALESCE(order_date, created_at)) = ? AND YEAR(COALESCE(order_date, created_at)) = ?', [
                    Carbon::now()->month, Carbon::now()->year
                ])
                ->sum('total_amount') ?? 0;
        } catch (\Exception $e) {
            return 0;
        }
    }

    /**
     * Get last 7 days sales summary (date, transactions, total)
     */
    private function getLast7DaysSales()
    {
        try {
            $to = Carbon::today();
            $from = $to->copy()->subDays(6);

            // Aggregate by coalesced sale date to support explicit sale_date
            $rows = Sale::selectRaw('DATE(COALESCE(order_date, created_at)) as date, COUNT(*) as transactions, SUM(total_amount) as total')
                ->where('status', 'completed')
                ->whereRaw('DATE(COALESCE(order_date, created_at)) >= ? AND DATE(COALESCE(order_date, created_at)) <= ?', [
                    $from->toDateString(), $to->toDateString()
                ])
                ->groupBy(DB::raw('DATE(COALESCE(order_date, created_at))'))
                ->orderBy('date', 'asc')
                ->get()
                ->keyBy('date');

            // Fill missing dates with zeros for a full 7-day window
            $series = collect();
            for ($d = $from->copy(); $d->lte($to); $d->addDay()) {
                $key = $d->toDateString();
                if (isset($rows[$key])) {
                    $series->push($rows[$key]);
                } else {
                    $series->push((object) [
                        'date' => $key,
                        'transactions' => 0,
                        'total' => 0,
                    ]);
                }
            }

            return $series;
        } catch (\Exception $e) {
            return collect();
        }
    }

    /**
     * Get top products by revenue in the last 7 days
     */
    private function getTopProductsLast7Days()
    {
        try {
            $to = Carbon::today();
            $from = $to->copy()->subDays(6);
            return SaleItem::query()
                ->join('sales_orders as s', 's.so_id', '=', 'order_items.so_id')
                ->join('products as p', 'p.prod_id', '=', 'order_items.prod_id')
                ->where('s.status', 'completed')
                ->whereRaw('DATE(COALESCE(s.order_date, s.created_at)) >= ? AND DATE(COALESCE(s.order_date, s.created_at)) <= ?', [
                    $from->toDateString(), $to->toDateString()
                ])
                ->groupBy('p.prod_id', 'p.name', 'p.sku')
                ->orderByDesc(DB::raw('SUM(order_items.total_price)'))
                ->limit(5)
                ->get([
                    'p.prod_id as prod_id',
                    'p.name',
                    'p.sku',
                    DB::raw('SUM(order_items.quantity) as qty_sold'),
                    DB::raw('SUM(order_items.total_price) as revenue'),
                ]);
        } catch (\Exception $e) {
            return collect();
        }
    }

    /**
     * Get production batches count for today
     */
    private function getProductionBatches()
    {
        try {
            if (class_exists(\App\Models\Production::class)) {
                return \App\Models\Production::whereDate('created_at', Carbon::today())->count();
            }
            return 0;
        } catch (\Exception $e) {
            return 0;
        }
    }

    /**
     * Get production items count for today  
     */
    private function getProductionItems()
    {
        try {
            if (class_exists(\App\Models\Production::class)) {
                return \App\Models\Production::whereDate('created_at', Carbon::today())
                    ->sum('quantity_produced') ?? 0;
            }
            return 0;
        } catch (\Exception $e) {
            return 0;
        }
    }

    /**
     * Get recent audit activities
     */
    private function getRecentActivities()
    {
        try {
            return AuditLog::with('user')
                ->orderBy('created_at', 'desc')
                ->limit(10)
                ->get();
        } catch (\Exception $e) {
            return collect();
        }
    }

    /**
     * Get low stock products details
     */
    private function getLowStockProducts()
    {
        try {
            return Product::query()
                ->join('inventory_stocks as i', 'i.prod_id', '=', 'products.prod_id')
                ->where('products.status', 'active')
                ->whereColumn('i.quantity', '<=', 'i.reorder_level')
                ->orderBy('i.quantity', 'asc')
                ->limit(10)
                ->get([
                    'products.prod_id',
                    'products.name',
                    'products.sku',
                    'i.quantity as stock_quantity',
                    'i.reorder_level as minimum_stock',
                ]);
        } catch (\Exception $e) {
            return collect();
        }
    }

    /**
     * Get today's production batches
     */
    private function getTodayProduction()
    {
        try {
            if (class_exists(\App\Models\Production::class)) {
                return \App\Models\Production::with('product')
                    ->whereDate('created_at', Carbon::today())
                    ->orderBy('created_at', 'desc')
                    ->limit(5)
                    ->get();
            }
            return collect();
        } catch (\Exception $e) {
            return collect();
        }
    }

    /**
     * Get sales by category for the last 7 days
     */
    private function getSalesByCategoryLast7Days()
    {
        try {
            $to = Carbon::today();
            $from = $to->copy()->subDays(6);

            return SaleItem::query()
                ->join('sales_orders as s', 's.so_id', '=', 'order_items.so_id')
                ->join('products as p', 'p.prod_id', '=', 'order_items.prod_id')
                ->join('categories as c', 'c.category_id', '=', 'p.category_id')
                ->where('s.status', 'completed')
                ->whereRaw('DATE(COALESCE(s.order_date, s.created_at)) >= ? AND DATE(COALESCE(s.order_date, s.created_at)) <= ?', [
                    $from->toDateString(), $to->toDateString()
                ])
                ->groupBy('c.category_id', 'c.name')
                ->orderByDesc(DB::raw('SUM(order_items.total_price)'))
                ->get([
                    'c.category_id',
                    'c.name as category_name',
                    DB::raw('SUM(order_items.quantity) as qty_sold'),
                    DB::raw('SUM(order_items.total_price) as revenue'),
                ]);
        } catch (\Exception $e) {
            return collect();
        }
    }

    /**
     * Get sales data for a specific period
     */
    private function getSalesByPeriod($days = 7)
    {
        try {
            $to = Carbon::today();
            $from = $to->copy()->subDays($days - 1);

            $rows = Sale::selectRaw('DATE(COALESCE(order_date, created_at)) as date, COUNT(*) as transactions, SUM(total_amount) as total')
                ->where('status', 'completed')
                ->whereRaw('DATE(COALESCE(order_date, created_at)) >= ? AND DATE(COALESCE(order_date, created_at)) <= ?', [
                    $from->toDateString(), $to->toDateString()
                ])
                ->groupBy(DB::raw('DATE(COALESCE(order_date, created_at))'))
                ->orderBy('date', 'asc')
                ->get()
                ->keyBy('date');

            // Fill missing dates with zeros
            $series = collect();
            for ($d = $from->copy(); $d->lte($to); $d->addDay()) {
                $key = $d->toDateString();
                if (isset($rows[$key])) {
                    $series->push($rows[$key]);
                } else {
                    $series->push((object) [
                        'date' => $key,
                        'transactions' => 0,
                        'total' => 0,
                    ]);
                }
            }

            return $series;
        } catch (\Exception $e) {
            return collect();
        }
    }

    /**
     * Get sales by category for a specific period
     */
    private function getSalesByCategoryByPeriod($days = 7)
    {
        try {
            $to = Carbon::today();
            $from = $to->copy()->subDays($days - 1);

            return SaleItem::query()
                ->join('sales_orders as s', 's.so_id', '=', 'order_items.so_id')
                ->join('products as p', 'p.prod_id', '=', 'order_items.prod_id')
                ->join('categories as c', 'c.category_id', '=', 'p.category_id')
                ->where('s.status', 'completed')
                ->whereRaw('DATE(COALESCE(s.order_date, s.created_at)) >= ? AND DATE(COALESCE(s.order_date, s.created_at)) <= ?', [
                    $from->toDateString(), $to->toDateString()
                ])
                ->groupBy('c.category_id', 'c.name')
                ->orderByDesc(DB::raw('SUM(order_items.total_price)'))
                ->get([
                    'c.category_id',
                    'c.name as category_name',
                    DB::raw('SUM(order_items.quantity) as qty_sold'),
                    DB::raw('SUM(order_items.total_price) as revenue'),
                ]);
        } catch (\Exception $e) {
            return collect();
        }
    }

    /**
     * Inventory snapshot: SKU count and total valuation (qty * price)
     */
    private function getInventoryStats(): array
    {
        try {
            $skuCount = Product::count();
            $valuation = DB::table('inventory_stocks as i')
                ->join('products as p', 'p.prod_id', '=', 'i.prod_id')
                ->selectRaw('COALESCE(SUM(i.quantity * p.price), 0) as total')
                ->value('total');
            return [
                'sku_count' => $skuCount,
                'valuation' => $valuation ?? 0,
            ];
        } catch (\Exception $e) {
            return [
                'sku_count' => 0,
                'valuation' => 0,
            ];
        }
    }
}


--- End of File ---

File: .\app\Http\Controllers\Admin\AnalyticsDashboardController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Sale;
use App\Models\SaleItem;
use App\Models\Product;
use App\Models\Production;
use App\Models\InventoryStock;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class AnalyticsDashboardController extends Controller
{
    public function index(Request $request)
    {
        $dateFrom = $request->date_from ?? now()->startOfMonth()->toDateString();
        $dateTo = $request->date_to ?? now()->toDateString();

        // KPI metrics
        $salesQuery = Sale::with('items')
            ->whereDate('order_date', '>=', $dateFrom)
            ->whereDate('order_date', '<=', $dateTo)
            ->where('status','completed');
        $totalSales = (clone $salesQuery)->sum('total_amount');
        $totalTransactions = (clone $salesQuery)->count();
        $averageTransaction = $totalTransactions ? $totalSales / $totalTransactions : 0;

        // Sales by day (Chart)
        $salesByDay = (clone $salesQuery)
            ->selectRaw('order_date as date, SUM(total_amount) as total')
            ->groupBy('order_date')
            ->orderBy('date')
            ->get();

        // Sales by hour (Chart) using created_at filtered by order_date
        $salesByHour = Sale::whereBetween(DB::raw('DATE(order_date)'), [$dateFrom, $dateTo])
            ->where('status','completed')
            ->selectRaw('HOUR(created_at) as hour, SUM(total_amount) as total')
            ->groupBy('hour')
            ->orderBy('hour')
            ->get();

        // Top products (by quantity sold)
        $topProducts = SaleItem::join('sales_orders','order_items.so_id','=','sales_orders.so_id')
            ->join('products','order_items.prod_id','=','products.prod_id')
            ->whereBetween('sales_orders.order_date', [$dateFrom, $dateTo])
            ->where('sales_orders.status','completed')
            ->selectRaw('products.name, products.sku, SUM(order_items.quantity) as qty')
            ->groupBy('products.prod_id','products.name','products.sku')
            ->orderByDesc('qty')
            ->limit(10)
            ->get();

        // Production status breakdown
        $productionStatuses = Production::whereBetween(DB::raw('DATE(created_at)'), [$dateFrom, $dateTo])
            ->selectRaw('status, COUNT(*) as count')
            ->groupBy('status')
            ->pluck('count','status');

        // Low stock
        $lowStockCount = Product::lowStock()->count();

        // Inventory valuation (approximate using price * on-hand)
        $inventoryValuation = InventoryStock::join('products','inventory_stocks.prod_id','=','products.prod_id')
            ->selectRaw('SUM(inventory_stocks.quantity * products.price) as value')
            ->value('value');

        // Prepare datasets for charts
        $chart = [
            'salesByDay' => [
                'labels' => $salesByDay->pluck('date')->map(fn($d)=>\Illuminate\Support\Carbon::parse($d)->format('M d'))->toArray(),
                'data' => $salesByDay->pluck('total')->map(fn($v)=>round($v,2))->toArray(),
            ],
            'salesByHour' => [
                'labels' => $salesByHour->pluck('hour')->map(fn($h)=>str_pad($h,2,'0',STR_PAD_LEFT).':00')->toArray(),
                'data' => $salesByHour->pluck('total')->map(fn($v)=>round($v,2))->toArray(),
            ],
            'topProducts' => [
                'labels' => $topProducts->pluck('sku')->map(fn($sku,$i)=>$sku.' - '.$topProducts[$i]->name)->toArray(),
                'data' => $topProducts->pluck('qty')->toArray(),
            ],
            'productionStatuses' => [
                'labels' => $productionStatuses->keys()->toArray(),
                'data' => $productionStatuses->values()->toArray(),
            ],
        ];

        return view('admin.analytics.index', compact(
            'dateFrom','dateTo','totalSales','totalTransactions','averageTransaction',
            'lowStockCount','inventoryValuation','chart'
        ));
    }
}


--- End of File ---

File: .\app\Http\Controllers\Admin\AuditLogController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\AuditLog;
use App\Models\User;
use Barryvdh\DomPDF\Facade\Pdf;
use Illuminate\Support\Facades\Response;
use Illuminate\Http\Request;

class AuditLogController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        $query = AuditLog::with('user');
        if ($request->filled('action')) $query->where('action', $request->action);
        if ($request->filled('table_name')) $query->where('table_name', $request->table_name);
        if ($request->filled('user_id')) $query->where('user_id', $request->user_id);
        if ($request->filled('search')) {
            $s = $request->search;
            $query->where(function($q) use ($s){
                $q->where('description','like',"%$s%")
                  ->orWhere('table_name','like',"%$s%")
                  ->orWhere('action','like',"%$s%");
            });
        }
        if ($request->filled('date_from')) $query->whereDate('created_at','>=',$request->date_from);
        if ($request->filled('date_to')) $query->whereDate('created_at','<=',$request->date_to);

        $logs = $query->orderByDesc('created_at')->paginate(20);
        $users = User::orderBy('username')->get(['user_id','username']);
        $actions = ['create','update','delete','login','logout','import','export','backup','restore'];
        return view('admin.audit-logs.index', compact('logs','users','actions'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     */
    public function show(AuditLog $audit_log)
    {
        $audit_log->load('user');
        return view('admin.audit-logs.show', compact('audit_log'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        //
    }

    public function export()
    {
        $fileName = 'audit_logs_'.now()->format('Ymd_His').'.csv';
        $headers = [
            'Content-Type' => 'text/csv',
            'Content-Disposition' => "attachment; filename=\"$fileName\"",
        ];

        $callback = function() {
            $handle = fopen('php://output', 'w');
            fputcsv($handle, ['Date','User','Action','Table','Record ID','Description']);
            AuditLog::with('user')->orderByDesc('created_at')->chunk(500, function($rows) use ($handle) {
                foreach ($rows as $log) {
                    fputcsv($handle, [
                        $log->created_at,
                        optional($log->user)->username,
                        $log->action,
                        $log->table_name,
                        $log->record_id,
                        $log->description,
                    ]);
                }
            });
            fclose($handle);
        };

        return Response::stream($callback, 200, $headers);
    }

    public function exportPdf(Request $request)
    {
        $query = AuditLog::with('user');
        if ($request->filled('action')) $query->where('action', $request->action);
        if ($request->filled('table_name')) $query->where('table_name', $request->table_name);
        if ($request->filled('user_id')) $query->where('user_id', $request->user_id);
        if ($request->filled('search')) {
            $s = $request->search;
            $query->where(function($q) use ($s){
                $q->where('description','like',"%$s%")
                  ->orWhere('table_name','like',"%$s%")
                  ->orWhere('action','like',"%$s%");
            });
        }
        if ($request->filled('date_from')) $query->whereDate('created_at','>=',$request->date_from);
        if ($request->filled('date_to')) $query->whereDate('created_at','<=',$request->date_to);

        $logs = $query->orderByDesc('created_at')->get();
        $dateFrom = $request->date_from;
        $dateTo = $request->date_to;

        $pdf = Pdf::loadView('admin.audit-logs.pdf', compact('logs','dateFrom','dateTo'))
            ->setPaper('a4','portrait');
        return $pdf->download('audit_logs_'.now()->format('Ymd_His').'.pdf');
    }
}


--- End of File ---

File: .\app\Http\Controllers\Admin\BackupController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\AuditLog;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Storage;

class BackupController extends Controller
{
    public function index()
    {
        return view('admin.backup.index');
    }

    public function download()
    {
        // For SQLite dev: return the DB file; for MySQL, this would require mysqldump configured.
        $connection = config('database.default');
        $cfg = config("database.connections.$connection");

        if ($cfg['driver'] === 'sqlite') {
            $path = database_path('database.sqlite');
            AuditLog::logAction('backup','database', null, null, null, 'Downloaded SQLite database backup');
            return response()->download($path, 'backup_'.now()->format('Ymd_His').'.sqlite');
        }

        // MySQL basic export fallback: export logical dump route not implemented
        // You can integrate spatie/laravel-backup or run mysqldump here if available.
        return back()->with('error','Backup for this DB driver is not configured.');
    }

    public function restore(Request $request)
    {
        $request->validate(['backup_file' => 'required|file']);
        $connection = config('database.default');
        $cfg = config("database.connections.$connection");

        if ($cfg['driver'] === 'sqlite') {
            $file = $request->file('backup_file');
            $dest = database_path('database.sqlite');
            // Put site into maintenance mode during restore
            Artisan::call('down');
            try {
                $backupContent = file_get_contents($file->getRealPath());
                file_put_contents($dest, $backupContent);
                AuditLog::logAction('restore','database', null, null, null, 'Restored SQLite database from upload');
            } finally {
                Artisan::call('up');
            }
            return back()->with('success','Database restored successfully.');
        }

        return back()->with('error','Restore for this DB driver is not configured.');
    }
}


--- End of File ---

File: .\app\Http\Controllers\Admin\CategoryManagementController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Category;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class CategoryManagementController extends Controller
{
    /**
     * Display a listing of categories.
     */
    public function index(Request $request)
    {
        $query = Category::withCount('products');

        if ($request->filled('status')) {
            $query->where('status', $request->status);
        }
        if ($request->filled('search')) {
            $query->where('name', 'like', '%' . $request->search . '%');
        }

        $categories = $query->orderBy('name')->paginate(15);

        return view('admin.categories.index', compact('categories'));
    }

    /**
     * Show the form for creating a new category.
     */
    public function create()
    {
        return view('admin.categories.create');
    }

    /**
     * Store a newly created category in storage.
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:100|unique:product_categories,name',
            'description' => 'nullable|string|max:500',
            'status' => 'required|in:active,inactive',
        ]);

        if ($validator->fails()) {
            return redirect()->back()
                ->withErrors($validator)
                ->withInput();
        }

        Category::create([
            'name' => $request->name,
            'description' => $request->description,
            'status' => $request->status,
        ]);

        return redirect()->route('admin.categories.index')
            ->with('success', 'Category created successfully.');
    }

    /**
     * Display the specified category.
     */
    public function show(Category $category)
    {
        $category->load(['products' => function($query) {
            $query->orderBy('name');
        }]);

        return view('admin.categories.show', compact('category'));
    }

    /**
     * Show the form for editing the specified category.
     */
    public function edit(Category $category)
    {
        return view('admin.categories.edit', compact('category'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Category $category)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:100|unique:product_categories,name,' . $category->category_id . ',category_id',
            'description' => 'nullable|string|max:500',
            'status' => 'required|in:active,inactive',
        ]);

        if ($validator->fails()) {
            return redirect()->back()
                ->withErrors($validator)
                ->withInput();
        }

        $category->update([
            'name' => $request->name,
            'description' => $request->description,
            'status' => $request->status,
        ]);

        return redirect()->route('admin.categories.index')
            ->with('success', 'Category updated successfully.');
    }

    /**
     * Toggle status active/inactive
     */
    public function toggleStatus(Category $category)
    {
        $category->update(['status' => $category->status === 'active' ? 'inactive' : 'active']);

        return redirect()->back()->with('success', 'Category status updated.');
    }

    /**
     * Remove the specified category from storage.
     */
    public function destroy(Category $category)
    {
        // Check if category has products
        if ($category->products()->count() > 0) {
            return redirect()->route('admin.categories.index')
                ->with('error', 'Cannot delete category that has products assigned to it.');
        }

        $category->delete();

        return redirect()->route('admin.categories.index')
            ->with('success', 'Category deleted successfully.');
    }
}


--- End of File ---

File: .\app\Http\Controllers\Admin\EmployeeController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Employee;
use App\Models\AuditLog;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule;

class EmployeeController extends Controller
{
    /**
     * Display a listing of employees.
     */
    public function index()
    {
        try {
            $employees = Employee::with('user')
                ->orderBy('created_at', 'desc')
                ->paginate(10);

            // Get statistics
            $stats = [
                'total' => Employee::count(),
                'active' => Employee::where('status', 'active')->count(),
                'on_leave' => Employee::where('status', 'on_leave')->count(),
                'inactive' => Employee::where('status', 'inactive')->count(),
                'with_accounts' => Employee::whereHas('user')->count(),
            ];

            return view('admin.employees.index', compact('employees', 'stats'));
        } catch (\Exception $e) {
            return back()->with('error', 'Failed to load employees: ' . $e->getMessage());
        }
    }

    /**
     * Show the form for creating a new employee.
     */
    public function create()
    {
        try {
            return view('admin.employees.create');
        } catch (\Exception $e) {
            return back()->with('error', 'Failed to load create form: ' . $e->getMessage());
        }
    }

    /**
     * Store a newly created employee in storage.
     */
    public function store(Request $request)
    {
        try {
            $validated = $request->validate([
                'first_name' => 'required|string|max:255',
                'middle_name' => 'nullable|string|max:255',
                'last_name' => 'required|string|max:255',
                'phone' => 'nullable|string|max:20|unique:employees,phone',
                'address' => 'nullable|string|max:500',
                'status' => 'required|in:active,inactive,on_leave',
                'shift_start' => 'nullable|date_format:H:i',
                'shift_end' => 'nullable|date_format:H:i|after:shift_start',
            ]);

            DB::beginTransaction();

            $employee = Employee::create($validated);

            // Log the action
            AuditLog::logAction(
                'create',
                'employees',
                $employee->emp_id, // Use emp_id instead of employee_id
                null,
                $employee->toArray(),
                "Created employee: {$employee->full_name}"
            );

            DB::commit();

            return redirect()->route('admin.employees.index')
                ->with('success', 'Employee created successfully!');

        } catch (\Exception $e) {
            DB::rollBack();
            return back()->withInput()
                ->with('error', 'Failed to create employee: ' . $e->getMessage());
        }
    }

    /**
     * Display the specified employee.
     */
    public function show(Employee $employee)
    {
        try {
            $employee->load('user');
            return view('admin.employees.show', compact('employee'));
        } catch (\Exception $e) {
            return back()->with('error', 'Failed to load employee details: ' . $e->getMessage());
        }
    }

    /**
     * Show the form for editing the specified employee.
     */
    public function edit(Employee $employee)
    {
        try {
            $employee->load('user');
            return view('admin.employees.edit', compact('employee'));
        } catch (\Exception $e) {
            return back()->with('error', 'Failed to load edit form: ' . $e->getMessage());
        }
    }

    /**
     * Update the specified employee in storage.
     */
    public function update(Request $request, Employee $employee)
    {
        try {
            $validated = $request->validate([
                'first_name' => 'required|string|max:255',
                'middle_name' => 'nullable|string|max:255',
                'last_name' => 'required|string|max:255',
                'phone' => [
                    'nullable',
                    'string',
                    'max:20',
                    Rule::unique('employees', 'phone')->ignore($employee->emp_id, 'emp_id')
                ],
                'address' => 'nullable|string|max:500',
                'status' => 'required|in:active,inactive,on_leave',
                'shift_start' => 'nullable|date_format:H:i',
                'shift_end' => 'nullable|date_format:H:i|after:shift_start',
            ]);

            DB::beginTransaction();

            $oldValues = $employee->toArray();
            $employee->update($validated);
            $newValues = $employee->fresh()->toArray();

            // Log the action
            AuditLog::logAction(
                'update',
                'employees',
                $employee->emp_id, // Use emp_id instead of employee_id
                $oldValues,
                $newValues,
                "Updated employee: {$employee->full_name}"
            );

            DB::commit();

            return redirect()->route('admin.employees.show', $employee)
                ->with('success', 'Employee updated successfully!');

        } catch (\Exception $e) {
            DB::rollBack();
            return back()->withInput()
                ->with('error', 'Failed to update employee: ' . $e->getMessage());
        }
    }

    /**
     * Remove the specified employee from storage.
     */
    public function destroy(Employee $employee)
    {
        try {
            // Check if employee has a user account
            if ($employee->user) {
                return back()->with('error', 'Cannot delete employee with an active user account. Delete the user account first.');
            }

            DB::beginTransaction();

            $employeeId = $employee->emp_id; // Store ID before deletion
            $employeeData = $employee->toArray();
            $employeeName = $employee->full_name;
            
            $employee->delete();

            // Log the action
            AuditLog::logAction(
                'delete',
                'employees',
                $employeeId, // Use stored ID
                $employeeData,
                null,
                "Deleted employee: {$employeeName}"
            );

            DB::commit();

            return redirect()->route('admin.employees.index')
                ->with('success', 'Employee deleted successfully!');

        } catch (\Exception $e) {
            DB::rollBack();
            return back()->with('error', 'Failed to delete employee: ' . $e->getMessage());
        }
    }

    /**
     * Toggle employee status (active/inactive).
     */
    public function toggleStatus(Employee $employee)
    {
        try {
            DB::beginTransaction();

            $oldStatus = $employee->status;
            $newStatus = $employee->status === 'active' ? 'inactive' : 'active';
            
            $employee->update(['status' => $newStatus]);

            // Log the action
            AuditLog::logAction(
                'update',
                'employees',
                $employee->employee_id,
                ['status' => $oldStatus],
                ['status' => $newStatus],
                "Changed employee status: {$employee->full_name} from {$oldStatus} to {$newStatus}"
            );

            DB::commit();

            return back()->with('success', "Employee status updated to {$newStatus}!");

        } catch (\Exception $e) {
            DB::rollBack();
            return back()->with('error', 'Failed to update employee status: ' . $e->getMessage());
        }
    }
}

--- End of File ---

File: .\app\Http\Controllers\Admin\InventoryManagementController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Product;
use App\Models\InventoryStock;
use App\Models\InventoryMovement;
use App\Models\AuditLog;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class InventoryManagementController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        $query = InventoryMovement::with(['product' => function($q){ $q->select('prod_id','sku','name'); }]);

        if ($request->filled('product_id')) {
            $query->where('prod_id', $request->product_id);
        }
        if ($request->filled('type')) {
            $query->where('transaction_type', $request->type);
        }
        if ($request->filled('date_from')) {
            $query->whereDate('created_at', '>=', $request->date_from);
        }
        if ($request->filled('date_to')) {
            $query->whereDate('created_at', '<=', $request->date_to);
        }
        if ($request->filled('search')) {
            $search = $request->search;
            $query->whereHas('product', function($q) use ($search){
                $q->where('name','like',"%$search%")
                  ->orWhere('sku','like',"%$search%");
            });
        }

        $movements = $query->orderByDesc('created_at')->paginate(20);
    $products = Product::orderBy('name')->get(['prod_id','name','sku']);

        return view('admin.inventory.index', compact('movements','products'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
    $products = Product::orderBy('name')->get(['prod_id','name','sku']);
        return view('admin.inventory.create', compact('products'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'product_id' => 'required|exists:products,prod_id',
            'movement_kind' => 'required|in:stock_in,stock_out,adjustment',
            'quantity' => 'required|integer|min:1',
            'notes' => 'nullable|string|max:500',
        ]);

        if ($validator->fails()) {
            return redirect()->back()->withErrors($validator)->withInput();
        }

        DB::transaction(function () use ($request) {
            $product = Product::lockForUpdate()->findOrFail($request->product_id);

            // Current snapshot
            $snapshot = InventoryStock::lockForUpdate()->where('prod_id', $product->prod_id)->first();
            $previous = $snapshot ? $snapshot->quantity : 0;
            $qty = (int) $request->quantity;

            if ($request->movement_kind === 'stock_out' && $qty > $previous) {
                throw new \Exception('Cannot stock out more than available.');
            }

            $current = match ($request->movement_kind) {
                'stock_in' => $previous + $qty,
                'stock_out' => $previous - $qty,
                default => $previous + $qty, // adjustment treated as delta (can be negative if needed later)
            };

            // Record movement
            $movement = InventoryMovement::create([
                'prod_id' => $product->prod_id,
                'transaction_type' => $request->movement_kind,
                'quantity' => $qty,
                'previous_stock' => $previous,
                'current_stock' => $current,
                'notes' => $request->notes,
            ]);

            // Update snapshot
            if (!$snapshot) {
                InventoryStock::create([
                    'prod_id' => $product->prod_id,
                    'quantity' => $current,
                    'reorder_level' => 10,
                    'last_counted_at' => now(),
                ]);
            } else {
                $snapshot->update([
                    'quantity' => $current,
                    'last_counted_at' => now(),
                ]);
            }

            AuditLog::logAction('inventory_'.$request->movement_kind, 'inventory_movements', $movement->movement_id, ['previous_stock' => $previous], ['current_stock' => $current], "Inventory {$request->movement_kind} of {$qty} for product {$product->name}");
        });

        return redirect()->route('admin.inventory.index')->with('success', 'Inventory movement recorded.');
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
    $movement = InventoryMovement::with('product')->findOrFail($id);
        return view('admin.inventory.show', compact('movement'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
    $movement = InventoryMovement::with('product')->findOrFail($id);
        return view('admin.inventory.edit', compact('movement'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
    $movement = InventoryMovement::findOrFail($id);
        $request->validate(['notes' => 'nullable|string|max:500']);
        $movement->update(['notes' => $request->notes]);
    return redirect()->route('admin.inventory.show', $movement->movement_id)->with('success', 'Movement updated.');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        DB::transaction(function () use ($id) {
            $movement = InventoryMovement::lockForUpdate()->findOrFail($id);
            // Revert snapshot to previous
            $snapshot = InventoryStock::lockForUpdate()->where('prod_id', $movement->prod_id)->first();
            if ($snapshot) {
                $snapshot->update(['quantity' => $movement->previous_stock, 'last_counted_at' => now()]);
            }

            AuditLog::logAction('inventory_delete', 'inventory_movements', $movement->movement_id, $movement->toArray(), null, 'Deleted inventory movement and reverted stock.');
            $movement->delete();
        });

        return redirect()->route('admin.inventory.index')->with('success', 'Movement deleted and stock reverted.');
    }

    /**
     * Low stock alerts view
     */
    public function lowStockAlerts()
    {
        $products = Product::with('inventoryStock')
            ->lowStock()
            ->orderBy('name')
            ->get();
        return view('admin.inventory.low-stock-alerts', compact('products'));
    }

    /**
     * Bulk adjust stocks for multiple products
     */
    public function bulkAdjust(Request $request)
    {
        $request->validate([
            'product_ids' => 'required|array',
            'product_ids.*' => 'exists:products,prod_id',
            'adjustment_type' => 'required|in:increase,decrease',
            'quantity' => 'required|integer|min:1',
            'reason' => 'required|string|max:255',
            'notes' => 'nullable|string',
        ]);

        DB::transaction(function () use ($request) {
            $qty = (int) $request->quantity;
            $isDecrease = $request->adjustment_type === 'decrease';

            $products = Product::lockForUpdate()->whereIn('prod_id', $request->product_ids)->get();
            foreach ($products as $product) {
                // Get current inventory stock or create if doesn't exist
                $inventoryStock = InventoryStock::where('prod_id', $product->prod_id)->first();
                $old = $inventoryStock ? $inventoryStock->quantity : 0;
                
                if ($isDecrease && $qty > $old) {
                    throw new \Exception("Cannot decrease {$product->name} below zero.");
                }
                $new = $isDecrease ? $old - $qty : $old + $qty;
                
                if (!$inventoryStock) {
                    InventoryStock::create([
                        'prod_id' => $product->prod_id,
                        'quantity' => $new,
                        'reorder_level' => 10,
                        'last_counted_at' => now(),
                    ]);
                } else {
                    $inventoryStock->update([
                        'quantity' => $new,
                        'last_counted_at' => now(),
                    ]);
                }
            }
        });

        return redirect()->back()->with('success', 'Bulk stock adjustment completed.');
    }
}


--- End of File ---

File: .\app\Http\Controllers\Admin\InventoryReportController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\InventoryMovement;
use App\Models\InventoryStock;
use App\Models\Product;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Barryvdh\DomPDF\Facade\Pdf;

class InventoryReportController extends Controller
{
    public function index(Request $request)
    {
        $dateFrom = $request->date_from ?? now()->startOfMonth()->toDateString();
        $dateTo = $request->date_to ?? now()->toDateString();

        $query = InventoryMovement::with('product')
            ->whereDate('created_at', '>=', $dateFrom)
            ->whereDate('created_at', '<=', $dateTo);

        if ($request->filled('prod_id')) {
            $query->where('prod_id', $request->prod_id);
        }
        if ($request->filled('transaction_type')) {
            $query->where('transaction_type', $request->transaction_type);
        }

        $movements = $query->orderByDesc('created_at')->paginate(15);

        // Snapshot summary per product for period (end quantities)
        $stocks = InventoryStock::with('product')->get();
        $products = Product::orderBy('name')->get(['prod_id','name','sku']);

        // Totals
        $totals = [
            'stock_in' => (clone $query)->where('transaction_type', 'stock_in')->sum('quantity'),
            'stock_out' => (clone $query)->where('transaction_type', 'stock_out')->sum('quantity'),
            'adjustment' => (clone $query)->where('transaction_type', 'adjustment')->sum('quantity'),
        ];

        return view('admin.inventory-reports.index', compact('movements','stocks','products','dateFrom','dateTo','totals'));
    }

    public function show(Request $request)
    {
        $dateFrom = $request->date_from ?? now()->startOfMonth()->toDateString();
        $dateTo = $request->date_to ?? now()->toDateString();

        // Daily movement summary
        $daily = InventoryMovement::selectRaw('DATE(created_at) as date, 
                SUM(CASE WHEN transaction_type = "stock_in" THEN quantity ELSE 0 END) as total_in,
                SUM(CASE WHEN transaction_type = "stock_out" THEN quantity ELSE 0 END) as total_out,
                SUM(CASE WHEN transaction_type = "adjustment" THEN quantity ELSE 0 END) as total_adjust')
            ->whereDate('created_at', '>=', $dateFrom)
            ->whereDate('created_at', '<=', $dateTo)
            ->groupBy('date')
            ->orderByDesc('date')
            ->get();

        // Top stock outs by product
        $topOut = InventoryMovement::join('products','inventory_movements.prod_id','=','products.prod_id')
            ->where('transaction_type','stock_out')
            ->whereDate('inventory_movements.created_at','>=',$dateFrom)
            ->whereDate('inventory_movements.created_at','<=',$dateTo)
            ->selectRaw('products.name, products.sku, SUM(inventory_movements.quantity) as total_out')
            ->groupBy('products.prod_id','products.name','products.sku')
            ->orderByDesc('total_out')
            ->limit(10)
            ->get();

        return view('admin.inventory-reports.show', compact('daily','topOut','dateFrom','dateTo'));
    }

    public function export(Request $request)
    {
        $dateFrom = $request->date_from ?? now()->startOfMonth()->toDateString();
        $dateTo = $request->date_to ?? now()->toDateString();

        $movements = InventoryMovement::with('product')
            ->whereDate('created_at','>=',$dateFrom)
            ->whereDate('created_at','<=',$dateTo)
            ->orderBy('created_at','desc')
            ->get();

        // Totals to mirror Sales PDF summary structure
        $totalIn = InventoryMovement::whereBetween(DB::raw('DATE(created_at)'), [$dateFrom, $dateTo])
            ->where('transaction_type','stock_in')->sum('quantity');
        $totalOut = InventoryMovement::whereBetween(DB::raw('DATE(created_at)'), [$dateFrom, $dateTo])
            ->where('transaction_type','stock_out')->sum('quantity');
        $totalAdjust = InventoryMovement::whereBetween(DB::raw('DATE(created_at)'), [$dateFrom, $dateTo])
            ->where('transaction_type','adjustment')->sum('quantity');
        $netChange = ($totalIn ?? 0) - ($totalOut ?? 0) + ($totalAdjust ?? 0);

        $pdf = Pdf::loadView('admin.inventory-reports.pdf', [
            'movements' => $movements,
            'dateFrom' => $dateFrom,
            'dateTo' => $dateTo,
            'totalIn' => $totalIn,
            'totalOut' => $totalOut,
            'totalAdjust' => $totalAdjust,
            'netChange' => $netChange,
        ])->setPaper('a4','portrait');

        $filename = 'inventory_report_' . $dateFrom . '_to_' . $dateTo . '.pdf';
        return $pdf->download($filename);
    }
}


--- End of File ---

File: .\app\Http\Controllers\Admin\ProductionOrderController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Employee;
use App\Models\InventoryMovement;
use App\Models\InventoryStock;
use App\Models\Product;
use App\Models\Production;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;

class ProductionOrderController extends Controller
{
    public function index(Request $request)
    {
    $query = Production::with(['product','baker']);

        if ($request->filled('status')) {
            $query->where('status', $request->status);
        }
        if ($request->filled('prod_id')) {
            $query->where('prod_id', $request->prod_id);
        }
        if ($request->filled('baker_id')) {
            $query->where('baker_id', $request->baker_id);
        }
        if ($request->filled('search')) {
            $s = $request->search;
            $query->where(function($q) use ($s){
                $q->where('batch_number', 'like', "%$s%")
                  ->orWhere('notes','like', "%$s%");
            });
        }
        if ($request->filled('date_from')) {
            $query->whereDate('production_date', '>=', $request->date_from);
        }
        if ($request->filled('date_to')) {
            $query->whereDate('production_date', '<=', $request->date_to);
        }

        $productions = $query->orderByDesc('production_date')->paginate(15);
        $products = Product::orderBy('name')->get(['prod_id','name','sku']);
        $employees = Employee::orderBy('last_name')->get(['emp_id','first_name','last_name']);

        return view('admin.productions.index', compact('productions','products','employees'));
    }

    public function create()
    {
    $products = Product::orderBy('name')->get();
        $employees = Employee::orderBy('last_name')->get();
        $nextBatchNumber = $this->generateNextBatchNumber();

        return view('admin.productions.create', compact('products','employees','nextBatchNumber'));
    }

    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'prod_id' => 'required|exists:products,prod_id',
            'batch_number' => 'required|string|max:50|unique:production_batches,batch_number',
            'quantity_produced' => 'required|integer|min:1',
            'production_date' => 'required|date|after_or_equal:today',
            'expiration_date' => 'nullable|date|after_or_equal:production_date',
            'baker_id' => 'required|exists:employees,emp_id',
            'status' => 'required|in:pending,in_progress,completed,cancelled',
            'notes' => 'nullable|string|max:1000',
        ]);

        if ($validator->fails()) {
            return back()->withErrors($validator)->withInput();
        }
        DB::transaction(function() use ($request) {
            // Ensure we use a fresh batch number to prevent conflicts
            $batchNumber = $this->generateNextBatchNumber();
            
            $productionData = $request->only([
                'prod_id','quantity_produced','production_date','expiration_date','baker_id','notes','status'
            ]);
            $productionData['batch_number'] = $batchNumber;
            // Auto-calc expiration if not provided
            if (empty($productionData['expiration_date'])) {
                $product = Product::find($productionData['prod_id']);
                if ($product && $product->shelf_life && $productionData['production_date']) {
                    $productionData['expiration_date'] = \Carbon\Carbon::parse($productionData['production_date'])->addDays((int)$product->shelf_life)->toDateString();
                }
            }
            
            $production = Production::create($productionData);
            
            if ($production->status === 'completed') {
                $this->applyComplete($production);
            }
        });

        return redirect()->route('admin.productions.index')->with('success', 'Production order created successfully.');
    }

    public function show(Production $production)
    {
        $production->load(['product','baker']);
        return view('admin.productions.show', compact('production'));
    }

    public function edit(Production $production)
    {
    $products = Product::orderBy('name')->get();
    $employees = Employee::orderBy('last_name')->get();

        return view('admin.productions.edit', compact('production','products','employees'));
    }

    public function update(Request $request, Production $production)
    {
        $validator = Validator::make($request->all(), [
            'prod_id' => 'required|exists:products,prod_id',
            'batch_number' => 'required|string|max:50|unique:production_batches,batch_number,' . $production->batch_id . ',batch_id',
            'quantity_produced' => 'required|integer|min:1',
            'production_date' => 'required|date|after_or_equal:today',
            'expiration_date' => 'nullable|date|after_or_equal:production_date',
            'baker_id' => 'required|exists:employees,emp_id',
            'status' => 'required|in:pending,in_progress,completed,cancelled',
            'notes' => 'nullable|string|max:1000',
        ]);

        if ($validator->fails()) {
            return back()->withErrors($validator)->withInput();
        }

        DB::transaction(function() use ($request, $production) {
            $origStatus = $production->status;
            $production->update($request->only([
                'prod_id','batch_number','quantity_produced','production_date','expiration_date','baker_id','notes','status'
            ]));
            if ($origStatus !== 'completed' && $production->status === 'completed') {
                $this->applyComplete($production);
            }
        });
        return redirect()->route('admin.productions.index')->with('success', 'Production order updated successfully.');
    }

    public function destroy(Production $production)
    {
    $production->delete();

    return redirect()->route('admin.productions.index')->with('success', 'Production order deleted successfully.');
    }

    public function start(Production $production)
    {
        if ($production->status !== 'pending') {
            return back()->with('error', 'Only pending productions can be started.');
        }
        $production->update(['status' => 'in_progress']);
        return back()->with('success', 'Production batch set to in progress.');
    }

    public function complete(Production $production)
    {
        if ($production->status === 'completed') {
            return back()->with('info', 'Production already marked completed.');
        }
        DB::transaction(function() use ($production) {
            $production->update(['status' => 'completed']);
            $this->applyComplete($production);
        });
        return back()->with('success', 'Production completed and inventory updated.');
    }

    public function cancel(Production $production)
    {
        if ($production->status === 'completed') {
            return back()->with('error', 'Cannot cancel a completed production.');
        }
        $production->update(['status' => 'cancelled']);
        return back()->with('success', 'Production order cancelled.');
    }

    private function applyComplete(Production $production): void
    {
        $product = Product::lockForUpdate()->findOrFail($production->prod_id);
        // Get current snapshot
        $snapshot = InventoryStock::lockForUpdate()->where('prod_id', $product->prod_id)->first();
        $prev = $snapshot ? $snapshot->quantity : 0;
        $add = (int) $production->quantity_produced;
        $curr = $prev + $add;

        // Update snapshot
        if ($snapshot) {
            $snapshot->update(['quantity' => $curr, 'last_counted_at' => now()]);
        } else {
            InventoryStock::create([
                'prod_id' => $product->prod_id,
                'quantity' => $curr,
                'reorder_level' => 0,
                'last_counted_at' => now(),
            ]);
        }

        // Record movement
        InventoryMovement::create([
            'prod_id' => $product->prod_id,
            'transaction_type' => 'stock_in',
            'quantity' => $add,
            'previous_stock' => $prev,
            'current_stock' => $curr,
            'notes' => 'Production batch #' . $production->batch_number . ' completed',
        ]);
    }

    /**
     * Generate next incremental batch number
     */
    private function generateNextBatchNumber(): string
    {
        $today = now()->format('Ymd');
        $latestBatch = Production::where('batch_number', 'like', "BATCH-{$today}-%")
            ->orderByDesc('batch_number')
            ->first();

        if ($latestBatch) {
            // Extract the sequence number from the latest batch
            $parts = explode('-', $latestBatch->batch_number);
            $sequence = isset($parts[2]) ? (int)$parts[2] : 0;
            $nextSequence = $sequence + 1;
        } else {
            $nextSequence = 1;
        }

        return "BATCH-{$today}-" . str_pad($nextSequence, 4, '0', STR_PAD_LEFT);
    }
}


--- End of File ---

File: .\app\Http\Controllers\Admin\ProductManagementController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Product;
use App\Models\Category;
use App\Models\AuditLog;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule;
use Barryvdh\DomPDF\Facade\Pdf;

class ProductManagementController extends Controller
{
    /**
     * Display a listing of products.
     */
    public function index(Request $request)
    {
        $query = Product::with('category');

        // Filter by category
        if ($request->filled('category_id')) {
            $query->where('category_id', $request->category_id);
        }

        // Filter by status
        if ($request->filled('status')) {
            $query->where('status', $request->status);
        }

        // Filter by stock level (now using inventory_stocks table)
        if ($request->filled('stock_filter')) {
            switch ($request->stock_filter) {
                case 'low_stock':
                    $query->whereHas('inventoryStock', function($q) {
                        $q->whereColumn('quantity', '<=', 'reorder_level');
                    });
                    break;
                case 'out_of_stock':
                    $query->whereHas('inventoryStock', function($q) {
                        $q->where('quantity', 0);
                    });
                    break;
                case 'in_stock':
                    $query->whereHas('inventoryStock', function($q) {
                        $q->where('quantity', '>', 0);
                    });
                    break;
            }
        }

        // Search by name or SKU
        if ($request->filled('search')) {
            $query->where(function($q) use ($request) {
                $q->where('name', 'like', '%' . $request->search . '%')
                  ->orWhere('sku', 'like', '%' . $request->search . '%');
            });
        }

        $products = $query->orderBy('name')->paginate(15);
        $categories = Category::active()->get();

        return view('admin.products.index', compact('products', 'categories'));
    }

    /**
     * Show the form for creating a new product.
     */
    public function create()
    {
        $categories = Category::active()->get();
        return view('admin.products.create', compact('categories'));
    }

    /**
     * Store a newly created product.
     */
    public function store(Request $request)
    {
        $request->validate([
            'category_id' => 'required|exists:product_categories,category_id',
            'sku' => 'required|unique:products,sku|max:255',
            'name' => 'required|max:255',
            'description' => 'nullable|string',
            'price' => 'required|numeric|min:0',
            'unit' => 'required|max:50',
            'preparation_time' => 'nullable|integer|min:0',
            'is_available' => 'boolean',
            'shelf_life' => 'nullable|integer|min:1',
            'status' => 'required|in:active,inactive',
            'initial_quantity' => 'nullable|integer|min:0',
            'reorder_level' => 'nullable|integer|min:0',
        ]);

        DB::transaction(function () use ($request) {
            $product = Product::create([
                'category_id' => $request->category_id,
                'sku' => strtoupper($request->sku),
                'name' => $request->name,
                'description' => $request->description,
                'price' => $request->price,
                'unit' => $request->unit,
                'preparation_time' => $request->preparation_time,
                'is_available' => $request->has('is_available'),
                'shelf_life' => $request->shelf_life,
                'status' => $request->status,
            ]);

            // Create initial inventory stock record if needed
            if ($request->filled('initial_quantity') && (int)$request->initial_quantity >= 0) {
                $product->inventoryStocks()->create([
                    'quantity' => (int)$request->initial_quantity,
                    'reorder_level' => (int)($request->reorder_level ?? 10),
                    'last_counted_at' => now(),
                ]);
            }
        });

        return redirect()->route('admin.products.index')
            ->with('success', 'Product created successfully.');
    }

    /**
     * Display the specified product.
     */
    public function show(Product $product)
    {
        $product->load('category', 'inventoryStock');
        
        // Get recent stock movements from InventoryMovement model
        $stockMovements = \App\Models\InventoryMovement::where('prod_id', $product->prod_id)
            ->orderBy('created_at', 'desc')
            ->limit(10)
            ->get();

        return view('admin.products.show', compact('product', 'stockMovements'));
    }

    /**
     * Show the form for editing the specified product.
     */
    public function edit(Product $product)
    {
        $categories = Category::active()->get();
        $product->load('inventoryStock');
        return view('admin.products.edit', compact('product', 'categories'));
    }

    /**
     * Update the specified product.
     */
    public function update(Request $request, Product $product)
    {
        $request->validate([
            'category_id' => 'required|exists:product_categories,category_id',
            'sku' => [
                'required',
                'max:255',
                Rule::unique('products', 'sku')->ignore($product->prod_id, 'prod_id'),
            ],
            'name' => 'required|max:255',
            'description' => 'nullable|string',
            'price' => 'required|numeric|min:0',
            'unit' => 'required|max:50',
            'preparation_time' => 'nullable|integer|min:0',
            'is_available' => 'boolean',
            'shelf_life' => 'nullable|integer|min:1',
            'status' => 'required|in:active,inactive',
        ]);

        $product->update([
            'category_id' => $request->category_id,
            'sku' => strtoupper($request->sku),
            'name' => $request->name,
            'description' => $request->description,
            'price' => $request->price,
            'unit' => $request->unit,
            'preparation_time' => $request->preparation_time,
            'is_available' => $request->has('is_available'),
            'shelf_life' => $request->shelf_life,
            'status' => $request->status,
        ]);

        return redirect()->route('admin.products.index')
            ->with('success', 'Product updated successfully.');
    }

    /**
     * Remove the specified product.
     */
    public function destroy(Product $product)
    {
        // Check if product has sales records
        if ($product->orderItems()->exists()) {
            return redirect()->back()
                ->withErrors(['error' => 'Cannot delete product that has sales records. You can deactivate it instead.']);
        }

        // Check if product has inventory stock with quantity > 0
        if ($product->inventoryStock()->exists() && $product->inventoryStock->quantity > 0) {
            return redirect()->back()
                ->withErrors(['error' => 'Cannot delete product that has inventory stock. Please adjust stock to zero first or deactivate the product instead.']);
        }

        DB::beginTransaction();
        try {
            // Delete inventory stock record if exists (with zero quantity)
            if ($product->inventoryStock()->exists()) {
                $product->inventoryStock()->delete();
            }

            $product->delete();
            
            DB::commit();
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()
                ->withErrors(['error' => 'Error deleting product: ' . $e->getMessage()]);
        }

        return redirect()->route('admin.products.index')
            ->with('success', 'Product deleted successfully.');
    }

    /**
     * Adjust product stock manually
     */
    public function adjustStock(Request $request, Product $product)
    {
        $request->validate([
            'adjustment_type' => 'required|in:increase,decrease',
            'quantity' => 'required|integer|min:1',
            'reason' => 'required|string|max:255',
            'notes' => 'nullable|string',
        ]);

        DB::transaction(function () use ($request, $product) {
            // Get current inventory stock or create if doesn't exist
            $inventoryStock = $product->inventoryStock ?? $product->inventoryStocks()->create([
                'quantity' => 0,
                'reorder_level' => 10,
                'last_counted_at' => now(),
            ]);

            $oldQuantity = $inventoryStock->quantity;
            $adjustmentQuantity = (int) $request->quantity;

            if ($request->adjustment_type === 'decrease') {
                if ($adjustmentQuantity > $oldQuantity) {
                    throw new \Exception('Cannot decrease stock below zero.');
                }
                $newQuantity = $oldQuantity - $adjustmentQuantity;
            } else {
                $newQuantity = $oldQuantity + $adjustmentQuantity;
            }

            // Update inventory stock
            $inventoryStock->update([
                'quantity' => $newQuantity,
                'last_counted_at' => now(),
            ]);

            // Create inventory movement record
            \App\Models\InventoryMovement::create([
                'prod_id' => $product->prod_id,
                'transaction_type' => 'adjustment',
                'quantity' => $adjustmentQuantity,
                'previous_stock' => $oldQuantity,
                'current_stock' => $newQuantity,
                'notes' => "Manual {$request->adjustment_type}: {$request->reason}" . ($request->notes ? " - {$request->notes}" : ''),
            ]);

            AuditLog::logAction(
                'stock_adjustment',
                'inventory_stocks',
                $inventoryStock->inventory_id,
                ['quantity' => $oldQuantity],
                ['quantity' => $newQuantity],
                "Stock adjustment for {$product->name}: {$request->adjustment_type} {$adjustmentQuantity} units. Reason: {$request->reason}"
            );
        });

        return redirect()->back()
            ->with('success', 'Stock adjusted successfully.');
    }

    /**
     * Bulk update products
     */
    public function bulkUpdate(Request $request)
    {
        $request->validate([
            'product_ids' => 'required|array',
            'product_ids.*' => 'exists:products,prod_id',
            'action' => 'required|in:activate,deactivate,delete',
        ]);

        DB::transaction(function () use ($request) {
            $products = Product::whereIn('prod_id', $request->product_ids)->get();

            foreach ($products as $product) {
                switch ($request->action) {
                    case 'activate':
                        $product->update(['status' => 'active']);
                        AuditLog::logAction('bulk_activate', 'products', $product->prod_id, null, null, "Bulk activated product: {$product->name}");
                        break;
                    case 'deactivate':
                        $product->update(['status' => 'inactive']);
                        AuditLog::logAction('bulk_deactivate', 'products', $product->prod_id, null, null, "Bulk deactivated product: {$product->name}");
                        break;
                    case 'delete':
                        // Allow deletion if no sales records and (no inventory OR inventory quantity is 0)
                        $hasInventory = $product->inventoryStock()->exists();
                        $hasStock = $hasInventory && $product->inventoryStock->quantity > 0;
                        
                        if (!$product->orderItems()->exists() && !$hasStock) {
                            // Delete inventory record if exists (with zero quantity)
                            if ($hasInventory) {
                                $product->inventoryStock()->delete();
                            }
                            AuditLog::logAction('bulk_delete', 'products', $product->prod_id, $product->toArray(), null, "Bulk deleted product: {$product->name}");
                            $product->delete();
                        }
                        break;
                }
            }
        });

        return redirect()->back()
            ->with('success', 'Bulk operation completed successfully.');
    }

    /**
     * Export products to PDF
     */
    public function export()
    {
        $products = Product::with('category')->orderBy('name')->get();

        $pdf = Pdf::loadView('admin.products.pdf', [
            'products' => $products,
        ])->setPaper('a4', 'portrait');

        $filename = 'products_' . now()->format('Y-m-d_H-i-s') . '.pdf';

        AuditLog::logAction('export', 'products', null, null, null, "Exported products to PDF: {$filename}");

        return $pdf->download($filename);
    }
}


--- End of File ---

File: .\app\Http\Controllers\Admin\SaleManagementController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Employee;
use App\Models\InventoryStock;
use App\Models\InventoryMovement;
use App\Models\Product;
use App\Models\Sale;
use App\Models\SaleItem;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;

class SaleManagementController extends Controller
{
    public function index(Request $request)
    {
        $query = Sale::with(['items.product','cashier']);
        if ($request->filled('status')) $query->where('status', $request->status);
        if ($request->filled('search')) {
            $s = $request->search;
            $query->where(function($q) use ($s){
                $q->where('order_number','like',"%$s%")
                  ->orWhere('notes','like',"%$s%");
            });
        }
        if ($request->filled('date_from')) $query->whereDate('order_date','>=',$request->date_from);
        if ($request->filled('date_to')) $query->whereDate('order_date','<=',$request->date_to);

        $sales = $query->orderByDesc('order_date')->paginate(15);
        return view('admin.sales.index', compact('sales'));
    }

    public function create()
    {
        $products = Product::active()->with('inventoryStock')->orderBy('name')->get();
        $cashiers = Employee::orderBy('last_name')->get(['emp_id','first_name','last_name']);
        return view('admin.sales.create', compact('products','cashiers'));
    }

    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'cashier_id' => 'required|exists:employees,emp_id',
            'items' => 'required|array|min:1',
            'items.*.prod_id' => 'required|exists:products,prod_id',
            'items.*.quantity' => 'required|integer|min:1',
            'items.*.unit_price' => 'required|numeric|min:0',
            'total_amount' => 'required|numeric|min:0',
            'amount_paid' => 'required|numeric|min:0',
            'payment_method' => 'required|in:cash,card,gcash',
            'notes' => 'nullable|string|max:1000',
        ]);

        if ($validator->fails()) return back()->withErrors($validator)->withInput();

        // Calculate subtotal
        $subtotal = 0;
        foreach ($request->items as $it) {
            $subtotal += ((float)$it['unit_price']) * ((int)$it['quantity']);
        }

        // VAT calculation
        $vatRate = config('vat.vat_rate', 12);
        $vatAmount = round($subtotal * ($vatRate / 100), 2);
        $total = $subtotal + $vatAmount;

        // Verify the total matches
        if (abs($total - (float)$request->total_amount) > 0.01) {
            return back()->withErrors(['total_amount' => 'Total amount mismatch. Please refresh and try again.'])->withInput();
        }


        // Calculate change
        $cashGiven = (float)$request->amount_paid;
        $change = round($cashGiven - $total, 2);
        if ($cashGiven < $total) {
            return back()->withErrors(['amount_paid' => 'Amount paid must be at least equal to the total amount.'])->withInput();
        }

    DB::transaction(function() use ($request, $subtotal, $vatAmount, $total, $cashGiven, $change) {
            // Auto-generate order number
            $orderNumber = 'SO-' . date('Ymd') . '-' . str_pad(Sale::whereDate('created_at', today())->count() + 1, 4, '0', STR_PAD_LEFT);

            $sale = Sale::create([
                'order_number' => $orderNumber,
                'order_type' => 'takeout',
                'cashier_id' => $request->cashier_id,
                'subtotal' => $subtotal,
                'vat_amount' => $vatAmount,
                'total_amount' => $total,
                'cash_given' => $cashGiven,
                'change' => $change,
                'order_date' => now()->toDateString(),
                'status' => 'completed',
                'notes' => $request->notes,
            ]);

            foreach ($request->items as $it) {
                $product = Product::lockForUpdate()->findOrFail($it['prod_id']);
                $qty = (int)$it['quantity'];
                $unit = (float)$it['unit_price'];
                $totalPrice = bcmul((string)$unit, (string)$qty, 2);

                SaleItem::create([
                    'so_id' => $sale->so_id,
                    'prod_id' => $product->prod_id,
                    'quantity' => $qty,
                    'unit_price' => $unit,
                    'total_price' => $totalPrice,
                    'special_instructions' => null,
                ]);

                // Update inventory snapshot and record movement
                $snapshot = InventoryStock::lockForUpdate()->where('prod_id', $product->prod_id)->first();
                $prev = $snapshot ? $snapshot->quantity : 0;
                $newQty = max(0, $prev - $qty);
                if ($snapshot) {
                    $snapshot->update(['quantity' => $newQty, 'last_counted_at' => now()]);
                } else {
                    InventoryStock::create([
                        'prod_id' => $product->prod_id,
                        'quantity' => $newQty,
                        'reorder_level' => 0,
                        'last_counted_at' => now(),
                    ]);
                }
                InventoryMovement::create([
                    'prod_id' => $product->prod_id,
                    'transaction_type' => 'stock_out',
                    'quantity' => $qty,
                    'previous_stock' => $prev,
                    'current_stock' => $newQty,
                    'notes' => 'Sale #' . $orderNumber,
                ]);
            }
            // Log to audit
            if (class_exists('App\\Models\\AuditLog')) {
                $desc = "Sale completed.\n" .
                    "Order Number: {$sale->order_number}\n" .
                    "Total Amount: ₱" . number_format($sale->total_amount, 2) . "\n" .
                    "Cash Given: ₱" . number_format($sale->cash_given, 2) . "\n" .
                    "Change Returned: ₱" . number_format($sale->change, 2);
                \App\Models\AuditLog::logAction(
                    'create',
                    'sales_orders',
                    $sale->so_id,
                    null,
                    [
                        'total_amount' => $sale->total_amount,
                        'cash_given' => $sale->cash_given,
                        'change' => $sale->change,
                        'order_number' => $sale->order_number,
                    ],
                    $desc
                );
            }
        });

        return redirect()->route('admin.sales.index')->with('success', 'Sale recorded successfully.');
    }

    public function show(Sale $sale)
    {
        $sale->load(['items.product','cashier']);
        return view('admin.sales.show', compact('sale'));
    }

    public function edit(Sale $sale)
    {
    $products = Product::active()->orderBy('name')->get();
    $cashiers = Employee::orderBy('last_name')->get(['emp_id','first_name','last_name']);
        $sale->load('items.product');
        
        return view('admin.sales.edit', compact('sale', 'products', 'cashiers'));
    }

    public function update(Request $request, Sale $sale)
    {
        // For security, only allow editing notes and cashier for completed sales
        if ($sale->status !== 'completed') {
            return back()->with('error', 'Only completed sales can be edited.');
        }

        $validator = Validator::make($request->all(), [
            'cashier_id' => 'required|exists:employees,emp_id',
            'notes' => 'nullable|string|max:1000',
        ]);

        if ($validator->fails()) {
            return back()->withErrors($validator)->withInput();
        }

        $sale->update([
            'cashier_id' => $request->cashier_id,
            'notes' => $request->notes,
        ]);

        return redirect()->route('admin.sales.index')->with('success', 'Sale updated successfully.');
    }

    public function destroy(Sale $sale)
    {
        if ($sale->status === 'completed') {
            return back()->with('error', 'Cannot delete completed sales. Cancel them first.');
        }
        
        $sale->delete();
        return redirect()->route('admin.sales.index')->with('success', 'Sale deleted successfully.');
    }

    public function cancel(Sale $sale)
    {
        if ($sale->status === 'cancelled') return back()->with('info','Sale already cancelled.');
        DB::transaction(function() use ($sale) {
            $sale->load('items');
            $sale->update(['status' => 'cancelled']);
            foreach ($sale->items as $item) {
                $product = Product::lockForUpdate()->findOrFail($item->prod_id);

                // Update inventory snapshot
                $snapshot = InventoryStock::lockForUpdate()->where('prod_id', $product->prod_id)->first();
                $prev = $snapshot ? $snapshot->quantity : 0;
                $newQty = $prev + (int)$item->quantity;
                if ($snapshot) {
                    $snapshot->update(['quantity' => $newQty, 'last_counted_at' => now()]);
                } else {
                    InventoryStock::create([
                        'prod_id' => $product->prod_id,
                        'quantity' => $newQty,
                        'reorder_level' => 0,
                        'last_counted_at' => now(),
                    ]);
                }

                // Record inventory movement (adjustment back in)
                InventoryMovement::create([
                    'prod_id' => $product->prod_id,
                    'transaction_type' => 'adjustment',
                    'quantity' => (int)$item->quantity,
                    'previous_stock' => $prev,
                    'current_stock' => $newQty,
                    'notes' => 'Cancel Sale #' . $sale->order_number,
                ]);
            }
        });
        return back()->with('success','Sale cancelled and stock restored.');
    }
}


--- End of File ---

File: .\app\Http\Controllers\Admin\SalesReportController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Sale;
use App\Models\Product;
use App\Models\Employee;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;
use Barryvdh\DomPDF\Facade\Pdf;

class SalesReportController extends Controller
{
    public function index(Request $request)
    {
        $query = Sale::with(['cashier', 'items.product']);

        // Date range filters
        $dateFrom = $request->date_from ?? now()->startOfMonth()->format('Y-m-d');
        $dateTo = $request->date_to ?? now()->format('Y-m-d');
        
      $query->whereDate('order_date', '>=', $dateFrom)
          ->whereDate('order_date', '<=', $dateTo);

        // Additional filters
        if ($request->filled('status')) {
            $query->where('status', $request->status);
        }
        if ($request->filled('cashier_id')) {
            $query->where('cashier_id', $request->cashier_id);
        }
        if ($request->filled('search')) {
            $s = $request->search;
            $query->where(function($q) use ($s) {
                                $q->where('order_number', 'like', "%$s%")
                  ->orWhere('notes', 'like', "%$s%");
            });
        }

        // Calculate summary statistics before pagination
        $statsQuery = clone $query;
        $totalSales = $statsQuery->sum('total_amount');
        $totalTransactions = $statsQuery->count();
        $averageTransaction = $totalTransactions > 0 ? $totalSales / $totalTransactions : 0;

    $sales = $query->orderByDesc('order_date')->paginate(15);
    $cashiers = Employee::orderBy('last_name')->get(['emp_id', 'first_name', 'last_name']);

        return view('admin.sales-reports.index', compact(
            'sales', 'cashiers', 'dateFrom', 'dateTo', 
            'totalSales', 'totalTransactions', 'averageTransaction'
        ));
    }

    public function show(Request $request)
    {
        $dateFrom = $request->date_from ?? now()->startOfMonth()->format('Y-m-d');
        $dateTo = $request->date_to ?? now()->format('Y-m-d');

        // Daily sales summary
        $dailySales = Sale::selectRaw('DATE(order_date) as date, COUNT(*) as transactions, SUM(total_amount) as total')
            ->whereDate('order_date', '>=', $dateFrom)
            ->whereDate('order_date', '<=', $dateTo)
            ->where('status', 'completed')
            ->groupBy('date')
            ->orderBy('date', 'desc')
            ->get();

        // Top products
        $topProducts = DB::table('order_items')
            ->join('sales_orders', 'order_items.so_id', '=', 'sales_orders.so_id')
            ->join('products', 'order_items.prod_id', '=', 'products.prod_id')
            ->whereDate('sales_orders.order_date', '>=', $dateFrom)
            ->whereDate('sales_orders.order_date', '<=', $dateTo)
            ->where('sales_orders.status', 'completed')
            ->selectRaw('products.name, products.sku, SUM(order_items.quantity) as total_qty, SUM(order_items.total_price) as total_revenue')
            ->groupBy('products.prod_id', 'products.name', 'products.sku')
            ->orderByDesc('total_revenue')
            ->limit(10)
            ->get();

        // Cashier performance
        $cashierPerformance = Sale::with('cashier')
            ->selectRaw('cashier_id, COUNT(*) as transactions, SUM(total_amount) as total_sales')
            ->whereDate('order_date', '>=', $dateFrom)
            ->whereDate('order_date', '<=', $dateTo)
            ->where('status', 'completed')
            ->groupBy('cashier_id')
            ->orderByDesc('total_sales')
            ->get();

        // Hourly sales pattern
        $hourlySales = Sale::selectRaw('HOUR(created_at) as hour, COUNT(*) as transactions, SUM(total_amount) as total')
            ->whereDate('order_date', '>=', $dateFrom)
            ->whereDate('order_date', '<=', $dateTo)
            ->where('status', 'completed')
            ->groupBy('hour')
            ->orderBy('hour')
            ->get();

        return view('admin.sales-reports.show', compact(
            'dailySales', 'topProducts', 'cashierPerformance', 'hourlySales', 
            'dateFrom', 'dateTo'
        ));
    }

    public function export(Request $request)
    {
        $dateFrom = $request->date_from ?? now()->startOfMonth()->format('Y-m-d');
        $dateTo = $request->date_to ?? now()->format('Y-m-d');

        $sales = Sale::with(['cashier', 'items.product'])
            ->whereDate('order_date', '>=', $dateFrom)
            ->whereDate('order_date', '<=', $dateTo)
            ->orderBy('order_date', 'desc')
            ->get();

        // Summary values
        $totalSales = $sales->sum('total_amount');
        $totalTransactions = $sales->count();
        $averageTransaction = $totalTransactions > 0 ? $totalSales / $totalTransactions : 0;

        // Generate PDF from blade view
        $pdf = Pdf::loadView('admin.sales-reports.pdf', [
            'sales' => $sales,
            'dateFrom' => $dateFrom,
            'dateTo' => $dateTo,
            'totalSales' => $totalSales,
            'totalTransactions' => $totalTransactions,
            'averageTransaction' => $averageTransaction,
        ])->setPaper('a4', 'portrait');

        $filename = 'sales_report_' . $dateFrom . '_to_' . $dateTo . '.pdf';
        return $pdf->download($filename);
    }
}

--- End of File ---

File: .\app\Http\Controllers\Admin\SettingsController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\AuditLog;
use App\Models\Setting;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;

class SettingsController extends Controller
{
    public function index()
    {
        $defaults = [
            'store.name' => "Arbee's Bakeshop",
            'store.branch' => 'Main',
            'ui.theme' => 'sea',
        ];

        if (!Schema::hasTable('settings')) {
            // Table missing: show defaults to avoid crash; page will prompt user to migrate
            $settings = $defaults;
            return view('admin.settings.index', compact('settings'))
                ->with('error', 'Settings table not found. Please run migrations to enable saving settings.');
        }

        $settings = [
            'store.name' => optional(Setting::find('store.name'))->value ?? $defaults['store.name'],
            'store.branch' => optional(Setting::find('store.branch'))->value ?? $defaults['store.branch'],
            'ui.theme' => optional(Setting::find('ui.theme'))->value ?? $defaults['ui.theme'],
        ];
        return view('admin.settings.index', compact('settings'));
    }

    public function update(Request $request)
    {
        $validated = $request->validate([
            'store_name' => 'required|string|max:255',
            'store_branch' => 'required|string|max:255',
            'ui_theme' => 'required|string|in:sea',
        ]);

        if (!Schema::hasTable('settings')) {
            return back()->with('error', 'Settings table not found. Please run migrations first.');
        }

        DB::transaction(function() use ($validated) {
            // Capture previous values in dot-key format
            $before = [
                'store.name'  => optional(Setting::find('store.name'))?->value,
                'store.branch'=> optional(Setting::find('store.branch'))?->value,
                'ui.theme'    => optional(Setting::find('ui.theme'))?->value,
            ];

            // Persist settings using key-value storage
            Setting::updateOrCreate(['key' => 'store.name'],   ['value' => $validated['store_name']]);
            Setting::updateOrCreate(['key' => 'store.branch'], ['value' => $validated['store_branch']]);
            Setting::updateOrCreate(['key' => 'ui.theme'],     ['value' => $validated['ui_theme']]);

            // Prepare new values in dot-key format for consistency
            $after = [
                'store.name'  => $validated['store_name'],
                'store.branch'=> $validated['store_branch'],
                'ui.theme'    => $validated['ui_theme'],
            ];

            // Use a stable sentinel record id (0) for settings singleton
            AuditLog::logAction('update', 'settings', 0, $before, $after, 'Updated system settings');
        });

        return back()->with('success','Settings updated.');
    }
}


--- End of File ---

File: .\app\Http\Controllers\Admin\UserController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\User;
use App\Models\Employee;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rule;

class UserController extends Controller
{
    /**
     * List all pending users for admin approval.
     */
    public function pending()
    {
        $pendingUsers = User::where('status', 'pending')->orderBy('created_at', 'asc')->get();
        return view('admin.users.pending', compact('pendingUsers'));
    }

    /**
     * Approve a pending user (set status to active).
     */
    public function approve(User $user)
    {
        if ($user->status !== 'pending') {
            return back()->with('error', 'User is not pending approval.');
        }
        $user->update(['status' => 'active']);
        // Optionally: send notification/email to user here
        // Audit log
        if (class_exists('App\\Models\\AuditLog')) {
            \App\Models\AuditLog::logAction('approve', 'users', $user->user_id, null, $user->toArray(), "Approved user {$user->username}");
        }
        return back()->with('success', "User '{$user->username}' approved and activated.");
    }

    /**
     * Reject a pending user (delete user and employee record).
     */
    public function reject(User $user)
    {
        if ($user->status !== 'pending') {
            return back()->with('error', 'User is not pending approval.');
        }
        $username = $user->username;
        $emp = $user->employee;
        $user->delete();
        if ($emp) { $emp->delete(); }
        // Audit log
        if (class_exists('App\\Models\\AuditLog')) {
            \App\Models\AuditLog::logAction('reject', 'users', $user->user_id, null, null, "Rejected user {$username}");
        }
        return back()->with('success', "User '{$username}' rejected and removed.");
    }

    /**
     * Display a listing of users.
     */
    public function index()
    {
        try {
            $users = User::with('employee')
                ->paginate(10);

            return view('admin.users.index', compact('users'));
        } catch (\Exception $e) {
            return back()->with('error', 'Failed to load users: ' . $e->getMessage());
        }
    }

    /**
     * Show the form for creating a new user.
     */
    public function create()
    {
        try {
            // Get employees that don't have users yet
            $availableEmployees = Employee::whereDoesntHave('user')->get();
            
            return view('admin.users.create', compact('availableEmployees'));
        } catch (\Exception $e) {
            return back()->with('error', 'Failed to load create form: ' . $e->getMessage());
        }
    }

    /**
     * Store a newly created user in storage.
     */
    public function store(Request $request)
    {
        try {
            // Debug: Log all request data
            \Log::info('User creation request data:', $request->all());
            
            $validated = $request->validate([
                'emp_id' => 'required|exists:employees,emp_id|unique:users,emp_id',
                'username' => 'required|string|max:255|unique:users,username',
                'email' => 'required|string|email|max:255|unique:users,email',
                'password' => 'required|string|min:8|confirmed',
                'role' => 'required|in:admin,baker,cashier',
                'status' => 'in:active,inactive'
            ]);

            // Debug: Log validated data
            \Log::info('Validated user data:', $validated);

            DB::beginTransaction();

            $user = User::create([
                'emp_id' => $validated['emp_id'],
                'username' => $validated['username'],
                'email' => $validated['email'],
                'password' => Hash::make($validated['password']),
                'role' => $validated['role'],
                'status' => $request->input('status', 'active'),
            ]);

            // Debug: Log created user
            \Log::info('Created user:', $user->toArray());

            DB::commit();

            return redirect()->route('admin.users.index')
                ->with('success', 'User created successfully!');

        } catch (\Exception $e) {
            DB::rollBack();
            return back()->withInput()
                ->with('error', 'Failed to create user: ' . $e->getMessage());
        }
    }

    /**
     * Display the specified user.
     */
    public function show(User $user)
    {
        try {
            $user->load('employee');
            return view('admin.users.show', compact('user'));
        } catch (\Exception $e) {
            return back()->with('error', 'Failed to load user details: ' . $e->getMessage());
        }
    }

    /**
     * Show the form for editing the specified user.
     */
    public function edit(User $user)
    {
        try {
            // Get employees that don't have users yet, plus the current user's employee
            $availableEmployees = Employee::whereDoesntHave('user')
                ->orWhere('emp_id', $user->emp_id)
                ->get();
            
            return view('admin.users.edit', compact('user', 'availableEmployees'));
        } catch (\Exception $e) {
            return back()->with('error', 'Failed to load edit form: ' . $e->getMessage());
        }
    }

    /**
     * Update the specified user in storage.
     */
    public function update(Request $request, User $user)
    {
        try {
            $validated = $request->validate([
                'emp_id' => [
                    'required',
                    'exists:employees,emp_id',
                    Rule::unique('users', 'emp_id')->ignore($user->user_id, 'user_id')
                ],
                'username' => [
                    'required',
                    'string',
                    'max:255',
                    Rule::unique('users', 'username')->ignore($user->user_id, 'user_id')
                ],
                'email' => [
                    'required',
                    'string',
                    'email',
                    'max:255',
                    Rule::unique('users', 'email')->ignore($user->user_id, 'user_id')
                ],
                'password' => 'nullable|string|min:8|confirmed',
                'role' => 'required|in:admin,manager,baker,cashier',
                'status' => 'required|in:active,inactive'
            ]);

            DB::beginTransaction();

            $updateData = [
                'emp_id' => $validated['emp_id'],
                'username' => $validated['username'],
                'email' => $validated['email'],
                'role' => $validated['role'],
                'status' => $validated['status'],
            ];

            // Only update password if provided
            if (!empty($validated['password'])) {
                $updateData['password'] = Hash::make($validated['password']);
            }

            $user->update($updateData);

            DB::commit();

            return redirect()->route('admin.users.index')
                ->with('success', 'User updated successfully!');

        } catch (\Exception $e) {
            DB::rollBack();
            return back()->withInput()
                ->with('error', 'Failed to update user: ' . $e->getMessage());
        }
    }

    /**
     * Remove the specified user from storage.
     */
    public function destroy(User $user)
    {
        try {
            // Prevent deletion of the current logged-in user
            if (auth()->id() === $user->user_id) {
                return back()->with('error', 'You cannot delete your own account!');
            }

            DB::beginTransaction();

            $userName = $user->username;
            $user->delete();

            DB::commit();

            return redirect()->route('admin.users.index')
                ->with('success', "User '{$userName}' deleted successfully!");

        } catch (\Exception $e) {
            DB::rollBack();
            return back()->with('error', 'Failed to delete user: ' . $e->getMessage());
        }
    }

    /**
     * Toggle user active status.
     */
    public function toggleStatus(User $user)
    {
        try {
            // Prevent deactivating the current logged-in user
            if (auth()->id() === $user->user_id) {
                return back()->with('error', 'You cannot deactivate your own account!');
            }

            $newStatus = $user->status === 'active' ? 'inactive' : 'active';
            $user->update([
                'status' => $newStatus
            ]);

            $statusText = $newStatus === 'active' ? 'activated' : 'deactivated';
            
            return back()->with('success', "User '{$user->username}' has been {$statusText}!");

        } catch (\Exception $e) {
            return back()->with('error', 'Failed to update user status: ' . $e->getMessage());
        }
    }
}

--- End of File ---

File: .\app\Http\Controllers\Admin\UserManagementController.php
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Employee;
use App\Models\AuditLog;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule;

class UserManagementController extends Controller
{
    /**
     * Display a listing of users.
     */
    public function index(Request $request)
    {
        $query = User::with('employee');

        // Filter by role
        if ($request->filled('role')) {
            $query->where('role', $request->role);
        }

        // Filter by status
        if ($request->filled('status')) {
            $query->where('status', $request->status);
        }

        // Search by username or email
        if ($request->filled('search')) {
            $query->where(function($q) use ($request) {
                $q->where('username', 'like', '%' . $request->search . '%')
                  ->orWhere('email', 'like', '%' . $request->search . '%');
            });
        }

        $users = $query->orderBy('created_at', 'desc')->paginate(15);

        // Get available employees for linking
        $availableEmployees = Employee::whereDoesntHave('user')->get();

        return view('admin.users.index', compact('users', 'availableEmployees'));
    }

    /**
     * Show the form for creating a new user.
     */
    public function create()
    {
        $availableEmployees = Employee::whereDoesntHave('user')->get();
        return view('admin.users.create', compact('availableEmployees'));
    }

    /**
     * Store a newly created user.
     */
    public function store(Request $request)
    {
        $request->validate([
            'username' => 'required|unique:users,username|max:255',
            'email' => 'required|email|unique:users,email|max:255',
            'password' => 'required|min:8|confirmed',
            'role' => 'required|in:admin,baker,cashier',
            'emp_id' => 'nullable|exists:employees,emp_id|unique:users,emp_id',
            'status' => 'in:active,inactive',
        ]);

        DB::transaction(function () use ($request) {
            $user = User::create([
                'username' => $request->username,
                'email' => $request->email,
                'password' => Hash::make($request->password),
                'role' => $request->role,
                'emp_id' => $request->emp_id,
                'status' => $request->input('status', 'active'),
            ]);

            AuditLog::logAction(
                'create',
                'users',
                $user->user_id,
                null,
                $user->toArray(),
                "Created user account: {$user->username} with role: {$user->role}"
            );
        });

        return redirect()->route('admin.users.index')
            ->with('success', 'User created successfully.');
    }

    /**
     * Display the specified user.
     */
    public function show(User $user)
    {
        $user->load('employee');
        
        // Get user's recent activities
        $recentActivities = AuditLog::where('user_id', $user->user_id)
            ->orderBy('created_at', 'desc')
            ->limit(10)
            ->get();

        return view('admin.users.show', compact('user', 'recentActivities'));
    }

    /**
     * Show the form for editing the specified user.
     */
    public function edit(User $user)
    {
        $availableEmployees = Employee::whereDoesntHave('user')
            ->orWhere('emp_id', $user->emp_id)
            ->get();

        return view('admin.users.edit', compact('user', 'availableEmployees'));
    }

    /**
     * Update the specified user.
     */
    public function update(Request $request, User $user)
    {
        // Prevent last admin from being demoted
        if ($user->role === 'admin' && $request->role !== 'admin') {
            $adminCount = User::where('role', 'admin')->where('status', 'active')->count();
            if ($adminCount <= 1) {
                return redirect()->back()
                    ->withErrors(['role' => 'Cannot demote the last active admin.']);
            }
        }

        $request->validate([
            'username' => [
                'required',
                'max:255',
                Rule::unique('users', 'username')->ignore($user->user_id, 'user_id'),
            ],
            'email' => [
                'required',
                'email',
                'max:255',
                Rule::unique('users', 'email')->ignore($user->user_id, 'user_id'),
            ],
            'password' => 'nullable|min:8|confirmed',
            'role' => 'required|in:admin,baker,cashier',
            'emp_id' => [
                'nullable',
                'exists:employees,emp_id',
                Rule::unique('users', 'emp_id')->ignore($user->user_id, 'user_id'),
            ],
            'status' => 'in:active,inactive',
        ]);

        DB::transaction(function () use ($request, $user) {
            $originalData = $user->toArray();

            $updateData = [
                'username' => $request->username,
                'email' => $request->email,
                'role' => $request->role,
                'emp_id' => $request->emp_id,
                'status' => $request->input('status', 'active'),
            ];

            if ($request->filled('password')) {
                $updateData['password'] = Hash::make($request->password);
            }

            $user->update($updateData);

            AuditLog::logAction(
                'update',
                'users',
                $user->user_id,
                $originalData,
                $user->getChanges(),
                "Updated user account: {$user->username}"
            );
        });

        return redirect()->route('admin.users.index')
            ->with('success', 'User updated successfully.');
    }

    /**
     * Remove the specified user.
     */
    public function destroy(User $user)
    {
        // Prevent last admin from being deleted
        if ($user->role === 'admin') {
            $adminCount = User::where('role', 'admin')->where('status', 'active')->count();
            if ($adminCount <= 1) {
                return redirect()->back()
                    ->withErrors(['error' => 'Cannot delete the last active admin.']);
            }
        }

        DB::transaction(function () use ($user) {
            $userData = $user->toArray();

            AuditLog::logAction(
                'delete',
                'users',
                $user->user_id,
                $userData,
                null,
                "Deleted user account: {$user->username}"
            );

            $user->delete();
        });

        return redirect()->route('admin.users.index')
            ->with('success', 'User deleted successfully.');
    }

    /**
     * Reset user password
     */
    public function resetPassword(Request $request, User $user)
    {
        $request->validate([
            'password' => 'required|min:8|confirmed',
        ]);

        $user->update([
            'password' => Hash::make($request->password),
        ]);

        AuditLog::logAction(
            'password_reset',
            'users',
            $user->user_id,
            null,
            null,
            "Reset password for user: {$user->username}"
        );

        return redirect()->back()
            ->with('success', 'Password reset successfully.');
    }

    /**
     * Toggle user active status
     */
    public function toggleStatus(User $user)
    {
        // Prevent last admin from being deactivated
        if ($user->role === 'admin' && $user->status === 'active') {
            $adminCount = User::where('role', 'admin')->where('status', 'active')->count();
            if ($adminCount <= 1) {
                return redirect()->back()
                    ->withErrors(['error' => 'Cannot deactivate the last active admin.']);
            }
        }

        $oldStatus = $user->status;
        $newStatus = $user->status === 'active' ? 'inactive' : 'active';
        $user->update(['status' => $newStatus]);

        AuditLog::logAction(
            $newStatus === 'active' ? 'activated' : 'deactivated',
            'users',
            $user->user_id,
            ['status' => $oldStatus],
            ['status' => $newStatus],
            ($newStatus === 'active' ? 'Activated' : 'Deactivated') . " user: {$user->username}"
        );

        return redirect()->back()
            ->with('success', 'User status updated successfully.');
    }
}


--- End of File ---

File: .\app\Http\Controllers\Baker\DashboardController.php
<?php

namespace App\Http\Controllers\Baker;

use Carbon\Carbon;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\Production;
use App\Models\Product;
use App\Models\InventoryStock;

class DashboardController extends Controller
{
    public function index()
    {
        $user = Auth::user();
        
        // Check if profile is complete
        if (!$user->employee || $user->employee->status === 'inactive') {
            return view('baker.dashboard.index');
        }

        // Get baker dashboard data
        $bakerId = $user->emp_id;

        // Use Carbon for exact date range matching
        $today = Carbon::today()->toDateString();
        $todaysProduction = Production::where('baker_id', $bakerId)
            ->whereDate('production_date', $today)
            ->count();

        $weekStart = Carbon::now()->startOfWeek()->toDateString();
        $weekEnd = Carbon::now()->endOfWeek()->toDateString();
        $weeklyProduction = Production::where('baker_id', $bakerId)
            ->whereDate('production_date', '>=', $weekStart)
            ->whereDate('production_date', '<=', $weekEnd)
            ->count();

        $monthStart = Carbon::now()->startOfMonth()->toDateString();
        $monthEnd = Carbon::now()->endOfMonth()->toDateString();
        $monthlyProduction = Production::where('baker_id', $bakerId)
            ->whereDate('production_date', '>=', $monthStart)
            ->whereDate('production_date', '<=', $monthEnd)
            ->count();

        // Debug: Log KPI query parameters
        \Log::info('[Baker Dashboard KPI] Params', [
            'baker_id' => $bakerId,
            'today' => $today,
            'week_start' => $weekStart,
            'week_end' => $weekEnd,
            'month_start' => $monthStart,
            'month_end' => $monthEnd,
        ]);

        // Debug: Log KPI results
        \Log::info('[Baker Dashboard KPI] Results', [
            'productions_today' => $todaysProduction,
            'productions_this_week' => $weeklyProduction,
            'productions_this_month' => $monthlyProduction,
        ]);

        // Recent production batches
        $recentBatches = Production::with(['product'])
            ->where('baker_id', $bakerId)
            ->orderBy('production_date', 'desc')
            ->take(5)
            ->get();

        // Low stock alerts (products with stock below 10)
        $lowStockProducts = Product::whereHas('inventoryStock', function($query) {
            $query->where('quantity', '<', 10);
        })->with('inventoryStock')->take(5)->get();

        // Pending production tasks (can be implemented later)
        $pendingTasks = [];

        return view('baker.dashboard.index', compact(
            'todaysProduction',
            'weeklyProduction', 
            'monthlyProduction',
            'recentBatches',
            'lowStockProducts',
            'pendingTasks',
            // For KPI card links
            'today',
            'weekStart',
            'weekEnd',
            'monthStart',
            'monthEnd'
        ));
    }

    public function completeProfile(Request $request)
    {
        $validated = $request->validate([
            'first_name' => 'required|string|max:255',
            'last_name' => 'required|string|max:255',
            'middle_name' => 'nullable|string|max:255',
            'phone' => 'nullable|string|max:20',
            'address' => 'nullable|string|max:500',
        ]);
        
        $user = Auth::user();
        if ($user->employee) {
            $user->employee->update([
                'first_name' => $validated['first_name'],
                'last_name' => $validated['last_name'],
                'middle_name' => $validated['middle_name'],
                'phone' => $validated['phone'],
                'address' => $validated['address'],
                'status' => 'active', // Mark as active when profile is complete
            ]);
        }
        
        return redirect()->route('baker.dashboard')->with('success', 'Profile completed successfully!');
    }
}

--- End of File ---

File: .\app\Http\Controllers\Baker\InventoryController.php
<?php

namespace App\Http\Controllers\Baker;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Product;
use App\Models\InventoryStock;

class InventoryController extends Controller
{
    public function index(Request $request)
    {
        $query = Product::with(['inventoryStock']);

        // Search functionality
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where('name', 'like', "%{$search}%")
                  ->orWhere('description', 'like', "%{$search}%");
        }

        // Category filter
        if ($request->filled('category')) {
            $query->where('category_id', $request->category);
        }

        // Stock level filter
        if ($request->filled('stock_level')) {
            switch ($request->stock_level) {
                case 'low':
                    $query->whereHas('inventoryStock', function($q) {
                        $q->whereRaw('quantity <= reorder_level');
                    });
                    break;
                case 'zero':
                    $query->whereHas('inventoryStock', function($q) {
                        $q->where('quantity', 0);
                    });
                    break;
                case 'normal':
                    $query->whereHas('inventoryStock', function($q) {
                        $q->whereRaw('quantity > reorder_level');
                    });
                    break;
            }
        }

        $products = $query->orderBy('name')->paginate(15);

        // Get categories for filter
        $categories = \App\Models\Category::orderBy('name')->get();

        // Get summary statistics
        $totalProducts = Product::count();
        $lowStockCount = Product::whereHas('inventoryStock', function($q) {
            $q->whereRaw('quantity <= reorder_level');
        })->count();
        $outOfStockCount = Product::whereHas('inventoryStock', function($q) {
            $q->where('quantity', 0);
        })->count();

        return view('baker.inventory.index', compact(
            'products', 
            'categories', 
            'totalProducts', 
            'lowStockCount', 
            'outOfStockCount'
        ));
    }

    public function show(Product $product)
    {
        $product->load(['inventoryStock', 'category']);
        
        // Get recent production history for this product
        $recentProductions = \App\Models\Production::with('baker')
            ->where('prod_id', $product->prod_id)
            ->orderBy('production_date', 'desc')
            ->take(10)
            ->get();

        return view('baker.inventory.show', compact('product', 'recentProductions'));
    }
}

--- End of File ---

File: .\app\Http\Controllers\Baker\ProductionController.php
<?php

namespace App\Http\Controllers\Baker;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use App\Models\Production;
use App\Models\Product;
use App\Models\InventoryStock;
use App\Models\InventoryMovement;
use App\Models\AuditLog;

class ProductionController extends Controller
{
    public function index(Request $request)
    {
        $query = Production::with(['product', 'baker'])
            ->where('baker_id', Auth::user()->emp_id);

        // Date filter: if date_from/date_to present, use them; if not, do not filter
        $dateFrom = $request->input('date_from');
        $dateTo = $request->input('date_to');
        // Always use only the date part for filtering
        if ($dateFrom) {
            $dateFrom = substr($dateFrom, 0, 10);
        }
        if ($dateTo) {
            $dateTo = substr($dateTo, 0, 10);
        }
        // Log the final trimmed values for verification
        \Log::info('[Baker Production List] FINAL FILTER', [
            'baker_id' => Auth::user()->emp_id,
            'date_from' => $dateFrom,
            'date_to' => $dateTo,
        ]);

        if ($dateFrom && $dateTo && $dateFrom === $dateTo) {
            $query->whereDate('production_date', $dateFrom);
        } else {
            if ($dateFrom) {
                $query->whereDate('production_date', '>=', $dateFrom);
            }
            if ($dateTo) {
                $query->whereDate('production_date', '<=', $dateTo);
            }
        }

        // Debug: Log the actual SQL query and bindings
        \Log::info('[Baker Production List] SQL', [
            'sql' => $query->toSql(),
            'bindings' => $query->getBindings(),
        ]);

        // Search functionality
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('batch_number', 'like', "%{$search}%")
                  ->orWhereHas('product', function($productQuery) use ($search) {
                      $productQuery->where('name', 'like', "%{$search}%");
                  });
            });
        }

        // Status filter
        if ($request->filled('status')) {
            $query->where('status', $request->status);
        }

        $productions = $query->orderBy('production_date', 'desc')->paginate(15);
        return view('baker.production.index', compact('productions'));
    }

    public function create()
    {
        $products = Product::orderBy('name')->get();
        return view('baker.production.create', compact('products'));
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'prod_id' => 'required|exists:products,prod_id',
            'quantity_produced' => 'required|integer|min:1',
            'production_date' => 'required|date',
            'expiration_date' => 'required|date|after:production_date',
            'status' => 'required|in:pending,in_progress,completed,cancelled',
            'notes' => 'nullable|string|max:1000',
        ]);

        try {
            DB::beginTransaction();

            // Generate batch number
            $batchNumber = 'BATCH-' . now()->format('Ymd') . '-' . str_pad(mt_rand(1, 9999), 4, '0', STR_PAD_LEFT);

            $production = Production::create([
                'prod_id' => $validated['prod_id'],
                'batch_number' => $batchNumber,
                'quantity_produced' => $validated['quantity_produced'],
                'production_date' => $validated['production_date'],
                'produced_at' => now(),
                'expiration_date' => $validated['expiration_date'],
                'baker_id' => Auth::user()->emp_id,
                'status' => $validated['status'],
                'notes' => $validated['notes'],
            ]);

            // Only update inventory if status is 'completed'
            if ($validated['status'] === 'completed') {
                // Update inventory stock and record movement
                $product = Product::lockForUpdate()->find($validated['prod_id']);
                $inventoryStock = InventoryStock::lockForUpdate()->where('prod_id', $validated['prod_id'])->first();
                
                $previousStock = $inventoryStock ? $inventoryStock->quantity : 0;
                $quantityAdded = $validated['quantity_produced'];
                $newStock = $previousStock + $quantityAdded;
                
                if ($inventoryStock) {
                    $inventoryStock->update([
                        'quantity' => $newStock,
                        'last_counted_at' => now()
                    ]);
                } else {
                    InventoryStock::create([
                        'prod_id' => $validated['prod_id'],
                        'quantity' => $newStock,
                        'reorder_level' => 10, // Default reorder level
                        'last_counted_at' => now(),
                    ]);
                }

                // Record the inventory movement
                InventoryMovement::create([
                    'prod_id' => $validated['prod_id'],
                    'transaction_type' => 'stock_in',
                    'quantity' => $quantityAdded,
                    'previous_stock' => $previousStock,
                    'current_stock' => $newStock,
                    'notes' => "Production batch {$batchNumber} completed by baker",
                ]);
            }

            DB::commit();

            $statusMessage = $validated['status'] === 'completed' 
                ? "Production batch {$batchNumber} created and completed! Added {$validated['quantity_produced']} units to inventory."
                : "Production batch {$batchNumber} created with status: " . ucfirst(str_replace('_', ' ', $validated['status']));

            return redirect()->route('baker.production.index')
                ->with('success', $statusMessage);

        } catch (\Exception $e) {
            DB::rollback();
            return back()->withErrors(['error' => 'Failed to create production batch: ' . $e->getMessage()])
                ->withInput();
        }
    }

    public function show(Production $production)
    {
        // Ensure baker can only view their own productions
        if ($production->baker_id !== Auth::user()->emp_id) {
            abort(403, 'Unauthorized access to production batch.');
        }

        $production->load(['product', 'baker']);
        return view('baker.production.show', compact('production'));
    }

    public function edit(Production $production)
    {
        // Ensure baker can only edit their own productions
        if ($production->baker_id !== Auth::user()->emp_id) {
            abort(403, 'Unauthorized access to production batch.');
        }

        $products = Product::orderBy('name')->get();
        return view('baker.production.edit', compact('production', 'products'));
    }

    public function update(Request $request, Production $production)
    {
        // Ensure baker can only update their own productions
        if ($production->baker_id !== Auth::user()->emp_id) {
            abort(403, 'Unauthorized access to production batch.');
        }

        $validated = $request->validate([
            'notes' => 'nullable|string|max:1000',
            'status' => 'required|in:pending,in_progress,completed,cancelled',
        ]);

        try {
            DB::beginTransaction();

            $oldStatus = $production->status;
            $newStatus = $validated['status'];
            
            $production->update($validated);

            // Handle status change inventory logic
            if ($oldStatus !== 'completed' && $newStatus === 'completed') {
                // Moving to completed - add to inventory
                $this->updateInventoryForCompletedProduction($production);
            } elseif ($oldStatus === 'completed' && $newStatus !== 'completed') {
                // Moving from completed - remove from inventory
                $this->reverseInventoryForDeletedProduction($production);
            }

            // Log the update
            AuditLog::logAction(
                'update',
                'production_batches',
                $production->batch_id,
                ['status' => $oldStatus],
                ['status' => $newStatus],
                "Production batch {$production->batch_number} status changed from {$oldStatus} to {$newStatus} by baker"
            );

            DB::commit();

            $message = $oldStatus !== $newStatus 
                ? "Production batch {$production->batch_number} status updated from " . ucfirst(str_replace('_', ' ', $oldStatus)) . " to " . ucfirst(str_replace('_', ' ', $newStatus)) . "!"
                : "Production batch {$production->batch_number} updated successfully!";

            return redirect()->route('baker.production.index')
                ->with('success', $message);

        } catch (\Exception $e) {
            DB::rollback();
            return back()->withErrors(['error' => 'Failed to update production batch: ' . $e->getMessage()])
                ->withInput();
        }
    }

    public function destroy(Production $production)
    {
        // Ensure baker can only delete their own productions
        if ($production->baker_id !== Auth::user()->emp_id) {
            abort(403, 'Unauthorized access to production batch.');
        }

        try {
            DB::beginTransaction();

            // Adjust inventory if needed (only if production was completed)
            if ($production->status === 'completed') {
                $inventoryStock = InventoryStock::lockForUpdate()->where('prod_id', $production->prod_id)->first();
                if ($inventoryStock) {
                    $previousStock = $inventoryStock->quantity;
                    $quantityRemoved = $production->quantity_produced;
                    $newStock = max(0, $previousStock - $quantityRemoved); // Prevent negative stock
                    
                    $inventoryStock->update([
                        'quantity' => $newStock,
                        'last_counted_at' => now()
                    ]);

                    // Record the inventory movement for deletion
                    InventoryMovement::create([
                        'prod_id' => $production->prod_id,
                        'transaction_type' => 'stock_out',
                        'quantity' => $quantityRemoved,
                        'previous_stock' => $previousStock,
                        'current_stock' => $newStock,
                        'notes' => "Production batch {$production->batch_number} deleted by baker",
                    ]);
                }
            }

            $batchNumber = $production->batch_number;
            $production->delete();

            DB::commit();

            return redirect()->route('baker.production.index')
                ->with('success', "Production batch {$batchNumber} deleted successfully!");

        } catch (\Exception $e) {
            DB::rollback();
            return back()->withErrors(['error' => 'Failed to delete production batch: ' . $e->getMessage()]);
        }
    }

    /**
     * Update inventory when production is completed
     */
    private function updateInventoryForCompletedProduction(Production $production)
    {
        $inventoryStock = InventoryStock::lockForUpdate()->where('prod_id', $production->prod_id)->first();
        
        if (!$inventoryStock) {
            $inventoryStock = InventoryStock::create([
                'prod_id' => $production->prod_id,
                'quantity' => 0,
                'reorder_level' => 10,
                'last_counted_at' => now()
            ]);
        }

        $previousStock = $inventoryStock->quantity;
        $quantityAdded = $production->quantity_produced;
        $newStock = $previousStock + $quantityAdded;

        $inventoryStock->update([
            'quantity' => $newStock,
            'last_counted_at' => now()
        ]);

        // Record the inventory movement
        InventoryMovement::create([
            'prod_id' => $production->prod_id,
            'transaction_type' => 'stock_in',
            'quantity' => $quantityAdded,
            'previous_stock' => $previousStock,
            'current_stock' => $newStock,
            'notes' => "Production batch {$production->batch_number} completed by baker",
        ]);
    }

    /**
     * Reverse inventory when production is cancelled/deleted
     */
    private function reverseInventoryForDeletedProduction(Production $production)
    {
        $inventoryStock = InventoryStock::lockForUpdate()->where('prod_id', $production->prod_id)->first();
        
        if ($inventoryStock) {
            $previousStock = $inventoryStock->quantity;
            $quantityRemoved = $production->quantity_produced;
            $newStock = max(0, $previousStock - $quantityRemoved);

            $inventoryStock->update([
                'quantity' => $newStock,
                'last_counted_at' => now()
            ]);

            // Record the movement
            InventoryMovement::create([
                'prod_id' => $production->prod_id,
                'transaction_type' => 'stock_out',
                'quantity' => $quantityRemoved,
                'previous_stock' => $previousStock,
                'current_stock' => $newStock,
                'notes' => "Production batch {$production->batch_number} status changed from completed by baker",
            ]);
        }
    }
}

--- End of File ---

File: .\app\Http\Controllers\Cashier\CashierDashboardController.php
<?php

namespace App\Http\Controllers\Cashier;

use App\Http\Controllers\Controller;
use App\Models\Sale;
use App\Models\Product;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class CashierDashboardController extends Controller
{
    public function index()
    {
        $cashier = Auth::user();
        $today = now()->toDateString();
        
        // Today's stats for this cashier
        $todaysSales = Sale::where('cashier_id', $cashier->employee->emp_id ?? null)
            ->whereDate('order_date', $today)
            ->where('status', 'completed')
            ->sum('total_amount');
            
        $todaysTransactions = Sale::where('cashier_id', $cashier->employee->emp_id ?? null)
            ->whereDate('order_date', $today)
            ->where('status', 'completed')
            ->count();
            
        $averageSale = $todaysTransactions > 0 ? $todaysSales / $todaysTransactions : 0;
        
        // Recent sales
        $recentSales = Sale::with('items.product')
            ->where('cashier_id', $cashier->employee->emp_id ?? null)
            ->orderByDesc('created_at')
            ->limit(5)
            ->get();
        
        return view('cashier.dashboard.index', compact(
            'todaysSales',
            'todaysTransactions',
            'averageSale',
            'recentSales'
        ));
    }
}


--- End of File ---

File: .\app\Http\Controllers\Cashier\POSController.php
<?php

namespace App\Http\Controllers\Cashier;

use App\Http\Controllers\Controller;
use App\Models\Product;
use App\Models\Sale;
use App\Models\SaleItem;
use App\Models\InventoryStock;
use App\Models\InventoryMovement;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class POSController extends Controller
{
    public function index()
    {
        $products = Product::active()
            ->with(['inventoryStock', 'category'])
            ->whereHas('inventoryStock', function($q) {
                $q->where('quantity', '>', 0);
            })
            ->orderBy('name')
            ->get();
            
        return view('cashier.pos.index', compact('products'));
    }
    
    public function checkout(Request $request)
    {
        $validated = $request->validate([
            'cart' => 'required|json',
            'order_type' => 'required|in:walk-in,takeout,dine_in,delivery',
            'customer_name' => 'nullable|string|max:255',
            'cash_given' => 'required|numeric|min:0',
            'change' => 'required|numeric|min:0',
        ]);
        
        $cart = json_decode($request->cart, true);
        
        if (empty($cart)) {
            return back()->withErrors(['cart' => 'Cart is empty'])->withInput();
        }
        
        $cashier = Auth::user();
        
        // Calculate subtotal from cart
        $subtotal = 0;
        foreach ($cart as $item) {
            $subtotal += ((float)$item['price']) * ((int)$item['quantity']);
        }

        // VAT calculation (match admin logic)
        $vatRate = config('vat.vat_rate', 12); // percent
        $vatAmount = round($subtotal * ($vatRate / 100), 2);
        $totalAmount = round($subtotal + $vatAmount, 2);

    DB::transaction(function() use ($request, $cashier, $subtotal, $vatAmount, $totalAmount, $cart, &$orderNumber) {
            // Generate unique order number
            $orderNumber = 'SO-' . date('Ymd') . '-' . str_pad(Sale::whereDate('created_at', today())->count() + 1, 4, '0', STR_PAD_LEFT);

            $sale = Sale::create([
                'order_number' => $orderNumber,
                'order_type' => $request->order_type,
                'cashier_id' => $cashier->employee->emp_id ?? null,
                'subtotal' => $subtotal,
                'vat_amount' => $vatAmount,
                'total_amount' => $totalAmount,
                'cash_given' => $request->cash_given,
                'change' => $request->change,
                'order_date' => now()->toDateString(),
                'status' => 'completed',
                'notes' => $request->customer_name ? 'Customer: ' . $request->customer_name : null,
            ]);
            
            foreach ($cart as $item) {
                $product = Product::lockForUpdate()->findOrFail($item['prod_id']);
                $qty = (int)$item['quantity'];
                $unit = (float)$item['price'];
                $totalPrice = bcmul((string)$unit, (string)$qty, 2);
                
                SaleItem::create([
                    'so_id' => $sale->so_id,
                    'prod_id' => $product->prod_id,
                    'quantity' => $qty,
                    'unit_price' => $unit,
                    'total_price' => $totalPrice,
                ]);
                
                // Update inventory snapshot
                $snapshot = InventoryStock::lockForUpdate()->where('prod_id', $product->prod_id)->first();
                $prev = $snapshot ? $snapshot->quantity : 0;
                $newQty = max(0, $prev - $qty);
                
                if ($snapshot) {
                    $snapshot->update(['quantity' => $newQty, 'last_counted_at' => now()]);
                } else {
                    InventoryStock::create([
                        'prod_id' => $product->prod_id,
                        'quantity' => $newQty,
                        'reorder_level' => 0,
                        'last_counted_at' => now(),
                    ]);
                }
                
                // Create inventory movement
                InventoryMovement::create([
                    'prod_id' => $product->prod_id,
                    'transaction_type' => 'stock_out',
                    'quantity' => $qty,
                    'previous_stock' => $prev,
                    'current_stock' => $newQty,
                    'notes' => 'POS Sale #' . $orderNumber,
                ]);
            }
            // Log to audit
            if (class_exists('App\\Models\\AuditLog')) {
                $desc = "Sale completed.\n" .
                    "Order Number: {$sale->order_number}\n" .
                    "Total Amount: ₱" . number_format($sale->total_amount, 2) . "\n" .
                    "Cash Given: ₱" . number_format($sale->cash_given, 2) . "\n" .
                    "Change Returned: ₱" . number_format($sale->change, 2);
                \App\Models\AuditLog::logAction(
                    'create',
                    'sales_orders',
                    $sale->so_id,
                    null,
                    [
                        'total_amount' => $sale->total_amount,
                        'cash_given' => $sale->cash_given,
                        'change' => $sale->change,
                        'order_number' => $sale->order_number,
                    ],
                    $desc
                );
            }
        });
        
        return redirect()->route('cashier.dashboard')->with('success', 'Sale completed successfully! Order #' . ($orderNumber ?? ''));
    }
}


--- End of File ---

File: .\app\Http\Controllers\Cashier\ReceiptController.php
<?php

namespace App\Http\Controllers\Cashier;

use App\Http\Controllers\Controller;
use App\Models\Sale;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Barryvdh\DomPDF\Facade\Pdf;

class ReceiptController extends Controller
{
    public function pdf($saleId)
    {
        $cashier = Auth::user();
        $sale = Sale::with('items.product', 'cashier')
            ->where('so_id', $saleId)
            ->where('cashier_id', $cashier->employee->emp_id ?? null)
            ->firstOrFail();

        $pdf = Pdf::loadView('cashier.sales.receipt_pdf', compact('sale'));
        $filename = 'receipt_' . $sale->order_number . '.pdf';
        return $pdf->download($filename);
    }
}


--- End of File ---

File: .\app\Http\Controllers\Cashier\SalesHistoryController.php
<?php

namespace App\Http\Controllers\Cashier;

use App\Http\Controllers\Controller;
use App\Models\Sale;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class SalesHistoryController extends Controller
{
    public function index(Request $request)
    {
        $cashier = Auth::user();
        $query = Sale::with('items.product')
            ->where('cashier_id', $cashier->employee->emp_id ?? null)
            ->where('status', 'completed');

        // Default to today if no date filter is set
        $dateFrom = $request->input('date_from');
        $dateTo = $request->input('date_to');
        if (!$dateFrom && !$dateTo) {
            $today = now()->toDateString();
            $query->whereDate('order_date', $today);
        } else {
            if ($dateFrom) {
                $query->whereDate('order_date', '>=', $dateFrom);
            }
            if ($dateTo) {
                $query->whereDate('order_date', '<=', $dateTo);
            }
        }
        if ($request->filled('search')) {
            $s = $request->search;
            $query->where(function($q) use ($s) {
                $q->where('order_number', 'like', "%$s%")
                  ->orWhere('notes', 'like', "%$s%");
            });
        }

        $sales = $query->orderByDesc('created_at')->paginate(15);
        return view('cashier.sales.index', compact('sales'));
    }
    
    public function show(Sale $sale)
    {
        // Ensure cashier can only view their own sales
        $cashier = Auth::user();
        if ($sale->cashier_id !== ($cashier->employee->emp_id ?? null)) {
            abort(403, 'Unauthorized');
        }
        
        $sale->load('items.product');
        return view('cashier.sales.show', compact('sale'));
    }
}


--- End of File ---

File: .\app\Http\Middleware\CheckRole.php
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class CheckRole
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string $role): Response
    {
        \Log::info("CheckRole middleware called with role: $role");
        
        if (!auth()->check()) {
            \Log::info('User not authenticated, redirecting to login');
            return redirect()->route('login');
        }

        $user = auth()->user();
        \Log::info("Authenticated user role: {$user->role}, required role: $role");
        
        if ($user->role !== $role) {
            \Log::info("Role mismatch, redirecting based on user role: {$user->role}");
            // Redirect to appropriate dashboard based on user's actual role
            switch ($user->role) {
                case 'admin':
                    return redirect('/dashboard/admin');
                case 'manager':
                    return redirect('/dashboard/manager');
                case 'baker':
                    return redirect('/dashboard/baker');
                case 'cashier':
                    return redirect('/dashboard/cashier');
                default:
                    return redirect()->route('login');
            }
        }

        \Log::info('Role matches, proceeding to route');
        return $next($request);
    }
}


--- End of File ---

File: .\app\Models\AuditLog.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class AuditLog extends Model
{
    protected $primaryKey = 'audit_id';
    
    protected $fillable = [
        'user_id',
        'action',
        'table_name',
        'record_id',
        'old_values',
        'new_values',
        'description',
    ];

    protected $casts = [
        'old_values' => 'array',
        'new_values' => 'array',
    ];

    /**
     * Relationship with User model
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class, 'user_id', 'user_id');
    }

    /**
     * Log an admin action
     */
    public static function logAction(string $action, ?string $tableName = null, ?int $recordId = null, ?array $oldValues = null, ?array $newValues = null, ?string $description = null): void
    {
        if (auth()->check()) {
            self::create([
                'user_id' => auth()->user()->user_id,
                'action' => $action,
                'table_name' => $tableName,
                'record_id' => $recordId,
                'old_values' => $oldValues,
                'new_values' => $newValues,
                'description' => $description,
            ]);
        }
    }
}


--- End of File ---

File: .\app\Models\Category.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Category extends Model
{
    protected $table = 'product_categories';
    protected $primaryKey = 'category_id';
    
    protected $fillable = [
        'name',
        'description',
        'status', // 'active' | 'inactive'
    ];

    /**
     * Relationship with Product model
     */
    public function products(): HasMany
    {
        return $this->hasMany(Product::class, 'category_id', 'category_id');
    }

    /**
     * Get active categories
     */
    public function scopeActive($query)
    {
        return $query->where('status', 'active');
    }

    /**
     * Boot method to log changes
     */
    protected static function boot()
    {
        parent::boot();

        static::created(function ($category) {
            AuditLog::logAction('create', 'product_categories', $category->category_id, null, $category->toArray(), "Created category: {$category->name}");
        });

        static::updated(function ($category) {
            AuditLog::logAction('update', 'product_categories', $category->category_id, $category->getOriginal(), $category->getChanges(), "Updated category: {$category->name}");
        });

        static::deleted(function ($category) {
            AuditLog::logAction('delete', 'product_categories', $category->category_id, $category->toArray(), null, "Deleted category: {$category->name}");
        });
    }
}


--- End of File ---

File: .\app\Models\Employee.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Employee extends Model
{
    use HasFactory;

    // Primary key
    protected $primaryKey = 'emp_id';

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'first_name',
        'last_name',
        'phone',
        'address',
        'hire_date',
        'position',
        'status',
        'shift_start',
        'shift_end',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'hire_date' => 'date',
        'salary' => 'decimal:2',
        'shift_start' => 'datetime:H:i',
        'shift_end' => 'datetime:H:i',
    ];

    /**
     * Relationship with User model
     */
    public function user()
    {
        return $this->hasOne(User::class, 'emp_id', 'emp_id');
    }

    /**
     * Get the employee's full name.
     */
    public function getFullNameAttribute(): string
    {
        return trim("{$this->first_name} {$this->last_name}");
    }

    /**
     * Check if employee is active.
     */
    public function isActive(): bool
    {
        return $this->status === 'active';
    }
}


--- End of File ---

File: .\app\Models\InventoryMovement.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class InventoryMovement extends Model
{
    protected $primaryKey = 'movement_id';

    protected $fillable = [
        'prod_id',
        'transaction_type',
        'quantity',
        'previous_stock',
        'current_stock',
        'notes',
    ];

    protected $casts = [
        'quantity' => 'integer',
        'previous_stock' => 'integer',
        'current_stock' => 'integer',
    ];

    public function product(): BelongsTo
    {
        return $this->belongsTo(Product::class, 'prod_id', 'prod_id');
    }
}


--- End of File ---

File: .\app\Models\InventoryStock.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class InventoryStock extends Model
{
    protected $primaryKey = 'inventory_id';
    
    protected $fillable = [
        'prod_id',
        'quantity',
        'reorder_level',
        'last_counted_at',
        'batch_id',
    ];

    protected $casts = [
        'quantity' => 'integer',
        'reorder_level' => 'integer',
        'last_counted_at' => 'datetime',
    ];

    /**
     * Relationship with Product model
     */
    public function product(): BelongsTo
    {
        return $this->belongsTo(Product::class, 'prod_id', 'prod_id');
    }

    /**
     * Relationship with ProductionBatch model
     */
    public function productionBatch(): BelongsTo
    {
        return $this->belongsTo(Production::class, 'batch_id', 'batch_id');
    }

    // Logging handled in controller to avoid double updates
}


--- End of File ---

File: .\app\Models\Product.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;

class Product extends Model
{
    protected $primaryKey = 'prod_id';
    
    protected $fillable = [
        'category_id',
        'name',
        'sku',
        'description',
        'price',
        'unit',
        'preparation_time',
        'is_available',
        'shelf_life',
        'status',
    ];

    protected $casts = [
        'price' => 'decimal:2',
    'preparation_time' => 'integer',
        'is_available' => 'boolean',
        'shelf_life' => 'integer',
    ];

    /**
     * Relationship with Category model
     */
    public function category(): BelongsTo
    {
        return $this->belongsTo(Category::class, 'category_id', 'category_id');
    }

    /**
     * Relationship with InventoryStock model
     */
    public function inventoryStocks(): HasMany
    {
        return $this->hasMany(InventoryStock::class, 'prod_id', 'prod_id');
    }

    /**
     * Singular relationship to get current inventory stock
     */
    public function inventoryStock(): HasOne
    {
        return $this->hasOne(InventoryStock::class, 'prod_id', 'prod_id');
    }

    /**
     * Relationship with ProductionBatch model
     */
    public function productionBatches(): HasMany
    {
        return $this->hasMany(Production::class, 'prod_id', 'prod_id');
    }

    /**
     * Relationship with OrderItem model
     */
    public function orderItems(): HasMany
    {
        return $this->hasMany(SaleItem::class, 'prod_id', 'prod_id');
    }

    /**
     * Get active products
     */
    public function scopeActive($query)
    {
        return $query->where('status', 'active');
    }

    /**
     * Get low stock products
     */
    public function scopeLowStock($query)
    {
        return $query->whereHas('inventoryStock', function ($query) {
            $query->whereColumn('quantity', '<=', 'reorder_level');
        });
    }

    /**
     * Check if product is low stock
     */
    public function isLowStock(): bool
    {
        $inventory = $this->inventoryStock;
        return $inventory ? $inventory->quantity <= $inventory->reorder_level : false;
    }

    /**
     * Boot method to log changes
     */
    protected static function boot()
    {
        parent::boot();

        static::created(function ($product) {
            AuditLog::logAction('create', 'products', $product->prod_id, null, $product->toArray(), "Created product: {$product->name}");
        });

        static::updated(function ($product) {
            AuditLog::logAction('update', 'products', $product->prod_id, $product->getOriginal(), $product->getChanges(), "Updated product: {$product->name}");
        });

        static::deleted(function ($product) {
            AuditLog::logAction('delete', 'products', $product->prod_id, $product->toArray(), null, "Deleted product: {$product->name}");
        });
    }
}


--- End of File ---

File: .\app\Models\Production.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Production extends Model
{
    // Status constants
    const STATUS_PENDING = 'pending';
    const STATUS_IN_PROGRESS = 'in_progress';
    const STATUS_COMPLETED = 'completed';
    const STATUS_CANCELLED = 'cancelled';

    protected $table = 'production_batches';
    protected $primaryKey = 'batch_id';

    protected $fillable = [
        'prod_id',
        'batch_number',
        'quantity_produced',
        'production_date',
        'produced_at',
        'expiration_date',
        'baker_id',
        'ingredients_used',
        'status',
        'notes',
        'pending_at',
        'in_progress_at',
        'completed_at',
    ];

    protected $casts = [
        'quantity_produced' => 'integer',
        'production_date' => 'date',
        'produced_at' => 'datetime',
        'expiration_date' => 'date',
        'ingredients_used' => 'array',
        'pending_at' => 'datetime',
        'in_progress_at' => 'datetime',
        'completed_at' => 'datetime',
    ];

    public function getRouteKeyName()
    {
        return 'batch_id';
    }

    public function product(): BelongsTo
    {
        return $this->belongsTo(Product::class, 'prod_id', 'prod_id');
    }

    public function baker(): BelongsTo
    {
        return $this->belongsTo(Employee::class, 'baker_id', 'emp_id');
    }

    protected static function boot()
    {
        parent::boot();

        static::creating(function ($model) {
            // Set pending_at timestamp if status is pending
            if ($model->status === self::STATUS_PENDING && empty($model->pending_at)) {
                $model->pending_at = now();
            }
        });

        static::updating(function ($model) {
            // If status changed, update the corresponding timestamp
            if ($model->isDirty('status')) {
                $now = now();
                switch ($model->status) {
                    case self::STATUS_PENDING:
                        $model->pending_at = $now;
                        break;
                    case self::STATUS_IN_PROGRESS:
                        $model->in_progress_at = $now;
                        break;
                    case self::STATUS_COMPLETED:
                        $model->completed_at = $now;
                        break;
                }
            }
        });

        static::created(function ($model) {
            if (class_exists(AuditLog::class)) {
                AuditLog::logAction('create', 'production_batches', $model->batch_id, null, $model->toArray(), "Created production batch {$model->batch_number}");
            }
        });
        static::updated(function ($model) {
            if (class_exists(AuditLog::class)) {
                AuditLog::logAction('update', 'production_batches', $model->batch_id, $model->getOriginal(), $model->getChanges(), "Updated production batch {$model->batch_number}");
            }
        });
        static::deleted(function ($model) {
            if (class_exists(AuditLog::class)) {
                AuditLog::logAction('delete', 'production_batches', $model->batch_id, $model->toArray(), null, "Deleted production batch {$model->batch_number}");
            }
        });
    }

    /**
     * Helper: Get the next status based on interval logic.
     * Example: after 30 min pending -> in_progress, after 1 hour in_progress -> completed
     */
    public function getNextStatusByInterval(): ?string
    {
        $now = now();
        // For testing: change status after 1 minute
        if ($this->status === self::STATUS_PENDING && $this->pending_at && $now->diffInMinutes($this->pending_at) >= 1) {
            return self::STATUS_IN_PROGRESS;
        }
        if ($this->status === self::STATUS_IN_PROGRESS && $this->in_progress_at && $now->diffInMinutes($this->in_progress_at) >= 1) {
            return self::STATUS_COMPLETED;
        }
        return null;
    }
}

--- End of File ---

File: .\app\Models\Sale.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Sale extends Model
{
    protected $table = 'sales_orders';
    protected $primaryKey = 'so_id';
    

    protected $fillable = [
        'order_number',
        'order_type',
        'subtotal',
        'vat_amount',
        'total_amount',
        'cash_given',
        'change',
        'order_date',
        'status',
        'cashier_id',
        'notes',
    ];

    protected $casts = [
        'total_amount' => 'decimal:2',
        'cash_given' => 'decimal:2',
        'change' => 'decimal:2',
        'order_date' => 'date',
    ];

    public function items(): HasMany
    {
        return $this->hasMany(SaleItem::class, 'so_id', 'so_id');
    }

    public function cashier(): BelongsTo
    {
        return $this->belongsTo(Employee::class, 'cashier_id', 'emp_id');
    }

    // Removed automatic audit logging to avoid duplicate records. Controllers now handle logging with formal descriptions.
}


--- End of File ---

File: .\app\Models\SaleItem.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class SaleItem extends Model
{
    protected $table = 'order_items';
    protected $primaryKey = 'order_item_id';
    public const CREATED_AT = 'created_at';
    public const UPDATED_AT = null;

    protected $fillable = [
        'so_id',
        'prod_id',
        'quantity',
        'unit_price',
        'total_price',
        'special_instructions',
    ];

    protected $casts = [
        'quantity' => 'integer',
        'unit_price' => 'decimal:2',
        'total_price' => 'decimal:2',
    ];

    public function sale(): BelongsTo
    {
        return $this->belongsTo(Sale::class, 'so_id', 'so_id');
    }

    public function product(): BelongsTo
    {
        return $this->belongsTo(Product::class, 'prod_id', 'prod_id');
    }

    protected static function boot()
    {
        parent::boot();
        static::created(function ($model) {
            if (class_exists(AuditLog::class)) {
                AuditLog::logAction('create', 'order_items', $model->order_item_id, null, $model->toArray(), "Added item to sales order {$model->so_id}");
            }
        });
        static::updated(function ($model) {
            if (class_exists(AuditLog::class)) {
                AuditLog::logAction('update', 'order_items', $model->order_item_id, $model->getOriginal(), $model->getChanges(), "Updated order item {$model->order_item_id}");
            }
        });
        static::deleted(function ($model) {
            if (class_exists(AuditLog::class)) {
                AuditLog::logAction('delete', 'order_items', $model->order_item_id, $model->toArray(), null, "Deleted order item {$model->order_item_id}");
            }
        });
    }
}


--- End of File ---

File: .\app\Models\Setting.php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Setting extends Model
{
    protected $primaryKey = 'key';
    public $incrementing = false;
    protected $keyType = 'string';

    protected $fillable = ['key','value'];

    public $timestamps = false;
}


--- End of File ---

File: .\app\Models\User.php
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable;

    // Primary key
    protected $primaryKey = 'user_id';

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'emp_id',
        'username',
        'email',
        'password',
        'role',
        'status',
        'last_login',
    ];

    /**
     * Relationship with Employee model
     */
    public function employee()
    {
        return $this->belongsTo(Employee::class, 'emp_id', 'emp_id');
    }

    /**
     * Check if user is Admin.
     */
    public function isAdmin(): bool
    {
        return $this->role === 'admin';
    }

    /**
     * Check if user is Baker.
     */
    public function isBaker(): bool
    {
        return $this->role === 'baker';
    }

    /**
     * Check if user is Cashier.
     */
    public function isCashier(): bool
    {
        return $this->role === 'cashier';
    }

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'password' => 'hashed',
            'last_login' => 'datetime',
        ];
    }

    /**
     * Get the name of the unique identifier for the user.
     *
     * @return string
     */
    public function getAuthIdentifierName()
    {
        return 'username';
    }

    /**
     * Get the full name via employee relationship.
     */
    public function getFullNameAttribute(): string
    {
        return $this->employee ? $this->employee->full_name : $this->username;
    }
}


--- End of File ---

File: .\app\Providers\AppServiceProvider.php
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        //
    }
}


--- End of File ---

File: .\config\app.php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application, which will be used when the
    | framework needs to place the application's name in a notification or
    | other UI elements where an application name needs to be displayed.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | the application so that it's available within Artisan commands.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. The timezone
    | is set to "UTC" by default as it is suitable for most use cases.
    |
    */

    
    'timezone' => 'Asia/Manila', // or your local timezone,

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by Laravel's translation / localization methods. This option can be
    | set to any locale for which you plan to have translation strings.
    |
    */

    'locale' => env('APP_LOCALE', 'en'),

    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),

    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is utilized by Laravel's encryption services and should be set
    | to a random, 32 character string to ensure that all encrypted values
    | are secure. You should do this prior to deploying the application.
    |
    */

    'cipher' => 'AES-256-CBC',

    'key' => env('APP_KEY'),

    'previous_keys' => [
        ...array_filter(
            explode(',', (string) env('APP_PREVIOUS_KEYS', ''))
        ),
    ],

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
        'store' => env('APP_MAINTENANCE_STORE', 'database'),
    ],

];


--- End of File ---

File: .\config\auth.php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option defines the default authentication "guard" and password
    | reset "broker" for your application. You may change these values
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | which utilizes session storage plus the Eloquent user provider.
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | If you have multiple user tables or models you may configure multiple
    | providers to represent the model / table. These providers may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | These configuration options specify the behavior of Laravel's password
    | reset functionality, including the table utilized for token storage
    | and the user provider that is invoked to actually retrieve users.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the number of seconds before a password confirmation
    | window expires and users are asked to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];


--- End of File ---

File: .\config\cache.php
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache store that will be used by the
    | framework. This connection is utilized if another isn't explicitly
    | specified when running a cache operation inside the application.
    |
    */

    'default' => env('CACHE_STORE', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "array", "database", "file", "memcached",
    |                    "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_CACHE_CONNECTION'),
            'table' => env('DB_CACHE_TABLE', 'cache'),
            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
            'lock_table' => env('DB_CACHE_LOCK_TABLE'),
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
    | stores, there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug((string) env('APP_NAME', 'laravel')).'-cache-'),

];


--- End of File ---

File: .\config\database.php
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for database operations. This is
    | the connection which will be utilized unless another connection
    | is explicitly specified when you execute a query / statement.
    |
    */

    'default' => env('DB_CONNECTION', 'sqlite'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Below are all of the database connections defined for your application.
    | An example configuration is provided for each database system which
    | is supported by Laravel. You're free to add / remove connections.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DB_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
            'busy_timeout' => null,
            'journal_mode' => null,
            'synchronous' => null,
            'transaction_mode' => 'DEFERRED',
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'mariadb' => [
            'driver' => 'mariadb',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run on the database.
    |
    */

    'migrations' => [
        'table' => 'migrations',
        'update_date_on_publish' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as Memcached. You may define your connection settings here.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug((string) env('APP_NAME', 'laravel')).'-database-'),
            'persistent' => env('REDIS_PERSISTENT', false),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
            'max_retries' => env('REDIS_MAX_RETRIES', 3),
            'backoff_algorithm' => env('REDIS_BACKOFF_ALGORITHM', 'decorrelated_jitter'),
            'backoff_base' => env('REDIS_BACKOFF_BASE', 100),
            'backoff_cap' => env('REDIS_BACKOFF_CAP', 1000),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
            'max_retries' => env('REDIS_MAX_RETRIES', 3),
            'backoff_algorithm' => env('REDIS_BACKOFF_ALGORITHM', 'decorrelated_jitter'),
            'backoff_base' => env('REDIS_BACKOFF_BASE', 100),
            'backoff_cap' => env('REDIS_BACKOFF_CAP', 1000),
        ],

    ],

];


--- End of File ---

File: .\config\filesystems.php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application for file storage.
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Below you may configure as many filesystem disks as necessary, and you
    | may even configure multiple disks for the same driver. Examples for
    | most supported storage drivers are configured here for reference.
    |
    | Supported drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app/private'),
            'serve' => true,
            'throw' => false,
            'report' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
            'report' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
            'report' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];


--- End of File ---

File: .\config\logging.php
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that is utilized to write
    | messages to your logs. The value provided here should match one of
    | the channels present in the list of "channels" configured below.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Laravel
    | utilizes the Monolog PHP logging library, which includes a variety
    | of powerful log handlers and formatters that you're free to use.
    |
    | Available drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog", "custom", "stack"
    |
    */

    'channels' => [

        'stack' => [
            'driver' => 'stack',
            'channels' => explode(',', (string) env('LOG_STACK', 'single')),
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => env('LOG_DAILY_DAYS', 14),
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'handler_with' => [
                'stream' => 'php://stderr',
            ],
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],

    ],

];


--- End of File ---

File: .\config\mail.php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send all email
    | messages unless another mailer is explicitly specified when sending
    | the message. All additional mailers can be configured within the
    | "mailers" array. Examples of each type of mailer are provided.
    |
    */

    'default' => env('MAIL_MAILER', 'log'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers that can be used
    | when delivering an email. You may specify which one you're using for
    | your mailers below. You may also add additional mailers if needed.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "resend", "log", "array",
    |            "failover", "roundrobin"
    |
    */

    'mailers' => [

        'smtp' => [
            'transport' => 'smtp',
            'scheme' => env('MAIL_SCHEME'),
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 2525),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url((string) env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'resend' => [
            'transport' => 'resend',
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
            'retry_after' => 60,
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
            'retry_after' => 60,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all emails sent by your application to be sent from
    | the same address. Here you may specify a name and address that is
    | used globally for all emails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

];


--- End of File ---

File: .\config\queue.php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue supports a variety of backends via a single, unified
    | API, giving you convenient access to each backend using identical
    | syntax for each. The default queue connection is defined below.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection options for every queue backend
    | used by your application. An example configuration is provided for
    | each backend supported by Laravel. You're also free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_QUEUE_CONNECTION'),
            'table' => env('DB_QUEUE_TABLE', 'jobs'),
            'queue' => env('DB_QUEUE', 'default'),
            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),
            'queue' => env('BEANSTALKD_QUEUE', 'default'),
            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control how and where failed jobs are stored. Laravel ships with
    | support for storing failed jobs in a simple file or in a database.
    |
    | Supported drivers: "database-uuids", "dynamodb", "file", "null"
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'failed_jobs',
    ],

];


--- End of File ---

File: .\config\services.php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'resend' => [
        'key' => env('RESEND_KEY'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

    'slack' => [
        'notifications' => [
            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),
            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),
        ],
    ],

];


--- End of File ---

File: .\config\session.php
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option determines the default session driver that is utilized for
    | incoming requests. Laravel supports a variety of storage options to
    | persist session data. Database storage is a great default choice.
    |
    | Supported: "file", "cookie", "database", "memcached",
    |            "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to expire immediately when the browser is closed then you may
    | indicate that via the expire_on_close configuration option.
    |
    */

    'lifetime' => (int) env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it's stored. All encryption is performed
    | automatically by Laravel and you may use the session like normal.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When utilizing the "file" session driver, the session files are placed
    | on disk. The default storage location is defined here; however, you
    | are free to provide another location where they should be stored.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table to
    | be used to store sessions. Of course, a sensible default is defined
    | for you; however, you're welcome to change this to another table.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | When using one of the framework's cache driven session backends, you may
    | define the cache store which should be used to store the session data
    | between requests. This must match one of your defined cache stores.
    |
    | Affects: "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the session cookie that is created by
    | the framework. Typically, you should not need to change this value
    | since doing so does not grant a meaningful security improvement.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel')).'-session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application, but you're free to change this when necessary.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | This value determines the domain and subdomains the session cookie is
    | available to. By default, the cookie will be available to the root
    | domain and all subdomains. Typically, this shouldn't be changed.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. It's unlikely you should disable this option.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" to permit secure cross-site requests.
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];


--- End of File ---

File: .\config\vat.php
<?php
return [
    // Value Added Tax rate in percent (e.g., 12 for 12%)
    'vat_rate' => 12,
];


--- End of File ---

File: .\database\factories\UserFactory.php
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}


--- End of File ---

File: .\database\migrations\0001_01_01_000001_create_cache_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};


--- End of File ---

File: .\database\migrations\0001_01_01_000002_create_jobs_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};


--- End of File ---

File: .\database\migrations\2025_10_02_012121_create_employees_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('employees', function (Blueprint $table) {
            $table->id('emp_id'); // Primary key: emp_id
            $table->string('first_name');
            $table->string('middle_name')->nullable();
            $table->string('last_name');
            $table->string('phone')->nullable();
            $table->text('address')->nullable();
            $table->date('hire_date')->nullable();
            $table->enum('position', ['admin', 'baker', 'cashier']);
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->time('shift_start')->nullable();
            $table->time('shift_end')->nullable();
            
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('employees');
    }
};


--- End of File ---

File: .\database\migrations\2025_10_02_012127_create_users_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id('user_id'); // Primary key: user_id
            $table->foreignId('emp_id')->constrained('employees', 'emp_id')->onDelete('cascade');
            $table->string('username')->unique();
            $table->string('email')->unique();
            $table->string('password');
            $table->enum('role', ['admin', 'baker', 'cashier']);
            $table->timestamp('last_login')->nullable();
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->rememberToken();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};


--- End of File ---

File: .\database\migrations\2025_10_02_012132_create_audit_logs_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('audit_logs', function (Blueprint $table) {
            $table->id('audit_id'); // Primary key: audit_id
            $table->string('action'); // create, update, delete
            $table->string('table_name');
            $table->unsignedBigInteger('record_id');
            $table->json('old_values')->nullable();
            $table->json('new_values')->nullable();
            $table->text('description')->nullable();
            $table->foreignId('user_id')->nullable()->constrained('users', 'user_id')->onDelete('set null');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('audit_logs');
    }
};


--- End of File ---

File: .\database\migrations\2025_10_02_012143_create_product_categories_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('product_categories', function (Blueprint $table) {
            $table->id('category_id'); // Primary key: category_id
            $table->string('name');
            $table->text('description')->nullable();
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('product_categories');
    }
};


--- End of File ---

File: .\database\migrations\2025_10_02_012149_create_products_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('products', function (Blueprint $table) {
            $table->id('prod_id'); // Primary key: prod_id
            $table->string('name');
            $table->string('sku')->unique();
            $table->text('description')->nullable();
            $table->foreignId('category_id')->constrained('product_categories', 'category_id')->onDelete('restrict');
            $table->decimal('price', 10, 2);
            $table->string('unit'); // pieces, kg, liter, etc.
            $table->integer('preparation_time')->nullable(); // in minutes
            $table->boolean('is_available')->default(true);
            $table->integer('shelf_life')->nullable(); // in days
            $table->enum('status', ['active', 'inactive'])->default('active');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('products');
    }
};


--- End of File ---

File: .\database\migrations\2025_10_02_012154_create_production_batches_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('production_batches', function (Blueprint $table) {
            $table->id('batch_id'); // Primary key: batch_id
            $table->foreignId('prod_id')->constrained('products', 'prod_id')->onDelete('restrict');
            $table->string('batch_number')->unique();
            $table->integer('quantity_produced');
            $table->date('production_date');
            $table->timestamp('produced_at')->nullable();
            $table->date('expiration_date')->nullable();
            $table->foreignId('baker_id')->constrained('employees', 'emp_id')->onDelete('restrict'); // Baker who produced
            $table->enum('status', ['in_progress', 'completed', 'cancelled'])->default('in_progress');
            $table->text('notes')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('production_batches');
    }
};


--- End of File ---

File: .\database\migrations\2025_10_02_012200_create_inventory_stocks_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('inventory_stocks', function (Blueprint $table) {
            $table->id('inventory_id'); // Primary key: inventory_id
            $table->foreignId('prod_id')->constrained('products', 'prod_id')->onDelete('restrict');
            $table->integer('quantity');
            $table->integer('reorder_level')->default(0);
            $table->timestamp('last_counted_at')->nullable();
            $table->foreignId('batch_id')->nullable()->constrained('production_batches', 'batch_id')->onDelete('set null');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('inventory_stocks');
    }
};


--- End of File ---

File: .\database\migrations\2025_10_02_012207_create_sales_orders_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('sales_orders', function (Blueprint $table) {
            $table->id('so_id'); // Primary key: so_id
            $table->string('order_number')->unique();
            $table->enum('order_type', ['dine_in', 'takeout', 'delivery'])->default('takeout');
            $table->decimal('subtotal', 12, 2);
            $table->decimal('vat_amount', 12, 2)->default(0);
            $table->decimal('total_amount', 12, 2);
            $table->date('order_date');
            $table->enum('status', ['pending', 'processing', 'completed', 'cancelled'])->default('pending');
            $table->foreignId('cashier_id')->constrained('employees', 'emp_id')->onDelete('restrict'); // Who processed the sale
            $table->text('notes')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('sales_orders');
    }
};


--- End of File ---

File: .\database\migrations\2025_10_02_012211_create_order_items_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('order_items', function (Blueprint $table) {
            $table->id('order_item_id'); // Primary key: order_item_id
            $table->foreignId('so_id')->constrained('sales_orders', 'so_id')->onDelete('cascade');
            $table->foreignId('prod_id')->constrained('products', 'prod_id')->onDelete('restrict');
            $table->integer('quantity');
            $table->decimal('unit_price', 10, 2);
            $table->decimal('total_price', 12, 2);
            $table->text('special_instructions')->nullable();
            $table->timestamp('created_at')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('order_items');
    }
};


--- End of File ---

File: .\database\migrations\2025_10_02_012235_create_inventory_movements_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('inventory_movements', function (Blueprint $table) {
            $table->id('movement_id');
            $table->foreignId('prod_id')->constrained('products', 'prod_id')->onDelete('restrict');
            $table->enum('transaction_type', ['stock_in', 'stock_out', 'adjustment']);
            $table->integer('quantity'); // the amount moved (positive integer)
            $table->integer('previous_stock');
            $table->integer('current_stock');
            $table->text('notes')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('inventory_movements');
    }
};


--- End of File ---

File: .\database\migrations\2025_10_02_093400_update_status_enum_on_production_batches.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    public function up(): void
    {
        // Add 'pending' to enum and set default to 'pending'
        DB::statement("ALTER TABLE production_batches MODIFY status ENUM('pending','in_progress','completed','cancelled') NOT NULL DEFAULT 'pending'");
    }

    public function down(): void
    {
        // Revert to previous enum without 'pending' and default to 'in_progress'
        DB::statement("ALTER TABLE production_batches MODIFY status ENUM('in_progress','completed','cancelled') NOT NULL DEFAULT 'in_progress'");
    }
};


--- End of File ---

File: .\database\migrations\2025_10_02_170000_drop_cost_from_products_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        if (Schema::hasColumn('products', 'cost')) {
            Schema::table('products', function (Blueprint $table) {
                $table->dropColumn('cost');
            });
        }
    }

    public function down(): void
    {
        Schema::table('products', function (Blueprint $table) {
            $table->decimal('cost', 10, 2)->nullable();
        });
    }
};


--- End of File ---

File: .\database\migrations\2025_10_03_000001_create_settings_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::create('settings', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->text('value')->nullable();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('settings');
    }
};


--- End of File ---

File: .\database\migrations\2025_10_15_000001_add_cash_given_and_change_to_sales_orders.php
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::table('sales_orders', function (Blueprint $table) {
            $table->decimal('cash_given', 12, 2)->nullable()->after('total_amount');
            $table->decimal('change', 12, 2)->nullable()->after('cash_given');
        });
    }
    public function down(): void
    {
        Schema::table('sales_orders', function (Blueprint $table) {
            $table->dropColumn(['cash_given', 'change']);
        });
    }
};


--- End of File ---

File: .\database\migrations\2025_10_15_000001_add_status_timestamps_to_production_batches.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('production_batches', function (Blueprint $table) {
            $table->timestamp('pending_at')->nullable()->after('status');
            $table->timestamp('in_progress_at')->nullable()->after('pending_at');
            $table->timestamp('completed_at')->nullable()->after('in_progress_at');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('production_batches', function (Blueprint $table) {
            $table->dropColumn(['pending_at', 'in_progress_at', 'completed_at']);
        });
    }
};


--- End of File ---

File: .\database\migrations\2025_10_15_000002_add_pending_status_to_users.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        \DB::statement("ALTER TABLE users MODIFY status ENUM('active','inactive','pending') NOT NULL DEFAULT 'pending'");
    }

    public function down(): void
    {
        \DB::statement("ALTER TABLE users MODIFY status ENUM('active','inactive') NOT NULL DEFAULT 'active'");
    }
};


--- End of File ---

File: .\database\migrations\2025_10_15_120000_add_vat_amount_to_sales_orders_table.php
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void {
        Schema::table('sales_orders', function (Blueprint $table) {
            $table->decimal('vat_amount', 12, 2)->default(0)->after('subtotal');
        });
    }
    public function down(): void {
        Schema::table('sales_orders', function (Blueprint $table) {
            $table->dropColumn('vat_amount');
        });
    }
};


--- End of File ---

File: .\public\css\admin-styles.css
/* Sea++ Bakery - Admin Layout Styles */
/* Color Scheme: 50% EEF5DB, 30% FFEAA5, 10% FE5F55 */

/* Admin Layout - Left Sidebar Structure */
.admin-wrapper {
    display: flex;
    min-height: 100vh;
    background-color: #EEF5DB;
}

/* Sidebar Styles */
.admin-sidebar {
    width: 280px;
    background: linear-gradient(135deg, #b22424 0%, #FFEAA5 100%);
    box-shadow: 2px 0 10px rgba(0,0,0,0.1);
    position: fixed;
    height: 100vh;
    left: 0;
    top: 0;
    z-index: 1000;
    overflow-y: auto;
    overscroll-behavior: contain;
    scroll-behavior: auto; /* avoid smooth scroll jump during restore */
    scroll-snap-type: none; /* ensure no snap forces reposition */
    transition: all 0.3s ease;
}

.sidebar-header {
    padding: 1rem;
    background: rgba(178, 36, 36, 0.1);
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
}

.sidebar-brand-container {
    display: flex;
    align-items: center;
    justify-content: center;
}

.sidebar-brand {
    display: flex;
    align-items: center;
    color: #333;
    text-decoration: none;
    font-weight: bold;
    font-size: 1.1rem;
    cursor: pointer;
    flex: 1;
    transition: all 0.2s ease;
}

.sidebar-brand:hover {
    transform: translateX(2px);
}

.sidebar-brand img {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    margin-right: 12px;
    border: 2px solid #fff;
    transition: all 0.2s ease;
}

/* Anti-flicker: disable transitions while initializing UI state */
.no-anim .admin-sidebar,
.no-anim .admin-sidebar *,
.no-anim .admin-main,
.no-anim .admin-main * {
    transition: none !important;
}

.sidebar-brand img:hover {
    border-color: #b22424;
    box-shadow: 0 2px 8px rgba(178, 36, 36, 0.3);
}

.sidebar-nav {
    padding: 1rem 0;
}

.nav-section {
    margin-bottom: 1.5rem;
}

.nav-section-title {
    padding: 0.5rem 1.5rem;
    font-size: 0.75rem;
    font-weight: bold;
    text-transform: uppercase;
    color: #b22424;
    letter-spacing: 1px;
}

.nav-item {
    margin: 0.2rem 0.5rem;
}

.nav-link {
    display: flex;
    align-items: center;
    padding: 0.75rem 1rem;
    color: #333;
    text-decoration: none;
    border-radius: 8px;
    transition: all 0.2s ease;
    font-weight: 500;
}

.nav-link:hover {
    background: rgba(255, 255, 255, 0.2);
    color: #333;
    transform: translateX(3px);
}

.nav-link.active {
    background: rgba(255, 255, 255, 0.3);
    color: #b22424;
    font-weight: 600;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.nav-icon {
    width: 20px;
    margin-right: 12px;
    text-align: center;
    padding: 1rem;
}

/* Main Content Area */
.admin-main {
    flex: 1;
    margin-left: 280px;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

/* Top Header */
.admin-header {
    background: #FFEAA5;
    padding: 1rem 2rem;
    border-bottom: 1px solid #e3e6f0;
    box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
    display: flex;
    justify-content: space-between;
    align-items: center;
    min-height: 70px;
}

.header-left {
    display: flex;
    align-items: center;
}

.page-title {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
    color: #333;
    flex: 1;
    text-align: center;
}

.header-right {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.user-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.user-name {
    font-weight: 500;
    color: #5a5c69;
}

.role-badge {
    background: #333;
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 600;
}

.logout-btn {
    background: #b22424;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;
    transition: background 0.2s ease;
}

.logout-btn:hover {
    background: #c82333;
}

/* Content Area */
.admin-content {
    flex: 1;
    padding: 2rem;
    background: #EEF5DB;
}

/* Mobile Toggle Button */
.mobile-toggle {
    display: none;
    background: rgba(254, 95, 85, 0.05);
    border: 2px solid rgba(254, 95, 85, 0.2);
    font-size: 1.1rem;
    color: #b22424;
    cursor: pointer;
    padding: 0.6rem 0.8rem;
    border-radius: 8px;
    transition: all 0.2s ease;
    min-width: 40px;
    height: 40px;
    align-items: center;
    justify-content: center;
}

.mobile-toggle:hover {
    background: rgba(254, 95, 85, 0.15);
    border-color: #b22424;
}

/* Custom scrollbar for sidebar */
.admin-sidebar::-webkit-scrollbar {
    width: 6px;
}

.admin-sidebar::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
}

.admin-sidebar::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 3px;
}

.admin-sidebar::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.5);
}



/* Collapsed Sidebar Styles */
.admin-sidebar.collapsed {
    width: 70px;
}

.admin-sidebar.collapsed .sidebar-header {
    text-align: center;
    padding: 1rem 0.5rem;
}

.admin-sidebar.collapsed .sidebar-brand-container {
    align-items: center;
    justify-content: center;
}

.admin-sidebar.collapsed .sidebar-brand {
    justify-content: center;
}

.admin-sidebar.collapsed .brand-text {
    display: none;
}

.admin-sidebar.collapsed .sidebar-brand img {
    margin-right: 0;
    margin: 0;
    cursor: pointer;
}

.admin-sidebar.collapsed .nav-section-title {
    display: none;
}

.admin-sidebar.collapsed .nav-link {
    justify-content: center;
    padding: 0.75rem;
    position: relative;
}

.admin-sidebar.collapsed .nav-link span {
    display: none;
}

.admin-sidebar.collapsed .nav-icon {
    margin-right: 0;
    padding: 0;
}

.admin-sidebar.collapsed .nav-link:hover::after {
    content: attr(data-title);
    position: absolute;
    left: 100%;
    top: 50%;
    transform: translateY(-50%);
    background: #333;
    color: white;
    padding: 0.5rem 0.75rem;
    border-radius: 4px;
    white-space: nowrap;
    z-index: 1000;
    margin-left: 10px;
    font-size: 0.875rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

.admin-sidebar.collapsed .nav-link:hover::before {
    content: '';
    position: absolute;
    left: 100%;
    top: 50%;
    transform: translateY(-50%);
    border: 5px solid transparent;
    border-right-color: #333;
    z-index: 1000;
    margin-left: 5px;
}

.admin-main.sidebar-collapsed {
    margin-left: 70px;
}

/* Responsive Design */
@media (max-width: 768px) {
    .admin-sidebar {
        transform: translateX(-100%);
        width: 280px; /* Reset width on mobile */
    }
    
    .admin-sidebar.show {
        transform: translateX(0);
    }
    
    .admin-sidebar.collapsed {
        width: 280px; /* Ignore collapse on mobile */
    }
    
    .admin-main {
        margin-left: 0;
    }
    
    .admin-main.sidebar-collapsed {
        margin-left: 0; /* Reset margin on mobile */
    }
    
    .sidebar-toggle-inside {
        display: flex; /* Show hamburger in sidebar on mobile */
    }
    
    .mobile-toggle {
        display: flex;
    }
    
    .page-title {
        font-size: 1.2rem; /* Smaller title on mobile */
    }
}



.admin-content {
    background-color: #EEF5DB;
    min-height: calc(100vh - 200px);
}

.admin-card {
    background: linear-gradient(135deg, #ffffff 0%, #fafafa 100%);
    border-left: 5px solid #b22424;
    border-top: 3px solid #FFEAA5;
    box-shadow: 0 6px 25px rgba(178, 36, 36, 0.12);
    position: relative;
}

.admin-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 35px rgba(178, 36, 36, 0.2);
}

.admin-card::before {
    content: "⚙️";
    position: absolute;
    top: 1rem;
    right: 1rem;
    font-size: 1.5rem;
    opacity: 0.3;
}

.admin-card h3 {
    color: #b22424;
    border-bottom: 2px solid #FFEAA5;
    padding-bottom: 0.5rem;
    margin-bottom: 1rem;
}

/* Sea-style Modals */
.sea-modal {
    position: fixed;
    inset: 0;
    background: rgba(0,0,0,0.35);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 2000;
}
.sea-modal.show { display: flex; }
.sea-modal-dialog {
    background: #fff;
    width: min(600px, 92vw);
    border-radius: 10px;
    box-shadow: 0 20px 60px rgba(0,0,0,0.25);
    border-left: 5px solid #b22424;
}
.sea-modal-header {
    background: #FFEAA5;
    padding: 0.75rem 1rem;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
}
.sea-modal-body {
    padding: 1rem;
    background: #EEF5DB;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
}

.admin-highlight {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-weight: bold;
}

.admin-system-status {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.admin-status-item {
    background: white;
    padding: 1.5rem;
    border-radius: 10px;
    border: 2px solid #FFEAA5;
    transition: all 0.3s ease;
    text-align: center;
}

.admin-status-item:hover {
    border-color: #b22424;
    transform: translateY(-2px);
}

.admin-status-item.online {
    border-left: 5px solid #27ae60;
}

.admin-status-item.warning {
    border-left: 5px solid #f39c12;
}

.admin-status-item.offline {
    border-left: 5px solid #e74c3c;
}

.admin-status-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
    margin-right: 0.5rem;
}

.admin-status-indicator.online {
    background-color: #27ae60;
    box-shadow: 0 0 8px rgba(39, 174, 96, 0.5);
}

.admin-status-indicator.warning {
    background-color: #f39c12;
    box-shadow: 0 0 8px rgba(243, 156, 18, 0.5);
}

.admin-status-indicator.offline {
    background-color: #e74c3c;
    box-shadow: 0 0 8px rgba(231, 76, 60, 0.5);
}

.admin-control-panel {
    background: white;
    padding: 2rem;
    border-radius: 12px;
    border: 2px solid #FFEAA5;
    margin-bottom: 2rem;
}

.admin-control-title {
    color: #b22424;
    font-size: 1.5rem;
    margin-bottom: 1rem;
    border-bottom: 2px solid #FFEAA5;
    padding-bottom: 0.5rem;
}

.admin-control-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
}

.admin-control-item {
    background: #EEF5DB;
    padding: 1rem;
    border-radius: 8px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 2px solid transparent;
}

.admin-control-item:hover {
    background: #FFEAA5;
    border-color: #b22424;
    transform: scale(1.02);
}

.admin-control-item.danger:hover {
    background: #ffebee;
    border-color: #e74c3c;
}

/* Admin specific buttons */
.admin-btn {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%);
    border: none;
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.admin-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(178, 36, 36, 0.4);
}

.admin-btn.danger {
    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
}

.admin-btn.danger:hover {
    box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
}

.admin-btn.warning {
    background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
}

.admin-btn.warning:hover {
    box-shadow: 0 6px 20px rgba(243, 156, 18, 0.4);
}

.admin-btn.success {
    background: linear-gradient(135deg, #27ae60 0%, #219a52 100%);
}

.admin-btn.success:hover {
    box-shadow: 0 6px 20px rgba(39, 174, 96, 0.4);
}

/* Admin logs section */
.admin-logs {
    background: #1a1a1a;
    color: #00ff00;
    padding: 1rem;
    border-radius: 8px;
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
    max-height: 300px;
    overflow-y: auto;
    border: 2px solid #b22424;
}

.admin-logs::-webkit-scrollbar {
    width: 8px;
}

.admin-logs::-webkit-scrollbar-track {
    background: #2a2a2a;
}

.admin-logs::-webkit-scrollbar-thumb {
    background: #b22424;
    border-radius: 4px;
}

.admin-log-entry {
    margin-bottom: 0.25rem;
    padding: 0.25rem 0;
}

.admin-log-entry.error {
    color: #ff4444;
}

.admin-log-entry.warning {
    color: #ffaa00;
}

.admin-log-entry.info {
    color: #44aaff;
}

/* Dashboard KPI Cards */
.kpi-card {
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
    border: none;
    transition: all 0.3s ease;
}

.kpi-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 0.25rem 2rem 0 rgba(58, 59, 69, 0.2);
}

.kpi-card.primary { border-left: 4px solid #b22424; }
.kpi-card.success { border-left: 4px solid #b22424; }
.kpi-card.warning { border-left: 4px solid #FFEAA5; }
.kpi-card.info { border-left: 4px solid #EEF5DB; }
.kpi-card.secondary { border-left: 4px solid #FFEAA5; }

.kpi-number {
    font-size: 2.5rem;
    font-weight: 700;
    color: #5a5c69;
}

.kpi-label {
    font-size: 0.7rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin-bottom: 0.5rem;
}

.kpi-icon {
    color: #b22424;
    font-size: 2.5rem;
}

/* Dashboard Widget Cards */
.widget-card {
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
    border: none;
    margin-bottom: 1.5rem;
}

.widget-header {
    background: linear-gradient(135deg, #FFEAA5 0%, #b22424 100%);
    color: #333;
    border-radius: 10px 10px 0 0;
    padding: 1rem 1.5rem;
    font-weight: 600;
}

/* Dashboard Alert Items */
.alert-item {
    padding: 0.75rem 1rem;
    border-radius: 5px;
    margin-bottom: 0.5rem;
    border-left: 4px solid #b22424;
    background: rgba(178, 36, 36, 0.1);
}

.alert-critical { 
    border-left-color: #b22424; 
    background: rgba(178, 36, 36, 0.2); 
}

.alert-warning { 
    border-left-color: #FFEAA5; 
    background: rgba(255, 234, 165, 0.2); 
}

/* Dashboard Quick Action Buttons */
.quick-action-btn {
    background: linear-gradient(135deg, #FFEAA5 0%, #b22424 100%);
    border: none;
    color: #333;
    font-weight: 600;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    margin: 0.25rem;
}

.quick-action-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(254, 95, 85, 0.3);
    color: #333;
    text-decoration: none;
}

/* Dashboard Production Batches */
.production-batch {
    background: #EEF5DB;
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 0.5rem;
    border-left: 4px solid #b22424;
}

/* Sea-Style Text Colors */
.text-sea-primary {
    color: #b22424 !important;
}

.text-muted-sea {
    color: rgba(51,51,51,0.7) !important;
}

.text-sea-secondary {
    color: #FFEAA5 !important;
}

.text-sea-light {
    color: #EEF5DB !important;
}

.text-sea-dark {
    color: #333 !important;
}

/* Sea-Style Background Colors */
.bg-sea-primary {
    background-color: #b22424 !important;
    color: #fff;
}

.bg-sea-secondary {
    background-color: #FFEAA5 !important;
    color: #333;
}

.bg-sea-light {
    background-color: #EEF5DB !important;
    color: #333;
}

/* Sea-Style Badges */
.badge-sea-primary {
    background-color: #b22424;
    color: #fff;
}

.badge-sea-secondary {
    background-color: #FFEAA5;
    color: #333;
}

.badge-sea-light {
    background-color: #EEF5DB;
    color: #333;
}

/* Sea-Style Buttons */
.btn-sea-primary {
    background-color: #b22424 !important;
    border-color: #b22424 !important;
    color: #fff !important;
}

.btn-sea-primary:hover {
    background-color: #E54E45 !important;
    border-color: #E54E45 !important;
    transform: translateY(-1px);
    box-shadow: 0 4px 10px rgba(178, 36, 36, 0.3);
}

.btn-sea-secondary {
    background-color: #FFEAA5 !important;
    border-color: #FFEAA5 !important;
    color: #333 !important;
}

.btn-sea-secondary:hover {
    background-color: #FFE072 !important;
    border-color: #FFE072 !important;
    color: #333 !important;
}

.btn-sea-light {
    background-color: #EEF5DB !important;
    border-color: #EEF5DB !important;
    color: #333 !important;
}

.btn-sea-light:hover {
    background-color: #E8F0CF !important;
    border-color: #E8F0CF !important;
    color: #333 !important;
}

.btn-outline-sea-primary {
    background-color: transparent !important;
    border-color: #b22424 !important;
    color: #b22424 !important;
}

.btn-outline-sea-primary:hover {
    background-color: #b22424 !important;
    border-color: #b22424 !important;
    color: #fff !important;
}

/* Sea-Style Cards */
.card-sea-primary {
    border-left: 4px solid #b22424;
    box-shadow: 0 2px 8px rgba(178, 36, 36, 0.1);
}

.card-sea-secondary {
    border-left: 4px solid #FFEAA5;
    box-shadow: 0 2px 8px rgba(255, 234, 165, 0.1);
}

.card-sea-light {
    border-left: 4px solid #EEF5DB;
    box-shadow: 0 2px 8px rgba(238, 245, 219, 0.1);
}

.card-header-sea-primary {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%);
    color: #fff;
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
}

.card-header-sea-secondary {
    background: linear-gradient(135deg, #FFEAA5 0%, #FFE072 100%);
    color: #333;
    border-bottom: 1px solid rgba(51, 51, 51, 0.1);
}

.card-header-sea-light {
    background: linear-gradient(135deg, #EEF5DB 0%, #E8F0CF 100%);
    color: #333;
    border-bottom: 1px solid rgba(51, 51, 51, 0.1);
}

/* Admin Action Buttons for User Management */
.btn-admin-delete {
    background: linear-gradient(135deg, #ff2222 0%, #f64d4d 100%);
    border: 2px solid #333;
    color: white;
    font-weight: 600;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}
.btn-admin-delete:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(254, 95, 85, 0.4);
    color: white;
    text-decoration: none;
}
.btn-admin-primary {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%);
    border: 2px solid #333;
    color: white;
    font-weight: 600;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

.btn-admin-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(254, 95, 85, 0.4);
    color: white;
    text-decoration: none;
}

.btn-admin-secondary {
    background: linear-gradient(135deg, #FFEAA5 0%, #FFE072 100%);
    border: 2px solid #333;
    color: #333;
    font-weight: 600;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin-right: 0.5rem;
}

.btn-admin-secondary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(255, 234, 165, 0.4);
    color: #333;
    border-color: #333;
    text-decoration: none;
}

.btn-admin-light {
    background: linear-gradient(135deg, #EEF5DB 0%, #E8F0CF 100%);
    border: 2px solid #333;
    color: #333;
    font-weight: 600;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin-right: 0.5rem;
}

.btn-admin-light:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(238, 245, 219, 0.4);
    color: #333;
    text-decoration: none;
    border-color: #b22424;
}

.btn-admin-info {
    background: transparent;
    border: 2px solid #333;
    color: #333;
    font-weight: 600;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
}

.btn-admin-info:hover {
    background: #b22424;
    transform: translateY(-1px);
    color: white;
    text-decoration: none;
}

.btn-admin-edit {
    background: transparent;
    border: 2px solid #FFEAA5;
    color: #333;
    font-weight: 600;
    padding: 0.375rem 0.75rem;
    border-radius: 6px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
}

.btn-admin-edit:hover {
    background: #FFEAA5;
    transform: translateY(-1px);
    color: #333;
    text-decoration: none;
}

.btn-admin-warning {
    background: transparent;
    border: 2px solid #b22424;
    color: #b22424;
    font-weight: 600;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    margin-right: 0.5rem;
}

.btn-admin-warning:hover {
    background: #b22424;
    color: white;
    transform: translateY(-1px);
    text-decoration: none;
}

/* Admin Card Body Styling */
.admin-card-body {
    padding: 1.25rem;
    background: rgba(238, 245, 219, 0.05);
    border-radius: 0 0 8px 8px;
}

.admin-filter-card {
    padding: .5rem;
    display: flex; /* Evenly distribute children */
    gap: 2rem;
    background: rgba(238, 245, 219, 0.1);
    border: 2px solid #EEF5DB;
    border-radius: 8px;
    transition: all 0.3s ease;
    flex-wrap: wrap;
    overflow: hidden;
}

.admin-filter-card:hover {
    border-color: #EEF5DB;
    box-shadow: 0 2px 8px rgba(255, 234, 165, 0.2);
}

/* Admin Badge Styles */
.badge-admin-role {
    background: linear-gradient(135deg, #27ae60 0%, #219a52 100%);
    color: white;
    padding: 0.5rem 0.75rem;
    border-radius: 8px;
    font-weight: 600;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    line-height: 1.1;
    vertical-align: middle;
    white-space: nowrap;
}

.badge-admin-role.admin {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%);
    color: white;
    border: 2px solid #333;
}

.badge-admin-role.baker {
    background: linear-gradient(135deg, #EEF5DB 0%, #E8F0CF 100%);
    color: #333;
    box-shadow: 0 2px 6px rgba(238, 245, 219, 0.3);
    border: 2px solid #333;
}

.badge-admin-role.cashier {
    background: linear-gradient(135deg, #EEF5DB 0%, #E8F0CF 100%);
    color: #333;
    box-shadow: 0 2px 6px rgba(238, 245, 219, 0.3);
    border: 2px solid #333;
}

/* Generic chip-style badges for neutral labels */
.badge-chip {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    font-weight: 600;
    border-radius: 9999px;
    line-height: 1;
    vertical-align: middle;
    white-space: nowrap;
}

/* Admin Alert Styles */
.alert-admin-danger {
    background: linear-gradient(135deg, rgba(178, 36, 36, 0.1) 0%, rgba(229, 78, 69, 0.1) 100%);
    border: 2px solid #b22424;
    border-radius: 8px;
    padding: 1rem;
    color: #333;
}

.alert-admin-warning {
    background: linear-gradient(135deg, rgba(255, 234, 165, 0.2) 0%, rgba(255, 224, 114, 0.2) 100%);
    border: 2px solid #FFEAA5;
    border-radius: 8px;
    padding: 1rem;
    color: #333;
}

.alert-admin-success {
    background: linear-gradient(135deg, rgba(238, 245, 219, 0.3) 0%, rgba(232, 240, 207, 0.3) 100%);
    border: 2px solid #EEF5DB;
    border-radius: 8px;
    padding: 1rem;
    color: #333;
}

.alert-admin-info {
    background: linear-gradient(135deg, rgba(238, 245, 219, 0.15) 0%, rgba(255, 234, 165, 0.15) 100%);
    border: 2px solid #EEF5DB;
    border-radius: 8px;
    padding: 1rem;
    color: #333;
}

/* Admin Pagination Styles */
.admin-pagination {
    margin: 0;
    background-color: transparent;
}

.pagination-admin {
    margin-bottom: 0;
    gap: 0.25rem;
}

.pagination-admin .page-item {
    margin: 0;
}

.pagination-admin .page-link {
    background: #EEF5DB;
    border: 2px solid #333;
    color: #333;
    padding: 0.5rem 0.875rem;
    border-radius: 8px;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.3s ease;
    min-width: 42px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
}

.pagination-admin .page-link:hover {
    background: linear-gradient(135deg, #FFEAA5 0%, #EEF5DB 100%);
    border-color: #b22424;
    color: #333;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(178, 36, 36, 0.25);
    text-decoration: none;
}

.pagination-admin .page-item.active .page-link {
    background: linear-gradient(135deg, #b22424 0%, #FFEAA5 100%);
    border-color: #b22424;
    color: white;
    font-weight: 700;
    box-shadow: 0 4px 15px rgba(178, 36, 36, 0.4);
    transform: translateY(-1px);
}

.pagination-admin .page-item.disabled .page-link {
    background: #f8f9fa;
    border-color: #333;
    color: #adb5bd;
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

.pagination-admin .page-item:first-child .page-link,
.pagination-admin .page-item:last-child .page-link {
    font-weight: 600;
    min-width: 80px;
}

@media (max-width: 576px) {
    .pagination-admin .page-item:first-child .page-link,
    .pagination-admin .page-item:last-child .page-link {
        min-width: 42px;
    }
}

/* Pagination Info Text */
.pagination-info {
    color: #666;
    font-size: 0.875rem;
    font-weight: 500;
}

.pagination-info strong {
    color: #333;
    font-weight: 700;
}

--- End of File ---

File: .\public\css\auth-styles.css
/* Sea++ Bakery - Modern Authentication Styles */
/* Using General CSS Colors: 50% EEF5DB (light green), 30% FFE21A (light yellow), 10% FE5F55 (coral), Dark: #333 */

/* Ensure body allows scrolling */
html, body {
    overflow-x: hidden;
    overflow-y: auto;
    height: auto;
    min-height: 100vh;
}

/* Modern minimalistic design with proper color distribution */
.auth-modern-container {
    min-height: 100vh;
    /* 50% EEF5DB, 30% FFE21A, 20% blend for proper distribution */
    background: linear-gradient(135deg, 
        #EEF5DB 0%, 
        #EEF5DB 25%, 
        #ffeaa5 70%, 
        #EEF5DB 100%
    );
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    padding-top: 2rem;
    padding-bottom: 2rem;
    font-family: 'Arial', sans-serif; /* Using general CSS font */
    position: relative;
    /* Removed overflow: hidden to allow scrolling */
}

/* Abstract background shapes using dark color #333 */
.auth-bg-shapes {
    position: absolute;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1;
}

.shape {
    position: absolute;
    border-radius: 50%;
    background: #fd1100; /* Dark color from general CSS */
    opacity: 0.1;
    animation: float 8s ease-in-out infinite;
    filter: blur(1px);
}

.shape-1 {
    width: 300px;
    height: 300px;
    top: 5%;
    left: -100px;
    animation-delay: 0s;
    opacity: 0.06;
}

.shape-2 {
    width: 200px;
    height: 200px;
    bottom: 10%;
    right: -60px;
    animation-delay: 3s;
    opacity: 0.08;
}

.shape-3 {
    width: 150px;
    height: 150px;
    top: 50%;
    left: -20%;
    animation-delay: 6s;
    opacity: 0.07;
}

.shape-4 {
    width: 120px;
    height: 120px;
    bottom: 40%;
    right: 10%;
    animation-delay: 2s;
    opacity: 0.05;
}
.shape-5 {
    width: 250px;
    height: 250px;
    top: 20%;
    right: -80px;
    animation-delay: 4s;
    opacity: 0.06;
}
.shape-6 {
    width: 180px;
    height: 180px;
    bottom: 15%;
    left: 15%;
    animation-delay: 5s;
    opacity: 0.04;
}

/* Main content container */
.auth-main-content {
    position: relative;
    z-index: 10;
    width: 100%;
    max-width: 500px;
}

/* Glass Mode Card - Enhanced */
.auth-card {
    background: rgba(255, 255, 255, 0.25); /* More transparent for glass effect */
    backdrop-filter: blur(20px) saturate(150%); /* Enhanced glass effect */
    -webkit-backdrop-filter: blur(20px) saturate(150%); /* Safari support */
    border-radius: 24px;
    padding: 2rem 2.5rem;
    box-shadow: 
        0 25px 50px rgba(51, 51, 51, 0.15), /* Using #333 dark color */
        0 0 0 1px rgba(255, 255, 255, 0.2); /* Glass border */
    border: 1px solid rgba(33, 32, 30, 0.4); /* 30% FFE21A accent border */
    text-align: center;
    animation: slideUp 1s ease-out;
    position: relative;
}

.auth-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, 
        rgba(238, 245, 219, 0.1) 0%,  /* 50% EEF5DB */
        rgba(255, 234, 165, 0.05) 50%, /* 30% FFE21A */
        rgba(254, 95, 85, 0.02) 100%   /* 10% FE5F55 */
    );
    border-radius: 24px;
    pointer-events: none;
}

/* Logo in card - Made larger and more visible */
.auth-card-logo {
    margin-bottom: 1rem;
    position: relative;
    z-index: 2;
}

.auth-card-logo img {
    max-height: 150px; /* Increased from 80px */
    width: auto;
    filter: drop-shadow(0 6px 12px rgba(228, 0, 0, 0.548)) /* Using #333 */ 
            contrast(1.1) brightness(1.05); /* Enhanced visibility */
    transition: transform 0.3s ease;
    border-radius: 50%;
}

.auth-card-logo:hover img {
    transform: scale(1.02);
}

/* Title */
.auth-card-title {
    color: #333; /* Using general CSS dark color */
    font-size: 2rem;
    font-weight: 600;
    margin-bottom: 1rem;
    text-align: center;
    position: relative;
    z-index: 2;
    text-shadow: 0 1px 3px rgba(255, 255, 255, 0.8);
}

/* Form styling - Integrated with general CSS */

/* Single column form layout */
.auth-form-single {
    margin-bottom: 1.0rem;
}

.form-title {
    font-size: 1.3rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 1.0rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid rgba(254, 95, 85, 0.3);
    text-align: center;
}

/* Checkbox styling */
.auth-checkbox-container {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    margin: 1rem 0;
    position: relative;
    z-index: 10;
}

.auth-checkbox-container input[type="checkbox"] {
    width: 20px;
    height: 20px;
    margin: 0;
    padding: 0;
    accent-color: #FE5F55;
    cursor: pointer;
    flex-shrink: 0;
    margin-top: 2px;
    position: relative;
    z-index: 11;
    border: 2px solid #ccc;
    border-radius: 4px;
    transition: all 0.2s ease;
}

.auth-checkbox-container input[type="checkbox"]:checked {
    accent-color: #FE5F55;
    border-color: #FE5F55;
}

.auth-checkbox-container input[type="checkbox"]:hover {
    border-color: #FE5F55;
    transform: scale(1.05);
}

.auth-checkbox-container input[type="checkbox"]:focus {
    outline: 2px solid #FE5F55;
    outline-offset: 2px;
}

.auth-checkbox-container label {
    font-size: 0.9rem;
    color: #333;
    line-height: 1.4;
    cursor: pointer;
    display: block;
    position: relative;
    z-index: 10;
    user-select: none;
    -webkit-user-select: none;
}

.terms-link {
    color: #FE5F55;
    text-decoration: underline;
    font-weight: 500;
}

.terms-link:hover {
    color: #e54e45;
}

.auth-form-group { 
    margin-bottom: 1.0rem;
    position: relative;
    z-index: 2;
}

.auth-form-group label {
    display: none; /* Hidden for clean design */
}

/* Exception: Show labels for checkboxes */
.auth-checkbox-container label {
    display: block !important; /* Override the hidden label rule for checkboxes */
}

.auth-input-container {
    position: relative;
}

.auth-input-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: #333; /* Using general CSS dark color */
    z-index: 5;
    font-size: 1.0rem;
    opacity: 0.7;
}

.auth-form-group input:not([type="checkbox"]),
.auth-form-group select {
    width: 100%;
    padding: 1rem 1rem 1rem 3rem;
    border: 2px solid rgba(255, 234, 165, 0.6); /* 30% FFE21A from general CSS */
    border-radius: 12px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background: rgba(238, 245, 219, 0.3); /* 50% EEF5DB from general CSS */
    backdrop-filter: blur(5px);
    box-sizing: border-box;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    color: #333; /* Using general CSS dark color */
}

.auth-form-group select {
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23333' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 1rem center;
    background-size: 1rem;
    cursor: pointer;
}

.auth-form-group input:not([type="checkbox"])::placeholder {
    color: rgba(51, 51, 51, 0.6); /* Using #333 with transparency */
    font-weight: 400;
}

.auth-form-group input:not([type="checkbox"]):focus,
.auth-form-group select:focus {
    outline: none;
    border-color: #b22424; /* 10% #b22424 from general CSS */
    box-shadow: 0 0 0 3px rgba(178, 36, 36, 0.2);
    background: rgba(255, 255, 255, 0.4);
    backdrop-filter: blur(8px);
}

.auth-form-group input:not([type="checkbox"]):focus + .auth-input-icon {
    color: #b22424; /* 10% #b22424 accent color */
    opacity: 1;
}

/* Forgot password link */
.auth-forgot-password {
    text-align: left;
    margin-top: -1rem;
    margin-bottom: 1.5rem;
    position: relative;
    z-index: 2;
}

.auth-forgot-password a {
    color: rgba(51, 51, 51, 0.7); /* Using #333 with transparency */
    text-decoration: none;
    font-size: 0.9rem;
    transition: color 0.3s ease;
}

.auth-forgot-password a:hover {
    color: #FE5F55; /* 10% FE5F55 accent on hover */
}

/* Login button with FE5F55 accent (10% color from general CSS) */
.auth-btn {
    width: 100%;
    background: rgba(254, 95, 85, 0.1); /* 10% FE5F55 subtle background */
        color: #b22424;
        padding: 1rem;
        border: 2px solid #b22424;
    border-radius: 12px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 1.5rem;
    position: relative;
    z-index: 2;
    backdrop-filter: blur(5px);
}

.auth-btn:hover {
    background: #b22424;
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 8px 25px rgba(254, 95, 85, 0.3);
    backdrop-filter: blur(0px);
}

/* Sign up link */
.auth-switch-link {
    text-align: center;
    margin-top: 1rem;
    position: relative;
    z-index: 2;
}

.auth-switch-link p {
    color: rgba(51, 51, 51, 0.8); /* Using #333 with transparency */
    font-size: 0.95rem;
    margin: 0;
}

.auth-switch-link a {
    color: #b22424; /* 10% #b22424 accent color from general CSS */
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
}

.auth-switch-link a:hover {
    color: #b22424;
    text-decoration: underline;
}

.auth-footer {
    background-color: #FFE21A;
    color: #333;
    text-align: center;
    padding: 2rem;
    border-top: 3px solid #b22424;
    box-shadow: 0 -4px 15px rgba(178, 36, 36, 0.1);
}

.auth-footer p {
    margin: 0;
    font-size: 0.95rem;
    opacity: 0.8;
}

/* Error messages */
.auth-error {
    background-color: rgba(178, 36, 36, 0.1);
    border: 1px solid #b22424;
    color: #b22424;
    padding: 0.75rem;
    border-radius: 6px;
    margin-bottom: 1rem;
    font-size: 0.9rem;
}

/* Success messages */
.auth-success {
    background-color: rgba(46, 204, 113, 0.1);
    border: 1px solid #2ecc71;
    color: #27ae60;
    padding: 0.75rem;
    border-radius: 6px;
    margin-bottom: 1rem;
    font-size: 0.9rem;
}

/* Loading state */
.auth-btn.loading {
    position: relative;
    color: transparent;
}

.auth-btn.loading::after {
    content: '';
    position: absolute;
    width: 20px;
    height: 20px;
    top: 50%;
    left: 50%;
    margin-left: -10px;
    margin-top: -10px;
    border: 2px solid #ffffff;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s ease-in-out infinite;
}

/* Animations */
@keyframes spin {
    to { transform: rotate(360deg); }
}

@keyframes slideUp {
    from { 
        opacity: 0; 
        transform: translateY(30px); 
    }
    to { 
        opacity: 1; 
        transform: translateY(0); 
    }
}

@keyframes float {
    0%, 100% { 
        transform: translateY(0px) translateX(0px) rotate(0deg); 
    }
    25% { 
        transform: translateY(-10px) translateX(5px) rotate(1deg); 
    }
    50% { 
        transform: translateY(-15px) translateX(-3px) rotate(-0.5deg); 
    }
    75% { 
        transform: translateY(-8px) translateX(2px) rotate(0.5deg); 
    }
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .auth-modern-container {
        padding: 1rem;
        align-items: flex-start;
        padding-top: 2rem;
        padding-bottom: 2rem;
        min-height: 100vh;
    }
    
    .auth-card {
        padding: 2rem 1.5rem;
        background: rgba(255, 255, 255, 0.3); /* Slightly more opaque on mobile */
        backdrop-filter: blur(15px) saturate(120%);
        margin-top: 0;
        margin-bottom: 0;
        width: 100%;
        max-width: none;
    }
    
    .auth-card-logo img {
        max-height: 100px; /* Still larger than original, but scaled for mobile */
    }
    
    .auth-card-title {
        font-size: 1.7rem;
        margin-bottom: 1.5rem;
    }
    
    .auth-form-group {
        margin-bottom: 1.25rem;
    }
    
    /* Make shapes smaller and more subtle on mobile */
    .shape-1, .shape-2, .shape-3, .shape-4 {
        opacity: 0.04;
        transform: scale(0.8);
    }
    
    .auth-form-group input:not([type="checkbox"]),
    .auth-form-group select {
        font-size: 16px; /* Prevent zoom on iOS */
        background: rgba(238, 245, 219, 0.4); /* Slightly more opaque */
        padding: 0.875rem 0.875rem 0.875rem 2.75rem;
    }
}

/* Extra small screens */
@media (max-width: 480px) {
    .auth-modern-container {
        padding: 0.5rem;
    }
    
    .auth-card {
        padding: 1.5rem 1rem;
        border-radius: 16px;
    }
    
    .auth-card-logo img {
        max-height: 80px;
    }
    
    .auth-card-title {
        font-size: 1.5rem;
    }
}


--- End of File ---

File: .\public\css\baker-styles.css
/* ==================== Baker Dashboard Styles ==================== */
/* Based on Sea-style Design System */
/* Color Scheme: 50% EEF5DB, 30% FFEAA5, 10% FE5F55 */

/* ==================== ADMIN BUTTON STYLES (Complete Copy) ==================== */
/* Admin specific buttons */
.admin-btn {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%);
    border: none;
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.admin-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(254, 95, 85, 0.4);
}

.admin-btn.danger {
    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
}

.admin-btn.danger:hover {
    box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
}

.admin-btn.warning {
    background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
}

.admin-btn.warning:hover {
    box-shadow: 0 6px 20px rgba(243, 156, 18, 0.4);
}

.admin-btn.success {
    background: linear-gradient(135deg, #27ae60 0%, #219a52 100%);
}

.admin-btn.success:hover {
    box-shadow: 0 6px 20px rgba(39, 174, 96, 0.4);
}

/* Sea-Style Buttons */
.btn-sea-primary {
    background-color: #b22424 !important;
    border-color: #b22424 !important;
    color: #fff !important;
}

.btn-sea-primary:hover {
    background-color: #E54E45 !important;
    border-color: #E54E45 !important;
    transform: translateY(-1px);
    box-shadow: 0 4px 10px rgba(254, 95, 85, 0.3);
}

.btn-sea-secondary {
    background-color: #FFEAA5 !important;
    border-color: #FFEAA5 !important;
    color: #333 !important;
}

.btn-sea-secondary:hover {
    background-color: #FFE072 !important;
    border-color: #FFE072 !important;
    color: #333 !important;
}

.btn-sea-light {
    background-color: #EEF5DB !important;
    border-color: #EEF5DB !important;
    color: #333 !important;
}

.btn-sea-light:hover {
    background-color: #E8F0CF !important;
    border-color: #E8F0CF !important;
    color: #333 !important;
}

.btn-outline-sea-primary {
    background-color: transparent !important;
    border-color: #b22424 !important;
    color: #b22424 !important;
}

.btn-outline-sea-primary:hover {
    background-color: #b22424 !important;
    border-color: #b22424 !important;
    color: #fff !important;
}

/* Admin Action Buttons for User Management */
.btn-admin-primary {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%) !important;
    border: 2px solid #333 !important;
    color: white !important;
    font-weight: 600 !important;
    padding: 0.5rem 1rem !important;
    border-radius: 6px !important;
    transition: all 0.3s ease !important;
    text-decoration: none !important;
    display: inline-flex !important;
    align-items: center !important;
    justify-content: center !important;
}

.btn-admin-primary:hover {
    transform: translateY(-2px) !important;
    box-shadow: 0 4px 12px rgba(178, 36, 36, 0.4) !important;
    color: white !important;
    text-decoration: none !important;
}

.btn-admin-secondary {
    background: linear-gradient(135deg, #FFEAA5 0%, #FFE072 100%) !important;
    border: 2px solid #FFEAA5 !important;
    color: #333 !important;
    font-weight: 600 !important;
    padding: 0.5rem 1rem !important;
    border-radius: 6px !important;
    transition: all 0.3s ease !important;
    text-decoration: none !important;
    display: inline-flex !important;
    align-items: center !important;
    justify-content: center !important;
    margin-right: 0.8rem !important;
}

.btn-admin-secondary:hover {
    transform: translateY(-2px) !important;
    box-shadow: 0 4px 12px rgba(255, 234, 165, 0.4) !important;
    color: #333 !important;
    border-color: #333 !important;
    text-decoration: none !important;
}

.btn-admin-light {
    background: linear-gradient(135deg, #EEF5DB 0%, #E8F0CF 100%) !important;
    border: 2px solid #333 !important;
    color: #333 !important;
    font-weight: 600 !important;
    padding: 1rem 1.5rem !important;
    border-radius: 8px !important;
    transition: all 0.3s ease !important;
    text-decoration: none !important;
    display: inline-flex !important;
    align-items: center !important;
    justify-content: center !important;
}

.btn-admin-light:hover {
    transform: translateY(-2px) !important;
    box-shadow: 0 4px 12px rgba(238, 245, 219, 0.4) !important;
    color: #333 !important;
    text-decoration: none !important;
    border-color: #b22424 !important;
}

.btn-admin-info {
    background: transparent !important;
    border: 2px solid #EEF5DB !important;
    color: #333 !important;
    font-weight: 600 !important;
    padding: 0.375rem 0.75rem !important;
    border-radius: 6px !important;
    transition: all 0.3s ease !important;
    text-decoration: none !important;
    display: inline-flex !important;
    align-items: center !important;
}

.btn-admin-info:hover {
    background: #EEF5DB !important;
    transform: translateY(-1px) !important;
    color: #333 !important;
    text-decoration: none !important;
}

.btn-admin-edit {
    background: transparent !important;
    border: 2px solid #FFEAA5 !important;
    color: #333 !important;
    font-weight: 600 !important;
    padding: 0.375rem 0.75rem !important;
    border-radius: 6px !important;
    transition: all 0.3s ease !important;
    text-decoration: none !important;
    display: inline-flex !important;
    align-items: center !important;
}

.btn-admin-edit:hover {
    background: #FFEAA5 !important;
    transform: translateY(-1px) !important;
    color: #333 !important;
    text-decoration: none !important;
}

.btn-admin-warning {
    background: transparent !important;
    border: 2px solid #b22424 !important;
    color: #b22424 !important;
    font-weight: 600 !important;
    padding: 0.375rem 0.75rem !important;
    border-radius: 6px !important;
    transition: all 0.3s ease !important;
    text-decoration: none !important;
    display: inline-flex !important;
    align-items: center !important;
}

.btn-admin-warning:hover {
    background: #b22424 !important;
    color: white !important;
    transform: translateY(-1px) !important;
    text-decoration: none !important;
}

/* Dashboard Quick Action Buttons */
.quick-action-btn {
    background: linear-gradient(135deg, #FFEAA5 0%, #b22424 100%) !important;
    border: none !important;
    color: #333 !important;
    font-weight: 600 !important;
    padding: 0.75rem 1.5rem !important;
    border-radius: 8px !important;
    transition: all 0.3s ease !important;
    text-decoration: none !important;
    display: inline-flex !important;
    align-items: center !important;
    margin: 0.25rem !important;
}

.quick-action-btn:hover {
    transform: translateY(-2px) !important;
    box-shadow: 0 4px 8px rgba(254, 95, 85, 0.3) !important;
    color: #333 !important;
    text-decoration: none !important;
}

/* ==================== ADMIN ALERT STYLES (Missing Classes) ==================== */
/* Admin Alert Styles */
.alert-admin-danger {
    background: linear-gradient(135deg, rgba(254, 95, 85, 0.1) 0%, rgba(229, 78, 69, 0.1) 100%) !important;
    border: 2px solid #b22424 !important;
    border-radius: 8px !important;
    padding: 1rem !important;
    color: #333 !important;
    margin-bottom: 1rem !important;
    display: block !important;
}

.alert-admin-warning {
    background: linear-gradient(135deg, rgba(255, 234, 165, 0.2) 0%, rgba(255, 224, 114, 0.2) 100%) !important;
    border: 2px solid #FFEAA5 !important;
    border-radius: 8px !important;
    padding: 1rem !important;
    color: #333 !important;
    margin-bottom: 1rem !important;
    display: block !important;
}

.alert-admin-success {
    background: linear-gradient(135deg, rgba(238, 245, 219, 0.3) 0%, rgba(232, 240, 207, 0.3) 100%) !important;
    border: 2px solid #EEF5DB !important;
    border-radius: 8px !important;
    padding: 1rem !important;
    color: #333 !important;
    margin-bottom: 1rem !important;
    display: block !important;
}

.alert-admin-info {
    background: linear-gradient(135deg, rgba(238, 245, 219, 0.15) 0%, rgba(255, 234, 165, 0.15) 100%) !important;
    border: 2px solid #EEF5DB !important;
    border-radius: 8px !important;
    padding: 1rem !important;
    color: #333 !important;
    margin-bottom: 1rem !important;
    display: block !important;
}

/* ==================== ENHANCED BUTTON SPECIFICITY ==================== */
/* Ensure admin button classes work in baker context with higher specificity */
.baker-body .btn-admin-primary,
a.btn-admin-primary,
button.btn-admin-primary {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%) !important;
    border: 2px solid #333 !important;
    color: white !important;
    font-weight: 600 !important;
    padding: 0.5rem 1rem !important;
    border-radius: 6px !important;
    transition: all 0.3s ease !important;
    text-decoration: none !important;
    display: inline-flex !important;
    align-items: center !important;
    justify-content: center !important;
    cursor: pointer !important;
}

.baker-body .btn-admin-primary:hover,
a.btn-admin-primary:hover,
button.btn-admin-primary:hover {
    transform: translateY(-2px) !important;
    box-shadow: 0 4px 12px rgba(254, 95, 85, 0.4) !important;
    color: white !important;
    text-decoration: none !important;
}

.baker-body .btn-admin-secondary,
a.btn-admin-secondary,
button.btn-admin-secondary {
    background: linear-gradient(135deg, #FFEAA5 0%, #FFE072 100%) !important;
    border: 2px solid #FFEAA5 !important;
    color: #333 !important;
    font-weight: 600 !important;
    padding: 0.5rem 1rem !important;
    border-radius: 6px !important;
    transition: all 0.3s ease !important;
    text-decoration: none !important;
    display: inline-flex !important;
    align-items: center !important;
    justify-content: center !important;
    cursor: pointer !important;
}

.baker-body .btn-admin-secondary:hover,
a.btn-admin-secondary:hover,
button.btn-admin-secondary:hover {
    transform: translateY(-2px) !important;
    box-shadow: 0 4px 12px rgba(255, 234, 165, 0.4) !important;
    color: #333 !important;
    border-color: #333 !important;
    text-decoration: none !important;
}

.baker-body .btn-admin-light,
a.btn-admin-light,
button.btn-admin-light {
    background: linear-gradient(135deg, #EEF5DB 0%, #E8F0CF 100%) !important;
    border: 2px solid #333 !important;
    color: #333 !important;
    font-weight: 600 !important;
    padding: 0.5rem 1rem !important;
    border-radius: 8px !important;
    transition: all 0.3s ease !important;
    text-decoration: none !important;
    display: inline-flex !important;
    align-items: center !important;
    justify-content: center !important;
    cursor: pointer !important;
}

.baker-body .btn-admin-light:hover,
a.btn-admin-light:hover,
button.btn-admin-light:hover {
    transform: translateY(-2px) !important;
    box-shadow: 0 4px 12px rgba(238, 245, 219, 0.4) !important;
    color: #333 !important;
    text-decoration: none !important;
    border-color: #b22424 !important;
}

.baker-body .btn-admin-warning,
a.btn-admin-warning,
button.btn-admin-warning {
    background: transparent !important;
    border: 2px solid #b22424 !important;
    color: #b22424 !important;
    font-weight: 600 !important;
    padding: 0.375rem 0.75rem !important;
    border-radius: 6px !important;
    transition: all 0.3s ease !important;
    text-decoration: none !important;
    display: inline-flex !important;
    align-items: center !important;
    cursor: pointer !important;
}

.baker-body .btn-admin-warning:hover,
a.btn-admin-warning:hover,
button.btn-admin-warning:hover {
    background: #b22424 !important;
    color: white !important;
    transform: translateY(-1px) !important;
    text-decoration: none !important;
}

/* Small button variants */
.baker-body .btn-sm,
.btn-admin-primary.btn-sm,
.btn-admin-secondary.btn-sm,
.btn-admin-light.btn-sm,
.btn-admin-warning.btn-sm {
    padding: 0.375rem 0.75rem !important;
    font-size: 0.875rem !important;
}

/* ==================== Body & Layout ==================== */
.baker-body {
    background: linear-gradient(135deg, #EEF5DB 0%, #F0F6E8 100%);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    color: #333;
    line-height: 1.6;
}

/* ==================== Header Styles (Following sea-styles.css pattern) ==================== */
.baker-header {
    background-color: #FFEAA5;
    color: #333;
    padding: 1rem;
    border-bottom: 3px solid #b22424;
    box-shadow: 0 2px 5px rgba(254, 95, 85, 0.1);
}

.header-logo {
    height: 45px;
    width: 45px;
    border-radius: 50%;
    border: 2px solid #b22424;
    transition: all 0.2s ease;
}

.header-logo:hover {
    border-color: #E54E45;
    box-shadow: 0 2px 8px rgba(254, 95, 85, 0.3);
}

.logo {
    font-size: 1.5rem;
    font-weight: bold;
    color: #b22424;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
}

.company-name {
    font-size: 1rem;
    color: #333;
    margin-top: 0.25rem;
}

.user-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.role-badge {
    background-color: #b22424;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.user-name {
    color: #333;
    font-weight: 500;
}

.logout-btn {
    background-color: #b22424;
    color: white;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    text-decoration: none;
    font-weight: bold;
    font-size: 0.9rem;
    transition: all 0.3s ease;
}

.logout-btn:hover {
    background-color: #E54E45;
    transform: translateY(-1px);
    box-shadow: 0 4px 10px rgba(254, 95, 85, 0.3);
}

/* ==================== Navigation Styles (Following sea-styles.css pattern) ==================== */
.baker-nav {
    background-color: #FFEAA5;
    padding: 0.5rem 0;
    border-bottom: 2px solid #EEF5DB;
    position: sticky;
    top: 0;
    z-index: 1020;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.baker-nav ul {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    gap: 1rem;
    padding: 0 1rem;
    flex-wrap: wrap;
}

.baker-nav a {
    color: #333;
    text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    transition: all 0.3s ease;
    border: 2px solid transparent;
    font-weight: 500;
}

.baker-nav a:hover {
    background-color: #b22424;
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 2px 5px rgba(254, 95, 85, 0.3);
}

.baker-nav a.active {
    background-color: #b22424;
    color: white;
    border: 2px solid #333;
    box-shadow: 0 2px 5px rgba(254, 95, 85, 0.4);
}

/* ==================== Main Content ==================== */
.baker-content {
    flex: 1;
    padding: 2rem;
    background-color: #EEF5DB;
}

/* Ensure form text is visible on all pages */
.baker-content input,
.baker-content select,
.baker-content textarea {
    color: #333 !important;
    background-color: #fff !important;
}

.baker-content ::placeholder {
    color: #666 !important;
}

/* ==================== Admin Button Styles (Enhanced for Baker) ==================== */
/* Primary Action Buttons */
.btn-admin-primary,
a.btn-admin-primary,
button.btn-admin-primary {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%) !important;
    border: 2px solid #b22424 !important;
    color: white !important;
    font-weight: 600;
    padding: 0.5rem 1.25rem;
    border-radius: 8px;
    text-decoration: none !important;
    display: inline-flex;
    align-items: center;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(254, 95, 85, 0.2);
    line-height: 1.5;
    white-space: nowrap;
}


.btn-admin-primary:active,
.btn-admin-primary:focus,
a.btn-admin-primary:active,
a.btn-admin-primary:focus,
button.btn-admin-primary:active,
button.btn-admin-primary:focus {
    transform: translateY(0) !important;
    box-shadow: 0 2px 4px rgba(254, 95, 85, 0.2) !important;
    color: white !important;
    background: linear-gradient(135deg, #E54E45 0%, #D63D35 100%) !important;
    border-color: #E54E45 !important;
    outline: none !important;
}

/* Secondary Action Buttons */
.btn-admin-secondary,
a.btn-admin-secondary,
button.btn-admin-secondary {
    background: linear-gradient(135deg, #FFEAA5 0%, #FFE89A 100%) !important;
    border: 2px solid #FFEAA5 !important;
    color: #333 !important;
    font-weight: 600;
    padding: 0.5rem 1.25rem;
    border-radius: 8px;
    text-decoration: none !important;
    display: inline-flex;
    align-items: center;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(255, 234, 165, 0.2);
    line-height: 1.5;
    white-space: nowrap;
}

.btn-admin-secondary:hover,
a.btn-admin-secondary:hover,
button.btn-admin-secondary:hover {
    background: linear-gradient(135deg, #FFE89A 0%, #FFE68F 100%) !important;
    border-color: #FFE89A !important;
    color: #333 !important;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(255, 234, 165, 0.3);
    text-decoration: none !important;
}

.btn-admin-secondary:active,
.btn-admin-secondary:focus,
a.btn-admin-secondary:active,
a.btn-admin-secondary:focus,
button.btn-admin-secondary:active,
button.btn-admin-secondary:focus {
    color: #333 !important;
    background: linear-gradient(135deg, #FFE89A 0%, #FFE68F 100%) !important;
    border-color: #FFE89A !important;
    outline: none !important;
}

/* Light/Cancel Buttons */
.btn-admin-light,
a.btn-admin-light,
button.btn-admin-light {
    background: linear-gradient(135deg, #EEF5DB 0%, #E8F2D3 100%) !important;
    border: 2px solid #EEF5DB !important;
    color: #333 !important;
    font-weight: 600;
    padding: 0.5rem 1.25rem;
    border-radius: 8px;
    text-decoration: none !important;
    display: inline-flex;
    align-items: center;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(238, 245, 219, 0.2);
    line-height: 1.5;
    white-space: nowrap;
}


.btn-admin-light:active,
.btn-admin-light:focus,
a.btn-admin-light:active,
a.btn-admin-light:focus,
button.btn-admin-light:active,
button.btn-admin-light:focus {
    color: #333 !important;
    background: linear-gradient(135deg, #E8F2D3 0%, #E2EFCB 100%) !important;
    border-color: #E8F2D3 !important;
    outline: none !important;
}

/* Warning/Delete Buttons */

.btn-admin-warning:active,
.btn-admin-warning:focus,
a.btn-admin-warning:active,
a.btn-admin-warning:focus,
button.btn-admin-warning:active,
button.btn-admin-warning:focus {
    color: white !important;
    background: linear-gradient(135deg, #FF5757 0%, #FF4343 100%) !important;
    border-color: #FF5757 !important;
    outline: none !important;
}

/* Small Button Variants */
.btn-sm,
.btn-admin-primary.btn-sm,
.btn-admin-secondary.btn-sm,
.btn-admin-light.btn-sm,
.btn-admin-warning.btn-sm,
a.btn-admin-primary.btn-sm,
a.btn-admin-secondary.btn-sm,
a.btn-admin-light.btn-sm,
a.btn-admin-warning.btn-sm,
button.btn-admin-primary.btn-sm,
button.btn-admin-secondary.btn-sm,
button.btn-admin-light.btn-sm,
button.btn-admin-warning.btn-sm {
    padding: 0.25rem 0.75rem !important;
    font-size: 0.875rem !important;
    line-height: 1.4 !important;
}

/* Disabled Button States */
.btn-admin-primary:disabled,
.btn-admin-secondary:disabled,
.btn-admin-light:disabled,
.btn-admin-warning:disabled,
a.btn-admin-primary:disabled,
a.btn-admin-secondary:disabled,
a.btn-admin-light:disabled,
a.btn-admin-warning:disabled,
button.btn-admin-primary:disabled,
button.btn-admin-secondary:disabled,
button.btn-admin-light:disabled,
button.btn-admin-warning:disabled {
    opacity: 0.6 !important;
    cursor: not-allowed !important;
    transform: none !important;
    box-shadow: none !important;
    pointer-events: none;
}

/* Button Group Spacing */
.btn-group .btn-admin-primary,
.btn-group .btn-admin-secondary,
.btn-group .btn-admin-light,
.btn-group .btn-admin-warning {
    margin-right: 0.25rem;
}

.btn-group .btn-admin-primary:last-child,
.btn-group .btn-admin-secondary:last-child,
.btn-group .btn-admin-light:last-child,
.btn-group .btn-admin-warning:last-child {
    margin-right: 0;
}

/* Icon spacing in buttons */
.btn-admin-primary i,
.btn-admin-secondary i,
.btn-admin-light i,
.btn-admin-warning i {
    margin-right: 0.5rem;
}

.btn-admin-primary i:last-child,
.btn-admin-secondary i:last-child,
.btn-admin-light i:last-child,
.btn-admin-warning i:last-child {
    margin-right: 0;
    margin-left: 0.5rem;
}

/* Override Bootstrap button styles completely */
.baker-body .btn-admin-primary,
.baker-body .btn-admin-secondary,
.baker-body .btn-admin-light,
.baker-body .btn-admin-warning {
    font-family: inherit !important;
    text-shadow: none !important;
    letter-spacing: 0 !important;
    text-transform: none !important;
    vertical-align: middle !important;
}

/* Ensure text is always visible on all admin buttons */
.btn-admin-primary,
.btn-admin-primary:hover,
.btn-admin-primary:focus,
.btn-admin-primary:active,
.btn-admin-primary:visited,
a.btn-admin-primary,
a.btn-admin-primary:hover,
a.btn-admin-primary:focus,
a.btn-admin-primary:active,
a.btn-admin-primary:visited {
    color: #ffffff !important;
    text-decoration: none !important;
}

.btn-admin-secondary,
.btn-admin-secondary:hover,
.btn-admin-secondary:focus,
.btn-admin-secondary:active,
.btn-admin-secondary:visited,
a.btn-admin-secondary,
a.btn-admin-secondary:hover,
a.btn-admin-secondary:focus,
a.btn-admin-secondary:active,
a.btn-admin-secondary:visited {
    color: #333333 !important;
    text-decoration: none !important;
}

.btn-admin-light,
.btn-admin-light:hover,
.btn-admin-light:focus,
.btn-admin-light:active,
.btn-admin-light:visited,
a.btn-admin-light,
a.btn-admin-light:hover,
a.btn-admin-light:focus,
a.btn-admin-light:active,
a.btn-admin-light:visited {
    color: #333333 !important;
    text-decoration: none !important;
}

.btn-admin-warning,
.btn-admin-warning:hover,
.btn-admin-warning:focus,
.btn-admin-warning:active,
.btn-admin-warning:visited,
a.btn-admin-warning,
a.btn-admin-warning:hover,
a.btn-admin-warning:focus,
a.btn-admin-warning:active,
a.btn-admin-warning:visited {
    color: #ffffff !important;
    text-decoration: none !important;
}

/* Force text visibility with high specificity - DEBUG */
.baker-body .btn-admin-primary,
.baker-body .btn-admin-primary *,
.baker-body a.btn-admin-primary,
.baker-body a.btn-admin-primary * {
    color: #ffffff !important;
}

.baker-body .btn-admin-secondary,
.baker-body .btn-admin-secondary *,
.baker-body a.btn-admin-secondary,
.baker-body a.btn-admin-secondary *,
.baker-body .btn-admin-light,
.baker-body .btn-admin-light *,
.baker-body a.btn-admin-light,
.baker-body a.btn-admin-light * {
    color: #333333 !important;
}

.baker-body .btn-admin-warning,
.baker-body .btn-admin-warning *,
.baker-body a.btn-admin-warning,
.baker-body a.btn-admin-warning * {
    color: #ffffff !important;
}

/* Ensure all admin buttons in baker pages are properly styled */
.baker-body [class*="btn-admin"] {
    min-height: 38px;
    display: inline-flex !important;
    align-items: center !important;
    justify-content: center !important;
    gap: 0.5rem;
    font-weight: 600 !important;
}

/* ==================== Badge Styles (Copied from admin-styles.css) ==================== */
.badge-admin-role {
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-weight: 600;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

.badge-admin-role.admin {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%);
    color: white;
    border: 1px solid #b22424;
}

.badge-admin-role.manager {
    background: linear-gradient(135deg, #FFEAA5 0%, #FFE89A 100%);
    color: #333;
    border: 1px solid #FFEAA5;
}

.badge-admin-role.baker {
    background: linear-gradient(135deg, #EEF5DB 0%, #E8F2D3 100%);
    color: #333;
    border: 1px solid #EEF5DB;
}

.badge-admin-role.cashier {
    background: linear-gradient(135deg, #FFE89A 0%, #FFEAA5 100%);
    color: #333;
    border: 1px solid #FFE89A;
}

/* Status Badges */
.badge-status {
    padding: 0.25rem 0.75rem;
    border-radius: 15px;
    font-weight: 600;
    font-size: 0.75rem;
    text-transform: uppercase;
}

.badge-status.active {
    background-color: #28a745;
    color: white;
}

.badge-status.inactive {
    background-color: #6c757d;
    color: white;
}

.badge-status.pending {
    background-color: #ffc107;
    color: #333;
}

.badge-status.completed {
    background-color: #28a745;
    color: white;
}

.badge-status.cancelled {
    background-color: #dc3545;
    color: white;
}

/* ==================== Card Styles ==================== */
.kpi-card {
    background: linear-gradient(135deg, #FFFFFF 0%, #F8F9FA 100%);
    border: 2px solid #EEF5DB;
    border-radius: 12px;
    padding: 1.5rem;
    text-align: center;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.kpi-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
    border-color: #b22424;
}

.kpi-card .kpi-icon {
    font-size: 2.5rem;
    color: #b22424;
    margin-bottom: 1rem;
}

.kpi-card .kpi-value {
    font-size: 2rem;
    font-weight: bold;
    color: #333;
    margin-bottom: 0.5rem;
}

.kpi-card .kpi-label {
    font-size: 1rem;
    color: #666;
    font-weight: 500;
}

.admin-card-body {
    padding: 1.5rem;
}

/* ==================== Table Styles ==================== */
.table th {
    background-color: #FFEAA5;
    color: #333;
    font-weight: 600;
    border: none;
}

.table td {
    vertical-align: middle;
    border-color: #EEF5DB;
}

.table-striped tbody tr:nth-of-type(odd) {
    background-color: rgba(238, 245, 219, 0.3);
}

/* ==================== Form Styles ==================== */
.form-control:focus {
    border-color: #b22424;
    box-shadow: 0 0 0 0.25rem rgba(178, 36, 36, 0.25);
}

.form-select:focus {
    border-color: #b22424;
    box-shadow: 0 0 0 0.25rem rgba(178, 36, 36, 0.25);
}

/* ==================== Alert Overrides ==================== */
.alert-success {
    background-color: #d4edda;
    border-color: #c3e6cb;
    color: #155724;
}

.alert-danger {
    background-color: #f8d7da;
    border-color: #f5c6cb;
    color: #721c24;
}

.baker-card {
    background: linear-gradient(135deg, #ffffff 0%, #fafafa 100%);
    border-left: 5px solid #b22424;
    border-top: 3px solid #FFEAA5;
    box-shadow: 0 6px 25px rgba(178, 36, 36, 0.12);
    position: relative;
}

.baker-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 35px rgba(178, 36, 36, 0.2);
}

.baker-card::before {
    content: "🍞";
    position: absolute;
    top: 1rem;
    right: 1rem;
    font-size: 1.5rem;
    opacity: 0.3;
}

.baker-card h3 {
    color: #b22424;
    border-bottom: 2px solid #FFEAA5;
    padding-bottom: 0.5rem;
    margin-bottom: 1rem;
}

.baker-highlight {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-weight: bold;
}

.baker-production-status {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
}

.baker-status-item {
    background: white;
    padding: 1rem;
    border-radius: 8px;
    flex: 1;
    text-align: center;
    border: 2px solid #FFEAA5;
    transition: all 0.3s ease;
}

.baker-status-item:hover {
    border-color: #b22424;
    transform: translateY(-2px);
}

.baker-status-number {
    font-size: 1.5rem;
    font-weight: bold;
    color: #b22424;
    display: block;
}

.baker-status-label {
    color: #666;
    font-size: 0.85rem;
    text-transform: uppercase;
}

.baker-recipe-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
    margin-top: 2rem;
}

.baker-recipe-card {
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    border: 2px solid #FFEAA5;
    transition: all 0.3s ease;
}

.baker-recipe-card:hover {
    border-color: #b22424;
    box-shadow: 0 8px 25px rgba(178, 36, 36, 0.15);
}

.baker-recipe-title {
    color: #b22424;
    font-weight: bold;
    margin-bottom: 0.5rem;
}

.baker-recipe-time {
    color: #666;
    font-size: 0.9rem;
    background-color: #EEF5DB;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    display: inline-block;
}

/* Baker specific buttons */
.baker-btn {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%);
    border: none;
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
}

.baker-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(254, 95, 85, 0.4);
}

.baker-btn.production {
    background: linear-gradient(135deg, #FFEAA5 0%, #FFE89A 100%);
    color: #333;
}

.baker-btn.production:hover {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%);
    color: white;
}

/* ==================== MISSING CARD HEADER STYLES ==================== */
/* Sea-Style Card Headers */
.card-header-sea-primary {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%) !important;
    color: #fff !important;
    border-bottom: 1px solid rgba(255, 255, 255, 0.2) !important;
    padding: 1rem 1.25rem !important;
    font-weight: 600 !important;
}

.card-header-sea-secondary {
    background: linear-gradient(135deg, #FFEAA5 0%, #FFE072 100%) !important;
    color: #333 !important;
    border-bottom: 1px solid rgba(51, 51, 51, 0.1) !important;
    padding: 1rem 1.25rem !important;
    font-weight: 600 !important;
}

.card-header-sea-light {
    background: linear-gradient(135deg, #EEF5DB 0%, #E8F0CF 100%) !important;
    color: #333 !important;
    border-bottom: 1px solid rgba(51, 51, 51, 0.1) !important;
    padding: 1rem 1.25rem !important;
    font-weight: 600 !important;
}

/* Admin Card Body Styling */
.admin-card-body {
    padding: 1.25rem !important;
    background: rgba(238, 245, 219, 0.05) !important;
    border-radius: 0 0 8px 8px !important;
}

--- End of File ---

File: .\public\css\cashier-styles.css
/* ==================== Cashier Dashboard Styles ==================== */
/* Based on Sea-style Design System */
/* Color Scheme: 50% EEF5DB, 30% FFEAA5, 10% FE5F55 */

/* ==================== Body & Layout ==================== */
.cashier-body {
    background: linear-gradient(135deg, #EEF5DB 0%, #F0F6E8 100%);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    color: #333;
    line-height: 1.6;
}

/* ==================== Header Styles (Following sea-styles.css pattern) ==================== */
.cashier-header {
    background-color: #FFEAA5;
    color: #333;
    padding: 1rem;
    border-bottom: 3px solid #b22424;
    box-shadow: 0 2px 5px rgba(254, 95, 85, 0.1);
}

.header-logo {
    height: 45px;
    width: 45px;
    border-radius: 50%;
    border: 2px solid #b22424;
    transition: all 0.2s ease;
}

.header-logo:hover {
    border-color: #b22424;
    box-shadow: 0 2px 8px rgba(254, 95, 85, 0.3);
}

.logo {
    font-size: 1.5rem;
    font-weight: bold;
    color: #b22424;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
}

.company-name {
    font-size: 1rem;
    color: #333;
    margin-top: 0.25rem;
}

.user-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.role-badge {
    background-color: #b22424;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.user-name {
    color: #333;
    font-weight: 500;
}

.logout-btn {
    background-color: #b22424;
    color: white;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    text-decoration: none;
    font-weight: bold;
    font-size: 0.9rem;
    transition: all 0.3s ease;
}

.logout-btn:hover {
    background-color: #E54E45;
    transform: translateY(-1px);
    box-shadow: 0 4px 10px rgba(254, 95, 85, 0.3);
}

/* ==================== Navigation Styles (Following sea-styles.css pattern) ==================== */
.cashier-nav {
    background-color: #FFEAA5;
    padding: 0.5rem 0;
    border-bottom: 2px solid #EEF5DB;
    position: sticky;
    top: 0;
    z-index: 1020;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.cashier-nav ul {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    gap: 1rem;
    padding: 0 1rem;
    flex-wrap: wrap;
}

.cashier-nav a {
    color: #333;
    text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    transition: all 0.3s ease;
    border: 2px solid transparent;
    font-weight: 500;
}

.cashier-nav a:hover {
    background-color: #b22424;
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 2px 5px rgba(254, 95, 85, 0.3);
}

.cashier-nav a.active {
    background-color: #b22424;
    color: white;
    border: 2px solid #333;
    box-shadow: 0 2px 5px rgba(254, 95, 85, 0.4);
}

/* ==================== Main Content ==================== */
.cashier-content {
    flex: 1;
    padding: 2rem;
    background-color: #EEF5DB;
}

/* Ensure form text is visible on all pages */
.cashier-content input,
.cashier-content select,
.cashier-content textarea {
    color: #333 !important;
    background-color: #fff !important;
}

.cashier-content ::placeholder {
    color: #666 !important;
}

/* ==================== Footer ==================== */
.cashier-footer {
    background-color: #FFEAA5;
    color: #333;
    text-align: center;
    padding: 1.5rem;
    border-top: 3px solid #FE5F55;
    box-shadow: 0 -2px 5px rgba(254, 95, 85, 0.1);
}

/* ==================== Quick Actions (Global, non-nested) ==================== */
.quick-actions-section { margin-bottom: 1.25rem; }

.quick-actions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
    gap: 0.75rem;
}

.cashier-action-btn {
    background: #fff;
    border: 2px solid #FFEAA5;
    border-radius: 8px;
    padding: 0.9rem 0.9rem;
    text-align: center;
    transition: all 0.2s ease;
    text-decoration: none;
    display: block;
    color: #333;
}

.cashier-action-btn:hover {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%);
    color: #fff;
    border-color: #b22424;
    transform: translateY(-2px);
    box-shadow: 0 3px 10px rgba(254, 95, 85, 0.25);
}

.cashier-action-btn i {
    font-size: 1.4rem;
    margin-bottom: 0.4rem;
    display: block;
    color: #b22424;
    transition: color 0.2s ease;
}

.cashier-action-btn:hover i { color: #fff; }

.action-label {
    font-weight: 600;
    font-size: 0.95rem;
    margin-bottom: 0.15rem;
    display: block;
}

.cashier-action-btn small {
    color: #666;
    font-size: 0.8rem;
    transition: color 0.2s ease;
}

.cashier-action-btn:hover small { color: rgba(255, 255, 255, 0.9); }

.kpi-value {
    font-size: 1.75rem;
    font-weight: 800;
    color: #111;
    margin: 0.25rem 0 0.35rem 0;
}

.kpi-label {
    font-size: 0.8rem;
    font-weight: 700;
    color: #666;
    text-transform: uppercase;
    letter-spacing: 0.35px;
}

.kpi-icon {
    font-size: 1.75rem;
    color: #FFEAA5;
    opacity: 0.9;
}

/* Dashboard KPI cards */
.dashboard-cards {
    display: grid;
    grid-template-columns: repeat(3, minmax(0, 1fr));
    gap: 0.9rem;
}

.cashier-kpi-card {
    background: #fff;
    border: 1px solid #FFEAA5;
    border-radius: 10px;
    padding: 0.9rem 1rem;
    box-shadow: 0 2px 8px rgba(254, 95, 85, 0.08);
}

.cashier-kpi-card .kpi-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.cashier-kpi-card .kpi-content {
    display: flex;
    flex-direction: column;
}

/* (Removed oversized quick actions; using compact global styles above) */

/* ==================== Buttons (Following sea-styles.css pattern) ==================== */
.btn, .cashier-btn-primary {
    background-color: #FE5F55;
    color: white;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: bold;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-block;
    text-align: center;
}

.btn:hover, .cashier-btn-primary:hover {
    background-color: #E54E45;
    transform: translateY(-1px);
    box-shadow: 0 4px 10px rgba(254, 95, 85, 0.3);
    color: white;
}

.cashier-btn-secondary {
    background-color: #FFEAA5;
    color: #333;
    border: 2px solid #E6B800;
}

.cashier-btn-secondary:hover {
    background-color: #FFE17A;
    border-color: #E6B800;
    transform: translateY(-1px);
    box-shadow: 0 4px 10px rgba(230, 184, 0, 0.3);
}

/* ==================== POS Section ==================== */
.cashier-product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
}

.cashier-product-item {
    background: white;
    padding: 1rem;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.2s ease;
    border: 2px solid #FFEAA5;
    box-shadow: 0 2px 5px rgba(254, 95, 85, 0.1);
    height: 100%;
    display: flex;
    flex-direction: column;
}

.cashier-product-item:hover {
    background: #FFF6D7;
    border-color: #b22424;
    transform: translateY(-2px);
    box-shadow: 0 6px 14px rgba(254, 95, 85, 0.2);
}

/* Product media to occupy space */
.cashier-product-media {
    height: 140px;
    border-radius: 8px;
    margin-bottom: 0.75rem;
    background: linear-gradient(135deg, #FFEAA5 0%, #EEF5DB 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: #b22424;
    font-size: 2rem;
}

.cashier-product-media img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 8px;
}

.product-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 0.5rem;
}

.product-details .price {
    color: #FE5F55;
    font-weight: 700;
    font-size: 1.1rem;
}

/* ==================== Order Type Badges ==================== */
.badge-order-type {
    padding: 0.5rem 1rem;
    border-radius: 15px;
    font-weight: bold;
    font-size: 0.8rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}


/* Map order-type to admin sea-style colors */
.badge-order-type.dine_in { /* light green */
    background-color: #EEF5DB;
    color: #333;
    border: 1px solid #3333;
}

.badge-order-type.takeout { /* coral red */
    background-color: #b22424;
    color: #fff;
}

.badge-order-type.delivery { /* yellow */
    background-color: #FFEAA5;
    color: #333;
    border: 1px solid #E6B800;
}

/* Status badges for dashboard tables */
.badge-status {
    display: inline-block;
    padding: 0.35rem 0.6rem;
    border-radius: 14px;
    font-weight: 600;
    font-size: 0.8rem;
}
.badge-status.completed { background: #EEF5DB; color: #333; border: 1px solid #3333; }
.badge-status.pending { background: #FFEAA5; color: #333; border: 1px solid #E6B800; }
.badge-status.cancelled { background: #FE5F55; color: #fff; }
.badge-status.cancelled { background: #b22424; color: #fff; }

/* Ensure recent sales/table area can span full width */
.table-responsive.w-100 { width: 100% !important; }
.table-cashier.w-100 { width: 100% !important; }

/* ==================== Admin Button Styles for Cashier ==================== */
/* Import admin button styles for consistency across the application */

.btn-admin-primary {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%);
    border: 2px solid #333;
    color: white;
    font-weight: 600;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
}

.btn-admin-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(178, 36, 36, 0.4);
    color: white;
    text-decoration: none;
}

.btn-admin-primary:disabled {
    opacity: 0.6;
    transform: none;
    cursor: not-allowed;
    box-shadow: none;
}

.btn-admin-secondary {
    background: linear-gradient(135deg, #FFEAA5 0%, #FFE072 100%);
    border: 2px solid #FFEAA5;
    color: #333;
    font-weight: 600;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
}

.btn-admin-secondary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(255, 234, 165, 0.4);
    color: #333;
    border-color: #333;
    text-decoration: none;
}

.btn-admin-light {
    background: linear-gradient(135deg, #EEF5DB 0%, #E8F0CF 100%);
    border: 2px solid #333;
    color: #333;
    font-weight: 600;
    padding: .5rem 1rem;
    border-radius: 8px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
}

.btn-admin-light:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(238, 245, 219, 0.4);
    color: #333;
    text-decoration: none;
    border-color: #b22424;
}

.btn-admin-warning {
    background: transparent;
    border: 2px solid #b22424;
    color: #b22424;
    font-weight: 600;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
}

.btn-admin-warning:hover {
    background: #b22424;
    color: white;
    transform: translateY(-1px);
    text-decoration: none;
}

/* Small button variants */
.btn-admin-primary.btn-sm,
.btn-admin-secondary.btn-sm,
.btn-admin-light.btn-sm,
.btn-admin-warning.btn-sm {
    padding: 0.35rem 0.7rem;
    font-size: 0.8rem;
    border-radius: 5px;
}

/* ==================== Tables ==================== */
.cashier-table {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 15px rgba(254, 95, 85, 0.15);
}

.cashier-table th {
    background-color: #FFEAA5;
    color: #333;
    font-weight: bold;
    padding: 1rem;
    border: none;
}

.cashier-table td {
    padding: 1rem;
    color: #333;
    border-bottom: 1px solid #EEF5DB;
}

.cashier-table tbody tr:hover {
    background-color: #EEF5DB;
}

/* ==================== Consistent Tables ==================== */
.table-cashier {
    background: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(254, 95, 85, 0.1);
    border: 1px solid #FFEAA5;
}

.table-cashier th {
    background: linear-gradient(135deg, #FFEAA5 0%, #FFE68A 100%);
    color: #333;
    font-weight: 600;
    padding: 1rem 0.8rem;
    border: none;
    font-size: 0.9rem;
}

.table-cashier td {
    padding: 0.8rem;
    color: #333;
    border-bottom: 1px solid #EEF5DB;
    vertical-align: middle;
    font-size: 0.9rem;
}

.table-cashier tbody tr:hover {
    background-color: #EEF5DB;
}

.table-cashier tbody tr:last-child td {
    border-bottom: none;
}

/* ==================== Filter Controls ==================== */
.filter-section {
    background: white;
    border-radius: 8px;
    padding: 1.2rem;
    margin-bottom: 1.5rem;
    border: 1px solid #FFEAA5;
    box-shadow: 0 2px 8px rgba(254, 95, 85, 0.1);
}

.filter-row {
    display: flex;
    gap: 1rem;
    align-items: end;
    flex-wrap: wrap;
}

.filter-group {
    flex: 1;
    min-width: 150px;
}

/* ==================== Page Layout Consistency ==================== */
.page-header {
    background: white;
    border-radius: 10px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    border-left: 4px solid #b22424;
    box-shadow: 0 2px 10px rgba(254, 95, 85, 0.1);
}

.page-title {
    font-size: 1.8rem;
    font-weight: 700;
    color: #b22424;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.page-subtitle {
    color: #666;
    margin: 0.5rem 0 0 0;
    font-size: 0.95rem;
}

.content-card {
    background: white;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(254, 95, 85, 0.1);
    border: 1px solid #FFEAA5;
    margin-bottom: 1.5rem;
}

.content-card-header {
    border-bottom: 2px solid #FFEAA5;
    padding-bottom: 1rem;
    margin-bottom: 1.5rem;
}

.content-card-title {
    font-size: 1.3rem;
    font-weight: 600;
    color: #b22424;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

/* ==================== Consistent Buttons ==================== */
.btn-cashier {
    background: linear-gradient(135deg, #b22424 0%, #E54E45 100%);
    color: white;
    border: none;
    padding: 0.6rem 1.2rem;
    border-radius: 6px;
    font-weight: 600;
    font-size: 0.9rem;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
}

.btn-cashier:hover {
    background: linear-gradient(135deg, #E54E45 0%, #D43F35 100%);
    transform: translateY(-1px);
    box-shadow: 0 3px 8px rgba(254, 95, 85, 0.3);
    color: white;
}

.btn-cashier-secondary {
    background: linear-gradient(135deg, #FFEAA5 0%, #FFE17A 100%);
    color: #333;
    border: 1px solid #E6B800;
}

.btn-cashier-secondary:hover {
    background: linear-gradient(135deg, #FFE17A 0%, #FFEAA5 100%);
    color: #333;
    border-color: #D4A700;
}

.btn-cashier-outline {
    background: transparent;
    color: #b22424;
    border: 2px solid #b22424;
}

.btn-cashier-outline:hover {
    background: #b22424;
    color: white;
}

/* ==================== Form Controls ==================== */
.form-control-cashier {
    border: 2px solid #FFEAA5;
    border-radius: 6px;
    padding: 0.6rem 0.8rem;
    font-size: 0.95rem;
    transition: border-color 0.3s ease;
}

.form-control-cashier:focus {
    border-color: #b22424;
    box-shadow: 0 0 0 3px rgba(254, 95, 85, 0.1);
    outline: none;
}

.form-label-cashier {
    font-weight: 600;
    color: #333;
    margin-bottom: 0.5rem;
    display: block;
}
@media (max-width: 768px) {
    .cashier-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }
    
    .cashier-nav ul {
        justify-content: center;
    }
    
    .cashier-content {
        padding: 1rem;
    }
    
    .dashboard-cards {
        grid-template-columns: 1fr;
    }
    
    .cashier-product-grid {
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    }
}

/* Small button variant for compact links-as-buttons */
.btn-cashier.btn-sm, .btn-cashier-secondary.btn-sm, .btn-cashier-outline.btn-sm {
    padding: 0.35rem 0.7rem;
    font-size: 0.8rem;
    border-radius: 5px;
}

--- End of File ---

File: .\public\css\favicon-circular.css
/* Circular Favicon CSS Approach */
.favicon-circular {
    border-radius: 50%;
    overflow: hidden;
}

/* For browser tab favicons to appear circular */
.favicon-preview {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    overflow: hidden;
    background: #EEF5DB;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

.favicon-preview img {
    width: 80%;
    height: 80%;
    object-fit: contain;
}

--- End of File ---

File: .\public\css\sea-styles.css
/* Sea++ Bakery Management System - General Styles */
/* Color Scheme: 50% EEF5DB, 30% FFEAA5, 10% FE5F55 */

/* General Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body { 
    font-family: 'Arial', sans-serif; 
    margin: 0; 
    padding: 0; 
    min-height: 100vh; 
    display: flex; 
    flex-direction: column; 
    background-color: #EEF5DB; 
    color: #333;
    line-height: 1.6;
}

/* Header Styles */
header { 
    background-color: #FFEAA5; 
    color: #333; 
    padding: 1rem; 
    display: flex; 
    justify-content: space-between; 
    align-items: center;
    border-bottom: 3px solid #b22424;
    box-shadow: 0 2px 5px rgba(178, 36, 36, 0.1);
}

.logo { 
    font-size: 1.5rem; 
    font-weight: bold; 
    color: #b22424;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
}

.company-name { 
    font-size: 1.2rem; 
    color: #333;
    margin-top: 0.25rem;
}

.user-info { 
    display: flex; 
    align-items: center; 
    gap: 1rem; 
}

.role-badge { 
    background-color: #b22424; 
    color: white; 
    padding: 0.25rem 0.75rem; 
    border-radius: 15px; 
    font-size: 0.8rem; 
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

/* Navigation Styles */
nav { 
    background-color: #FFEAA5; 
    padding: 0.5rem 0; 
    border-bottom: 2px solid #EEF5DB; 
}

nav ul { 
    list-style: none; 
    margin: 0; 
    padding: 0; 
    display: flex; 
    gap: 1rem; 
    padding: 0 1rem; 
    flex-wrap: wrap;
}

nav a { 
    color: #333; 
    text-decoration: none; 
    padding: 0.5rem 1rem; 
    border-radius: 6px; 
    transition: all 0.3s ease;
    border: 2px solid transparent;
    font-weight: 500;
}

nav a:hover { 
    background-color: #b22424; 
    color: white; 
    transform: translateY(-1px);
    box-shadow: 0 2px 5px rgba(178, 36, 36, 0.3);
}

nav a.active { 
    background-color: #b22424; 
    color: white; 
    border: 2px solid #333; 
    box-shadow: 0 2px 5px rgba(178, 36, 36, 0.4);
}

/* Main Content Styles */
main { 
    flex: 1; 
    padding: 2rem; 
    background-color: #EEF5DB; 
}

.content { 
    flex: 1; 
    padding: 2rem; 
    max-width: 500px; 
    margin: 0 auto;
}

.content-header { 
    margin-bottom: 2rem; 
}

.content-header h1 { 
    margin: 0; 
    color: #b22424;
    font-size: 2rem;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
}

/* Card Styles */
.dashboard-cards { 
    display: grid; 
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
    gap: 1.5rem; 
    margin-bottom: 2rem; 
}

.card { 
    background: white; 
    padding: 1.5rem; 
    border-radius: 12px; 
    box-shadow: 0 4px 15px rgba(178, 36, 36, 0.15); 
    border-left: 5px solid #b22424;
    border-top: 2px solid #FFEAA5;
    transition: all 0.3s ease;
}

.card:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(178, 36, 36, 0.2);
}

.card h3 { 
    margin-top: 0; 
    color: #b22424;
    margin-bottom: 0.5rem;
}

.card p {
    color: #666;
    margin-bottom: 1rem;
}

.card a { 
    color: #b22424; 
    text-decoration: none; 
    font-weight: bold;
    border-bottom: 2px solid transparent;
    transition: border-color 0.3s ease;
}

.card a:hover { 
    border-bottom-color: #b22424;
}

/* Form Styles */
.form-container { 
    background: white; 
    padding: 2rem; 
    border-radius: 12px; 
    box-shadow: 0 4px 20px rgba(178, 36, 36, 0.15);
    border-top: 4px solid #b22424;
}

.form-group { 
    margin-bottom: 1.5rem; 
}

label { 
    display: block; 
    margin-bottom: 0.5rem; 
    font-weight: bold;
    color: #333;
}

input, select, textarea { 
    width: 100%; 
    padding: 0.75rem; 
    border: 2px solid #FFEAA5; 
    border-radius: 6px; 
    font-size: 1rem;
    transition: border-color 0.3s ease;
    background-color: #fff;
}

input:focus, select:focus, textarea:focus {
    outline: none;
    border-color: #b22424;
    box-shadow: 0 0 0 3px rgba(178, 36, 36, 0.1);
}

/* Button Styles */
button, .btn { 
    width: 100%; 
    background-color: #b22424; 
    color: white; 
    padding: 0.75rem 1.5rem; 
    border: none; 
    border-radius: 6px; 
    cursor: pointer; 
    font-size: 1rem;
    font-weight: bold;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-block;
    text-align: center;
}

button:hover, .btn:hover { 
    background-color: #E54E45;
    transform: translateY(-1px);
    box-shadow: 0 4px 10px rgba(178, 36, 36, 0.3);
}

.logout-btn { 
    width: auto;
    background-color: #b22424; 
    color: white; 
    padding: 0.5rem 1rem; 
    border: none; 
    border-radius: 6px; 
    cursor: pointer; 
    text-decoration: none;
    font-weight: bold;
    font-size: 0.9rem;
}

/* Link Styles */
.switch-link { 
    text-align: center; 
    margin-top: 1.5rem; 
}

.switch-link a { 
    color: #b22424; 
    text-decoration: none;
    font-weight: bold;
    border-bottom: 2px solid transparent;
    transition: border-color 0.3s ease;
}

.switch-link a:hover {
    border-bottom-color: #b22424;
}

/* Footer Styles */
footer { 
    background-color: #FFEAA5; 
    color: #333; 
    text-align: center; 
    padding: 1.5rem; 
    border-top: 3px solid #b22424;
    box-shadow: 0 -2px 5px rgba(178, 36, 36, 0.1);
}

/* Utility Classes */
.text-center { text-align: center; }
.text-primary { color: #b22424; }
.bg-primary { background-color: #b22424; }
.bg-secondary { background-color: #FFEAA5; }
.bg-light { background-color: #EEF5DB; }

/* Responsive Design */
@media (max-width: 768px) {
    header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }
    
    nav ul {
        justify-content: center;
    }
    
    .content {
        padding: 1rem;
    }
    
    .dashboard-cards {
        grid-template-columns: 1fr;
    }
}

/* Animation Classes */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.fade-in {
    animation: fadeIn 0.5s ease-out;
}

--- End of File ---

File: .\resources\css\app.css
@import 'tailwindcss';

@source '../../vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php';
@source '../../storage/framework/views/*.php';
@source '../**/*.blade.php';
@source '../**/*.js';

@theme {
    --font-sans: 'Instrument Sans', ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
        'Segoe UI Symbol', 'Noto Color Emoji';
}


--- End of File ---

File: .\resources\js\app.js
import './bootstrap';


--- End of File ---

File: .\resources\js\bootstrap.js
import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';


--- End of File ---

File: .\resources\views\admin\analytics\index.blade.php
@extends('layouts.admin')
@section('title', 'Analytics Dashboard')
@section('page-title', 'Analytics Dashboard')

@section('content')
<div class="container-fluid">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3 mb-0 text-muted-sea">
      <i class="fas fa-chart-line me-2"></i> Analytics Dashboard
    </h1>
  </div>

  <div class="card admin-filter-card shadow mb-4">
    <div class="card-body admin-card-body">
      <form method="GET" class="row g-3 align-items-end">
        <div class="col-md-3">
          <label class="form-label">From</label>
          <input type="date" name="date_from" class="form-control" value="{{ $dateFrom }}">
        </div>
        <div class="col-md-3">
          <label class="form-label">To</label>
          <input type="date" name="date_to" class="form-control" value="{{ $dateTo }}">
        </div>
        <div class="col-md-2">
          <button type="submit" class="btn-admin-secondary"><i class="fas fa-filter me-1"></i> Apply</button>
        </div>
      </form>
    </div>
  </div>

  <div class="row mb-4">
    <div class="col-md-3">
      <div class="card kpi-card">
        <div class="card-body d-flex justify-content-between align-items-center">
          <div class="text-sea-primary">
            <i class="fas fa-peso-sign fa-2x"></i>
          </div>
          <div class="flex-grow-1 text-end">
            <h3 class="mb-0">{{ '₱' . number_format($totalSales, 2) }}</h3>
            <p class="text-muted mb-0">Total Sales</p>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card kpi-card">
        <div class="card-body d-flex justify-content-between align-items-center">
          <div class="text-sea-primary">
            <i class="fas fa-shopping-cart fa-2x"></i>
          </div>
          <div class="flex-grow-1 text-end">
            <h3 class="mb-0">{{ number_format($totalTransactions) }}</h3>
            <p class="text-muted mb-0">Transactions</p>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card kpi-card">
        <div class="card-body d-flex justify-content-between align-items-center">
          <div class="text-sea-primary">
            <i class="fas fa-calculator fa-2x"></i>
          </div>
          <div class="flex-grow-1 text-end">
            <h3 class="mb-0">{{ '₱' . number_format($averageTransaction, 2) }}</h3>
            <p class="text-muted mb-0">Avg. Transaction</p>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card kpi-card">
        <div class="card-body d-flex justify-content-between align-items-center">
          <div class="text-sea-primary">
            <i class="fas fa-box-open fa-2x"></i>
          </div>
          <div class="flex-grow-1 text-end">
            <h3 class="mb-0">{{ number_format($lowStockCount) }}</h3>
            <p class="text-muted mb-0">Low Stock Items</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="row g-3 mb-4">
    <div class="col-lg-8">
      <div class="card kpi-card shadow h-100">
        <div class="card-body admin-card-body">
          <h5 class="mb-3"><i class="fas fa-chart-area me-2"></i> Sales by Day</h5>
          <canvas id="salesByDayChart" height="110"></canvas>
        </div>
      </div>
    </div>
    <div class="col-lg-4">
      <div class="card kpi-card shadow h-100">
        <div class="card-body admin-card-body">
          <h5 class="mb-3"><i class="fas fa-chart-pie me-2"></i> Production Status</h5>
          <canvas id="productionStatusChart" height="110"></canvas>
        </div>
      </div>
    </div>
  </div>

  <div class="row g-3 mb-4">
    <div class="col-lg-6">
      <div class="card kpi-card shadow h-100">
        <div class="card-body admin-card-body">
          <h5 class="mb-3"><i class="fas fa-ranking-star me-2"></i> Top Products</h5>
          <canvas id="topProductsChart" height="120"></canvas>
        </div>
      </div>
    </div>
    <div class="col-lg-6">
      <div class="card kpi-card shadow h-100">
        <div class="card-body admin-card-body">
          <h5 class="mb-3"><i class="fas fa-clock me-2"></i> Sales by Hour</h5>
          <canvas id="salesByHourChart" height="120"></canvas>
        </div>
      </div>
    </div>
  </div>

  <div class="row g-3 mb-4">
    <div class="col-12">
      <div class="card kpi-card text-center">
        <div class="card-body">
          <div class="text-muted">Estimated Inventory Valuation (price × on-hand)</div>
          <h3 class="mt-2">₱{{ number_format($inventoryValuation, 2) }}</h3>
        </div>
      </div>
    </div>
  </div>
</div>

@push('scripts')
<script>
  // Colors following Sea-style palette
  const seaGreen = '#EEF5DB';
  const seaYellow = '#FFEAA5';
  const seaRed = '#FE5F55';
  const seaBlue = '#3B82F6';

  const salesByDay = @json($chart['salesByDay']);
  const salesByHour = @json($chart['salesByHour']);
  const topProducts = @json($chart['topProducts']);
  const productionStatuses = @json($chart['productionStatuses']);

  // Sales by Day (line)
  new Chart(document.getElementById('salesByDayChart'), {
    type: 'line',
    data: {
      labels: salesByDay.labels,
      datasets: [{
        label: 'Sales',
        data: salesByDay.data,
        fill: false,
        borderColor: seaRed,
        backgroundColor: seaRed,
        tension: 0.3,
      }]
    },
    options: { responsive: true, plugins: { legend: { display: false } } }
  });

  // Top Products (bar)
  new Chart(document.getElementById('topProductsChart'), {
    type: 'bar',
    data: {
      labels: topProducts.labels,
      datasets: [{
        label: 'Qty Sold',
        data: topProducts.data,
        backgroundColor: seaYellow,
        borderColor: '#D4AF37',
        borderWidth: 1
      }]
    },
    options: { responsive: true, plugins: { legend: { display: false } }, scales: { y: { beginAtZero: true } } }
  });

  // Sales by Hour (bar)
  new Chart(document.getElementById('salesByHourChart'), {
    type: 'bar',
    data: {
      labels: salesByHour.labels,
      datasets: [{
        label: 'Sales',
        data: salesByHour.data,
        backgroundColor: seaGreen,
        borderColor: '#9CA3AF',
        borderWidth: 1
      }]
    },
    options: { responsive: true, plugins: { legend: { display: false } }, scales: { y: { beginAtZero: true } } }
  });

  // Production Status (doughnut)
  new Chart(document.getElementById('productionStatusChart'), {
    type: 'doughnut',
    data: {
      labels: productionStatuses.labels,
      datasets: [{
        data: productionStatuses.data,
        backgroundColor: [seaRed, seaYellow, seaGreen, seaBlue],
        hoverOffset: 4
      }]
    },
    options: { responsive: true, plugins: { legend: { position: 'bottom' } } }
  });
</script>
@endpush
@endsection


--- End of File ---

File: .\resources\views\admin\audit-logs\index.blade.php
@extends('layouts.admin')
@section('title', 'Audit Logs')
@section('page-title', 'Audit Logs')

@section('content')
<div class="container-fluid">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3 mb-0 text-muted-sea">
      <i class="fas fa-history me-2"></i> Audit Logs
    </h1>
    <div class="btn-group">
      <a href="{{ route('admin.audit-logs.export') }}" class="btn-admin-light me-2">
        <i class="fas fa-file-csv me-2"></i> CSV
      </a>
      <a href="{{ route('admin.audit-logs.export-pdf', request()->all()) }}" class="btn-admin-primary">
        <i class="fas fa-file-pdf me-2"></i> PDF
      </a>
    </div>
  </div>

  <div class="card admin-filter-card shadow mb-4">
    <div class="card-body admin-card-body">
      <form method="GET" class="row g-3 align-items-end">
        <div class="col-md-2">
          <label class="form-label">Action</label>
          <select name="action" class="form-select">
            <option value="">All</option>
            @foreach($actions as $a)
              <option value="{{ $a }}" {{ request('action')===$a ? 'selected' : '' }}>{{ ucfirst($a) }}</option>
            @endforeach
          </select>
        </div>
        <div class="col-md-2">
          <label class="form-label">Table</label>
          <input type="text" name="table_name" class="form-control" value="{{ request('table_name') }}" placeholder="e.g., products">
        </div>
        <div class="col-md-2">
          <label class="form-label">User</label>
          <select name="user_id" class="form-select">
            <option value="">All</option>
            @foreach($users as $u)
              <option value="{{ $u->user_id }}" {{ request('user_id')==$u->user_id ? 'selected' : '' }}>{{ $u->username }}</option>
            @endforeach
          </select>
        </div>
        <div class="col-md-2">
          <label class="form-label">Date From</label>
          <input type="date" name="date_from" class="form-control" value="{{ request('date_from') }}">
        </div>
        <div class="col-md-2">
          <label class="form-label">Date To</label>
          <input type="date" name="date_to" class="form-control" value="{{ request('date_to') }}">
        </div>
        <div class="col-md-2">
          <label class="form-label">Search</label>
          <input type="text" name="search" class="form-control" value="{{ request('search') }}" placeholder="Notes, action, table">
        </div>
        <div class="col-md-3 d-flex align-items-end">
            <button type="submit" class="btn-admin-secondary"><i class="fas fa-filter me-1"></i> Apply</button>
            <button type="reset" onclick="window.location='{{ route('admin.audit-logs.index') }}'" class="btn-admin-light ms-2">
                <i class="fas fa-undo me-1"></i> Reset
            </button>        
        </div>
      </form>
    </div>
  </div>

  <div class="card kpi-card shadow">
    <div class="card-body admin-card-body">
      <div class="table-responsive">
        <table class="table table-borderless align-middle">
          <thead>
            <tr>
              <th>Date</th>
              <th>User</th>
              <th>Action</th>
              <th>Table</th>
              <th>Record ID</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            @forelse($logs as $log)
              <tr>
                <td>{{ $log->created_at->format('Y-m-d H:i') }}</td>
                <td>{{ $log->user->username ?? '—' }}</td>
                <td><span class="badge-admin-role {{ $log->action==='delete' ? 'admin' : ($log->action==='update' ? 'baker' : '') }}">{{ ucfirst($log->action) }}</span></td>
                <td>{{ $log->table_name ?? '—' }}</td>
                <td>{{ $log->record_id ?? '—' }}</td>
                <td>{{ $log->description }}</td>
              </tr>
            @empty
              <tr>
                <td colspan="6" class="text-center text-muted">No audit entries found.</td>
              </tr>
            @endforelse
          </tbody>
        </table>
      </div>
      <div class="d-flex justify-content-center mt-4">
        {{ $logs->links('vendor.pagination.admin') }}
      </div>
    </div>
  </div>
</div>
@endsection

--- End of File ---

File: .\resources\views\admin\audit-logs\pdf.blade.php
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Audit Logs</title>
    <style>
        * { box-sizing: border-box; }
        body { font-family: DejaVu Sans, Arial, Helvetica, sans-serif; font-size: 12px; color: #111827; margin: 16px; }
        h1, h2, h3, h4, h5 { margin: 0; }
        .muted { color: #6b7280; }
        .report-header { margin-bottom: 14px; }
        .period { font-size: 11px; color: #6b7280; margin-top: 4px; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #e5e7eb; padding: 6px 8px; }
        thead th { background: #f9fafb; font-weight: 600; }
        .text-end { text-align: right; }
        .nowrap { white-space: nowrap; }
    </style>
    <div style="text-align: center; margin-bottom: 18px;">
        <img src="{{ public_path('images/Arbee\'s_logo_round.png') }}" alt="Logo" style="height:72px; border: 2px solid black; border-radius: 50%;">
        <div style="font-size: 1.7em; font-weight: bold; margin-top: 8px; letter-spacing: 1px;">
            Arbee's Bakeshop
        </div>
    </div>
</head>
<body>
    <div class="report-header">
        <h2>Audit Logs</h2>
        @if($dateFrom || $dateTo)
          <div class="period">Period: <b>{{ $dateFrom ?? '...' }} to {{ $dateTo ?? '...' }}<b></div>
        @endif
    </div>

    <table>
        <thead>
            <tr>
                <th class="nowrap">Date</th>
                <th>User</th>
                <th>Action</th>
                <th>Table</th>
                <th class="nowrap">Record ID</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @forelse($logs as $log)
                <tr>
                    <td class="nowrap">{{ \Illuminate\Support\Carbon::parse($log->created_at)->format('Y-m-d H:i') }}</td>
                    <td>{{ optional($log->user)->username }}</td>
                    <td>{{ ucfirst($log->action) }}</td>
                    <td>{{ $log->table_name }}</td>
                    <td class="nowrap">{{ $log->record_id }}</td>
                    <td>{{ $log->description }}</td>
                </tr>
            @empty
                <tr>
                    <td colspan="6" class="muted">No audit logs found.</td>
                </tr>
            @endforelse
        </tbody>
    </table>
</body>
</html>


--- End of File ---

File: .\resources\views\admin\audit-logs\show.blade.php
@extends('layouts.admin')
@section('title', 'Audit Log Details')
@section('page-title', 'Audit Log Details')

@section('content')
<div class="container-fluid">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3 mb-0 text-muted-sea">
      <i class="fas fa-history me-2"></i> Audit Entry
    </h1>
    <a href="{{ route('admin.audit-logs.index') }}" class="btn-admin-light"><i class="fas fa-arrow-left me-1"></i> Back</a>
  </div>

  <div class="card kpi-card shadow">
    <div class="card-body admin-card-body">
      <table class="table table-borderless">
        <tr><td><strong>Date:</strong></td><td>{{ $audit_log->created_at->format('Y-m-d H:i:s') }}</td></tr>
        <tr><td><strong>User:</strong></td><td>{{ $audit_log->user->username ?? '—' }}</td></tr>
        <tr><td><strong>Action:</strong></td><td>{{ ucfirst($audit_log->action) }}</td></tr>
        <tr><td><strong>Table:</strong></td><td>{{ $audit_log->table_name ?? '—' }}</td></tr>
        <tr><td><strong>Record ID:</strong></td><td>{{ $audit_log->record_id ?? '—' }}</td></tr>
        <tr><td><strong>Description:</strong></td><td>{{ $audit_log->description }}</td></tr>
        <tr>
          <td><strong>Old Values:</strong></td>
          <td><pre class="mb-0" style="white-space: pre-wrap;">{{ json_encode($audit_log->old_values, JSON_PRETTY_PRINT) }}</pre></td>
        </tr>
        <tr>
          <td><strong>New Values:</strong></td>
          <td><pre class="mb-0" style="white-space: pre-wrap;">{{ json_encode($audit_log->new_values, JSON_PRETTY_PRINT) }}</pre></td>
        </tr>
      </table>
    </div>
  </div>
</div>
@endsection


--- End of File ---

File: .\resources\views\admin\backup\index.blade.php
@extends('layouts.admin')
@section('title', 'Backup & Restore')
@section('page-title', 'Backup & Restore')

@section('content')
<div class="container-fluid">
  <div class="row g-3">
    <div class="col-lg-6">
      <div class="card kpi-card shadow h-100">
        <div class="card-body admin-card-body">
          <h5 class="mb-3"><i class="fas fa-download me-2"></i> Download Backup</h5>
          <p class="text-muted">Download a copy of the current database. For production MySQL, integrate a proper backup tool.</p>
          <button type="button" onclick="window.location='{{ route('admin.backup.download') }}'" class="btn-admin-primary">
            <i class="fas fa-file-archive me-2"></i> Download
          </button>
        </div>
      </div>
    </div>
    <div class="col-lg-6">
      <div class="card kpi-card shadow h-100">
        <div class="card-body admin-card-body">
          <h5 class="mb-3"><i class="fas fa-upload me-2"></i> Restore Backup</h5>
          <p class="text-muted">Upload a database file to restore. Site enters maintenance mode during restore.</p>
          <form method="POST" action="{{ route('admin.backup.restore') }}" enctype="multipart/form-data" class="row g-3">
            @csrf
            <div class="col-12">
              <input type="file" name="backup_file" class="form-control" required>
            </div>
            <div class="col-12">
              <button type="submit" class="btn-admin-secondary"><i class="fas fa-rotate me-2"></i> Restore</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
@endsection


--- End of File ---

File: .\resources\views\admin\categories\create.blade.php
@extends('layouts.admin')

@section('title', 'Create Category')
@section('page-title', 'Create Category')

@section('content')
<div class="container-fluid">
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.categories.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-plus-circle"></i> New Category
        </h1>
    </div>

    <div class="card shadow-sm kpi-card info">
        <div class="card-body admin-card-body">
            <form method="POST" action="{{ route('admin.categories.store') }}" class="needs-validation" novalidate>
                @csrf
                @include('admin.categories._form')

                <div class="row justify-content-center mt-3">
                    <div class="col-12 mx-auto d-flex justify-content-end gap-2">
                        <button type="reset" class="btn-admin-light w-25">
                            <i class="fas fa-times me-2"></i> Cancel
                        </button>
                        <button type="submit" class="btn-admin-secondary w-25">
                            <i class="fas fa-save me-2"></i> Save
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
@endsection

--- End of File ---

File: .\resources\views\admin\categories\edit.blade.php
@extends('layouts.admin')

@section('title', 'Edit Category')
@section('page-title', 'Edit Category')

@section('content')
<div class="container-fluid">
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.categories.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-edit"></i> Edit Category
        </h1>
    </div>

    <div class="card shadow-sm kpi-card secondary">
        <div class="card-body admin-card-body">
            <form method="POST" action="{{ route('admin.categories.update', $category) }}" class="needs-validation" novalidate>
                @csrf
                @method('PUT')
                @include('admin.categories._form')

                <div class="col-12 mx-auto d-flex justify-content-end gap-2 mt-4">
                    <button type="reset" class="btn-admin-light w-25">
                        <i class="fas fa-times me-2"></i> Cancel
                    </button>
                    <button type="submit" class="btn-admin-secondary w-25">
                        <i class="fas fa-save me-2"></i> Update Category
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
@endsection

--- End of File ---

File: .\resources\views\admin\categories\index.blade.php
@extends('layouts.admin')

@section('title', 'Category Management')
@section('page-title', 'Category Management')

@section('content')
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-muted-sea">
            <i class="fas fa-tags"></i> Category Management
        </h1>
        <a href="{{ route('admin.categories.create') }}" class="btn-admin-secondary">
            <i class="fas fa-plus me-2"></i> Add Category
        </a>
    </div>

    <!-- Filters -->
    <div class="card shadow-sm mb-3">
        <div class="card-body admin-card-body">
            <form method="GET" class="row g-3 align-items-end">
                <div class="col-md-5">
                    <label class="form-label">Search</label>
                    <input type="text" name="search" class="form-control" value="{{ request('search') }}" placeholder="Category name">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Status</label>
                    <select name="status" class="form-select">
                        <option value="">All</option>
                        <option value="active" {{ request('status')==='active' ? 'selected' : '' }}>Active</option>
                        <option value="inactive" {{ request('status')==='inactive' ? 'selected' : '' }}>Inactive</option>
                    </select>
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button type="submit" class="btn-admin-secondary me-2"><i class="fas fa-search me-2"></i>Filter</button>
                    <button type="button" onclick="window.location='{{ route('admin.categories.index') }}'" class="btn-admin-light">
                        <i class="fas fa-times me-2"></i>Clear
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Categories Table -->
    <div class="card shadow-sm">
        <div class="card-header p-3 d-flex align-items-center justify-content-between card-header-sea-light">
            <h2 class="h6 mb-0 text-sea-dark"><i class="fas fa-list me-2"></i> Categories</h2>
        </div>
        <div class="card-body admin-card-body">
            @if($categories && $categories->count() > 0)
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th class="text-center">Products</th>
                                <th>Status</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($categories as $category)
                            <tr>
                                <td>
                                    <a href="{{ route('admin.categories.show', $category) }}" class="text-sea-dark text-decoration-none">
                                        <i class="fas fa-tag text-sea-primary me-2"></i>{{ $category->name }}
                                    </a>
                                </td>
                                <td>{{ Str::limit($category->description, 80) }}</td>
                                <td class="text-center"><span class="badge-chip bg-sea-light">{{ $category->products_count ?? 0 }}</span></td>
                                <td>
                                    @if($category->status === 'active')
                                        <span class="badge-admin-role" style="background: linear-gradient(135deg, #4CAF50 0%, #8BC34A 100%) !important; color: #fff !important;">
                                            <i class="fas fa-check-circle me-1" aria-label="Active"></i> Active
                                        </span>
                                    @else
                                        <span class="badge-admin-role baker"><i class="fas fa-times-circle me-1" aria-label="Inactive"></i> Inactive</span>
                                    @endif
                                </td>
                                <td>
                                    <div class="d-flex gap-2 align-items-center">
                                        <form method="POST" action="{{ route('admin.categories.toggle-status', $category) }}" class="d-inline">
                                            @csrf
                                            @method('PATCH')
                                            @if($category->status==='active')
                                                <button type="submit" class="btn-admin-light btn-sm border border-1 d-flex align-items-center gap-1" title="Set Inactive">
                                                    <i class="fas fa-toggle-on" aria-label="Set Inactive"></i>
                                                    <span class="small text-muted">Inactive</span>
                                                </button>
                                            @else
                                                <button type="submit" class="btn-admin-light btn-sm border border-1 d-flex align-items-center gap-1" title="Set Active">
                                                    <i class="fas fa-toggle-off" aria-label="Set Active"></i>
                                                    <span class="small text-muted">Active</span>
                                                </button>
                                            @endif
                                        </form>
                                        <button type="button" class="btn-admin-light btn-sm border border-1 d-flex align-items-center gap-1" title="View" onclick="window.location='{{ route('admin.categories.show', $category) }}'">
                                            <i class="fas fa-eye" aria-label="View"></i>
                                            <span class="small text-muted">View</span>
                                        </button>
                                        <button type="button" class="btn-admin-secondary btn-sm border border-1 d-flex align-items-center gap-1" title="Edit" onclick="window.location='{{ route('admin.categories.edit', $category) }}'">
                                            <i class="fas fa-edit" aria-label="Edit"></i>
                                            <span class="small text-muted">Edit</span>
                                        </button>
                                        <button type="button" class="btn-admin-delete btn-sm border border-1 d-flex align-items-center gap-1" title="Delete"
                                                data-action="{{ route('admin.categories.destroy', $category) }}"
                                                data-name="{{ $category->name }}"
                                                onclick="openDeleteCategoryModal(this)">
                                            <i class="fas fa-trash" aria-label="Delete"></i>
                                            <span class="small text-white">Delete</span>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-end">
                    {{ $categories->appends(request()->query())->links('vendor.pagination.admin') }}
                </div>
            @else
                <div class="text-center text-muted py-5">
                    <i class="fas fa-tags fa-3x mb-3 d-block"></i>
                    No categories found.
                </div>
            @endif
        </div>
    </div>

    <!-- Delete Modal -->
    <div id="deleteCategoryModal" class="sea-modal" aria-hidden="true">
        <div class="sea-modal-dialog">
            <div class="sea-modal-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0 flex-grow-1" style="flex-basis:80%;max-width:80%;">
                    <i class="fas fa-trash me-2"></i> Confirm Deletion - <span id="deleteCategoryName"></span>
                </h5>
                <div style="flex-basis:10%;max-width:10%;" class="text-end">
                    <button type="button" class="btn-admin-light btn-sm" onclick="closeModal('deleteCategoryModal')">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="sea-modal-body">
                <form id="deleteCategoryForm" method="POST" action="#">
                    @csrf
                    @method('DELETE')
                    <p>Are you sure you want to delete <strong id="deleteCategoryName"></strong>? This action cannot be undone.</p>
                    <div class="d-flex justify-content-end mt-3">
                        <button type="button" class="btn-admin-light me-2" onclick="closeModal('deleteCategoryModal')">Cancel</button>
                        <button type="submit" class="btn-admin-primary">Delete</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@endsection

@push('scripts')
<script>
function openDeleteCategoryModal(btn){
    const modal = document.getElementById('deleteCategoryModal');
    document.getElementById('deleteCategoryName').textContent = btn.dataset.name;
    const form = document.getElementById('deleteCategoryForm');
    form.action = btn.dataset.action;
    modal.classList.add('show');
}
function closeModal(id){ document.getElementById(id).classList.remove('show'); }
document.querySelectorAll('.sea-modal').forEach(m => {
    m.addEventListener('click', e => { if(e.target === m){ m.classList.remove('show'); } });
});
</script>
@endpush

--- End of File ---

File: .\resources\views\admin\categories\show.blade.php
@extends('layouts.admin')

@section('title', 'Category Details')
@section('page-title', 'Category Details')

@section('content')
<div class="container-fluid">
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.categories.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-tag"></i> {{ $category->name }}
        </h1>
        <a href="{{ route('admin.categories.edit', $category) }}" class="btn-admin-secondary ms-3 position-absolute end-0">
            <i class="fas fa-edit me-1"></i> Edit
        </a>
    </div>

    <div class="row g-4">
        <div class="col-lg-4">
            <div class="card kpi-card info shadow-sm">
                <div class="card-body admin-card-body">
                    <table class="table table-borderless mb-0">
                        <tr><td><strong>Status:</strong></td><td>
                            @if($category->status==='active')
                                <span class="badge-admin-role"><i class="fas fa-check-circle me-1"></i> Active</span>
                            @else
                                <span class="badge-admin-role baker"><i class="fas fa-times-circle me-1"></i> Inactive</span>
                            @endif
                        </td></tr>
                        <tr><td><strong>Description:</strong></td><td>{{ $category->description ?: '—' }}</td></tr>
                        <tr><td><strong>Products:</strong></td><td>{{ $category->products->count() }}</td></tr>
                        <tr><td><strong>Created:</strong></td><td>{{ $category->created_at->format('Y-m-d') }}</td></tr>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="card kpi-card info shadow-sm">
                <div class="card-header p-3 card-header-sea-secondary"><h2 class="h6 mb-0"><i class="fas fa-box me-2"></i> Products in this Category</h2></div>
                <div class="card-body admin-card-body">
                    @if($category->products->count())
                        <div class="table-responsive">
                            <table class="table table-sm table-hover">
                                <thead class="table-light"><tr><th>SKU</th><th>Name</th><th class="text-end">Price</th><th class="text-end">Stock</th></tr></thead>
                                <tbody>
                                    @foreach($category->products as $p)
                                        <tr>
                                            <td><code>{{ $p->sku }}</code></td>
                                            <td><a href="{{ route('admin.products.show', $p) }}" class="text-sea-dark text-decoration-none">{{ $p->name }}</a></td>
                                            <td class="text-end">{{ number_format($p->price, 2) }}</td>
                                            <td class="text-end">{{ $p->stock_quantity }}</td>
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>
                    @else
                        <div class="text-muted">No products in this category.</div>
                    @endif
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

--- End of File ---

File: .\resources\views\admin\categories\_form.blade.php
<div class="row g-3">
    <div class="col-md-6">
        <label class="form-label">Name <span class="text-danger">*</span></label>
        <input type="text" name="name" class="form-control" maxlength="100" required
               value="{{ old('name', $category->name ?? '') }}" placeholder="e.g., Breads">
    </div>
    <div class="col-md-6">
        <label class="form-label">Status <span class="text-danger">*</span></label>
        <select name="status" class="form-select" required>
            @php($statusVal = old('status', $category->status ?? 'active'))
            <option value="active" {{ $statusVal==='active' ? 'selected' : '' }}>Active</option>
            <option value="inactive" {{ $statusVal==='inactive' ? 'selected' : '' }}>Inactive</option>
        </select>
    </div>
    <div class="col-12">
        <label class="form-label">Description</label>
        <textarea name="description" rows="4" class="form-control" maxlength="500" placeholder="Optional description">{{ old('description', $category->description ?? '') }}</textarea>
    </div>
</div>

--- End of File ---

File: .\resources\views\admin\dashboard\index.blade.php
@extends('layouts.admin')

@section('title', 'Admin Dashboard')
@section('page-title', 'Admin Dashboard')

@section('content')

<!-- Top KPI Widgets -->
<div class="row mb-4">
    <!-- Today Sales -->
    <div class="col-xl-3 col-md-6 mb-4">
        <a href="{{ route('admin.sales.index') }}" class="text-decoration-none">
            <div class="card kpi-card secondary h-100" style="cursor: pointer; transition: transform 0.2s, box-shadow 0.2s;" onmouseover="this.style.transform='translateY(-5px)'; this.style.boxShadow='0 8px 16px rgba(0,0,0,0.15)';" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='';">
                <div class="card-body admin-card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="kpi-number mb-1 text-start" style="font-size: 1.5rem; font-weight: 600; line-height: 1.2; min-width: 90px;">
                                ₱{{ number_format($stats['today_sales'] ?? 0, 2) }}
                            </div>
                        </div>
                        <div class="flex-grow-1 text-end ms-auto">
                            <div class="kpi-label text-sea-primary mb-1" style="font-size: 0.875rem;">Today Sales</div>
                            <small class="text-muted" style="font-size: 0.75rem;">{{ $stats['today_transactions'] ?? 0 }} transactions</small>
                        </div>
                        <div class="flex-shrink-0 ms-2">
                            <i class="fas fa-peso-sign kpi-icon" style="font-size: 1.25rem; opacity: 0.7;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </a>
    </div>

    <!-- This Month Sales -->
    <div class="col-xl-3 col-md-6 mb-4">
        <a href="{{ route('admin.sales-reports.index') }}" class="text-decoration-none">
            <div class="card kpi-card secondary h-100" style="cursor: pointer; transition: transform 0.2s, box-shadow 0.2s;" onmouseover="this.style.transform='translateY(-5px)'; this.style.boxShadow='0 8px 16px rgba(0,0,0,0.15)';" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='';">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="kpi-number mb-1 text-start" style="font-size: 1.5rem; font-weight: 600; line-height: 1.2; min-width: 90px;">₱{{ number_format($stats['this_month_sales'] ?? 0, 2) }}</div>
                        <div class="flex-grow-1 text-end">
                            <div class="kpi-label text-sea-primary mb-1" style="font-size: 0.875rem;">This Month Sales</div>
                            <small class="text-muted" style="font-size: 0.75rem;">Month-to-date</small>
                        </div>
                        <div class="flex-shrink-0 ms-2">
                            <i class="fas fa-chart-line kpi-icon" style="font-size: 1.25rem; opacity: 0.7;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </a>
    </div>

    <!-- Low Stock Alerts -->
    <div class="col-xl-3 col-md-6 mb-4">
        <a href="{{ route('admin.inventory.index') }}" class="text-decoration-none">
            <div class="card kpi-card secondary h-100" style="cursor: pointer; transition: transform 0.2s, box-shadow 0.2s;" onmouseover="this.style.transform='translateY(-5px)'; this.style.boxShadow='0 8px 16px rgba(0,0,0,0.15)';" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='';">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="kpi-number mb-1 text-start" style="font-size: 1.5rem; font-weight: 600; line-height: 1.2; min-width: 90px;">{{ $stats['low_stock_products'] ?? 0 }}</div>
                        <div class="flex-grow-1 text-end">
                            <div class="kpi-label text-sea-primary mb-1" style="font-size: 0.875rem;">Low Stock Alerts</div>
                            <small class="text-muted" style="font-size: 0.75rem;">Below reorder level</small>
                        </div>
                        <div class="flex-shrink-0 ms-2">
                            <i class="fas fa-exclamation-triangle kpi-icon" style="font-size: 1.25rem; opacity: 0.7;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </a>
    </div>

    <!-- Pending Purchase Orders -->
    <div class="col-xl-3 col-md-6 mb-4">
        <a href="{{ route('admin.productions.index') }}" class="text-decoration-none">
            <div class="card kpi-card secondary h-100" style="cursor: pointer; transition: transform 0.2s, box-shadow 0.2s;" onmouseover="this.style.transform='translateY(-5px)'; this.style.boxShadow='0 8px 16px rgba(0,0,0,0.15)';" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='';">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="kpi-number mb-1 text-start" style="font-size: 1.5rem; font-weight: 600; line-height: 1.2; min-width: 90px;">{{ $stats['pending_purchases'] ?? 0 }}</div>
                        <div class="flex-grow-1 text-end">
                            <div class="kpi-label text-sea-primary mb-1" style="font-size: 0.875rem;">Pending POs</div>
                            <small class="text-muted" style="font-size: 0.75rem;">Awaiting receipt</small>
                        </div>
                        <div class="flex-shrink-0 ms-2">
                            <i class="fas fa-shopping-cart kpi-icon" style="font-size: 1.25rem; opacity: 0.7;"></i>
                        </div>
                    </div>
                </div>
            </div>
        </a>
    </div>
</div>
<div class="row mb-4">
    <div class="col-12">
        <div class="card shadow-sm" style="border: none; border-radius: 12px; overflow: hidden;">
            <div class="card-header border-0" style="background: linear-gradient(135deg, #EEF5DB 0%, #d4e7b8 100%); padding: 1.5rem;">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-1 fw-bold" style="color: #2d6a4f;">
                            <i class="fas fa-chart-line me-2"></i>Sales Performance Analytics
                        </h5>
                        <small class="text-muted">Multi-dimensional revenue & transaction tracking</small>
                    </div>
                    <div class="btn-group btn-group-sm shadow-sm" role="group">
                        <button type="button" class="btn btn-light active fw-semibold" data-period="7" style="border: none; padding: 0.5rem 1rem;">7 Days</button>
                        <button type="button" class="btn btn-light fw-semibold" data-period="30" style="border: none; padding: 0.5rem 1rem;">30 Days</button>
                        <button type="button" class="btn btn-light fw-semibold" data-period="90" style="border: none; padding: 0.5rem 1rem;">90 Days</button>
                    </div>
                </div>
            </div>
            <div class="card-body p-4" style="background: #fafafa;">
                <canvas id="advancedAnalyticsChart" style="height: 420px; max-height: 420px;"></canvas>
            </div>
            <div class="card-footer border-0" style="background: white; padding: 1.5rem;">
                <div class="row g-4">
                    <div class="col-6 col-lg-3">
                        <div class="text-center p-3 rounded" style="background: linear-gradient(135deg, #d4f1dd 0%, #e8f8ed 100%);">
                            <div class="text-muted small mb-1">Total Revenue (7d)</div>
                            <div class="h4 mb-0 fw-bold" style="color: #27ae60;">
                                ₱{{ number_format(($last7DaysSales->sum('total') ?? 0), 2) }}
                            </div>
                        </div>
                    </div>
                    <div class="col-6 col-lg-3">
                        <div class="text-center p-3 rounded" style="background: linear-gradient(135deg, #dbe9f4 0%, #e8f2fa 100%);">
                            <div class="text-muted small mb-1">Avg Daily Sales</div>
                            <div class="h4 mb-0 fw-bold" style="color: #3498db;">
                                ₱{{ number_format(($last7DaysSales->count() ? ($last7DaysSales->sum('total') / $last7DaysSales->count()) : 0), 2) }}
                            </div>
                        </div>
                    </div>
                    <div class="col-6 col-lg-3">
                        <div class="text-center p-3 rounded" style="background: linear-gradient(135deg, #fff4d6 0%, #fff9e6 100%);">
                            <div class="text-muted small mb-1">Peak Day Revenue</div>
                            @php $peakDay = isset($last7DaysSales) && $last7DaysSales->count() ? $last7DaysSales->sortByDesc('total')->first() : null; @endphp
                            <div class="h4 mb-0 fw-bold" style="color: #f39c12;">
                                ₱{{ number_format(($peakDay->total ?? 0), 2) }}
                            </div>
                        </div>
                    </div>
                    <div class="col-6 col-lg-3">
                        <div class="text-center p-3 rounded" style="background: linear-gradient(135deg, {{ $trend ?? 0 >= 0 ? '#d4f1dd' : '#ffd6d6' }} 0%, {{ $trend ?? 0 >= 0 ? '#e8f8ed' : '#ffe6e6' }} 100%);">
                            <div class="text-muted small mb-1">Growth Trend</div>
                            @php
                                $recent3 = isset($last7DaysSales) && $last7DaysSales->count() >= 3 ? $last7DaysSales->take(-3)->sum('total') : 0;
                                $previous3 = isset($last7DaysSales) && $last7DaysSales->count() >= 6 ? $last7DaysSales->slice(-6, 3)->sum('total') : 0;
                                $trend = $previous3 > 0 ? (($recent3 - $previous3) / $previous3) * 100 : 0;
                            @endphp
                            <div class="h4 mb-0 fw-bold {{ $trend >= 0 ? 'text-success' : 'text-danger' }}">
                                <i class="fas fa-{{ $trend >= 0 ? 'arrow-up' : 'arrow-down' }} me-1"></i>{{ number_format(abs($trend), 1) }}%
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Top Products & Low Stock Row -->
<div class="row mb-4">
    <!-- Top Products (7 days) -->
    <div class="col-lg-6 mb-4">
        <div class="card h-100 shadow-sm" style="border: none; border-radius: 12px; overflow: hidden;">
            <div class="card-header border-0" style="background: linear-gradient(135deg, #FE5F55 0%, #ff8a80 100%); padding: 1.25rem;">
                <h6 class="mb-0 text-white fw-bold">
                    <i class="fas fa-trophy me-2"></i>Top Performing Products
                </h6>
                <small class="text-white" style="opacity: 0.9;">Last 7 days performance</small>
            </div>
            <div class="card-body p-0">
                @if(isset($topProducts) && $topProducts->count())
                    <div class="list-group list-group-flush">
                        @foreach($topProducts as $index => $p)
                        <div class="list-group-item border-0 px-4 py-3" style="background: {{ $index % 2 == 0 ? '#ffffff' : '#fafafa' }};">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center flex-grow-1">
                                    <div class="me-3" style="width: 40px; height: 40px; border-radius: 10px; background: linear-gradient(135deg, #FFEAA5, #ffd54f); display: flex; align-items: center; justify-content: center; font-weight: bold; color: #333;">
                                        #{{ $index + 1 }}
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="fw-semibold" style="font-size: 0.95rem; color: #2c3e50;">{{ $p->name ?? '—' }}</div>
                                        <small class="text-muted" style="font-size: 0.8rem;">SKU: {{ $p->sku ?? 'N/A' }}</small>
                                    </div>
                                </div>
                                <div class="text-end ms-3">
                                    <div class="badge" style="background: #EEF5DB; color: #2d6a4f; font-size: 0.75rem; padding: 0.4rem 0.8rem; border-radius: 20px; font-weight: 600;">
                                        {{ number_format($p->qty_sold ?? 0) }} sold
                                    </div>
                                    <div class="mt-1" style="font-size: 0.9rem; font-weight: 600; color: #27ae60;">
                                        ₱{{ number_format($p->revenue ?? 0, 2) }}
                                    </div>
                                </div>
                            </div>
                        </div>
                        @endforeach
                    </div>
                @else
                    <div class="text-center py-5">
                        <i class="fas fa-trophy mb-3" style="font-size: 3rem; color: #e0e0e0;"></i>
                        <p class="text-muted mb-0">No product sales data yet</p>
                        <small class="text-muted">Sales will appear here once recorded</small>
                    </div>
                @endif
            </div>
        </div>
    </div>

    <!-- Low Stock Alerts -->
    <div class="col-lg-6 mb-4">
        <div class="card h-100 shadow-sm" style="border: none; border-radius: 12px; overflow: hidden;">
            <div class="card-header border-0" style="background: linear-gradient(135deg, #FFEAA5 0%, #ffe082 100%); padding: 1.25rem;">
                <h6 class="mb-0 fw-bold" style="color: #5a4a00;">
                    <i class="fas fa-exclamation-triangle me-2"></i>Stock Alerts
                </h6>
                <small style="color: #5a4a00; opacity: 0.8;">Items below reorder level</small>
            </div>
            <div class="card-body p-0">
                @if(isset($lowStockProducts) && $lowStockProducts->count() > 0)
                    <div class="list-group list-group-flush">
                        @foreach($lowStockProducts->take(5) as $product)
                        <div class="list-group-item border-0 px-4 py-3 hover-bg-light">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="flex-grow-1">
                                    <div class="d-flex align-items-center">
                                        <div class="me-3" style="width: 40px; height: 40px; border-radius: 10px; background: {{ ($product->stock_quantity ?? 0) == 0 ? 'linear-gradient(135deg, #FE5F55, #ff8a80)' : 'linear-gradient(135deg, #FFEAA5, #ffd54f)' }}; display: flex; align-items: center; justify-content: center;">
                                            <i class="fas fa-{{ ($product->stock_quantity ?? 0) == 0 ? 'times' : 'exclamation' }} text-white"></i>
                                        </div>
                                        <div>
                                            <div class="fw-semibold" style="font-size: 0.95rem; color: #2c3e50;">{{ $product->name ?? '—' }}</div>
                                            <small class="text-muted" style="font-size: 0.8rem;">
                                                Current: <span class="fw-semibold {{ ($product->stock_quantity ?? 0) == 0 ? 'text-danger' : 'text-warning' }}">{{ $product->stock_quantity ?? 0 }}</span> | 
                                                Min: {{ $product->minimum_stock ?? 0 }}
                                            </small>
                                        </div>
                                    </div>
                                </div>
                                <div class="flex-shrink-0 ms-3">
                                    <span class="fw-bold" style="font-size: 0.85rem; color: {{ ($product->stock_quantity ?? 0) == 0 ? '#b22424' : '#FFC107' }};">
                                        {{ ($product->stock_quantity ?? 0) == 0 ? 'OUT OF STOCK' : 'LOW' }}
                                    </span>
                                </div>
                            </div>
                        </div>
                        @endforeach
                    </div>
                @else
                    <div class="text-center py-5">
                        <i class="fas fa-check-circle mb-3" style="font-size: 3rem; color: #27ae60;"></i>
                        <p class="text-success fw-semibold mb-0">All Products Well Stocked</p>
                        <small class="text-muted">No items below reorder level</small>
                    </div>
                @endif
            </div>
        </div>
    </div>
</div>

<!-- Chart.js Initialization Script -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const ctx = document.getElementById('advancedAnalyticsChart');
    if (!ctx) return;

    let currentChart = null;
    let currentPeriod = 7;

    // Function to fetch and update chart data
    async function updateChart(days) {
        try {
            // Show loading state
            const chartContainer = ctx.parentElement;
            chartContainer.style.opacity = '0.6';
            chartContainer.style.pointerEvents = 'none';

            // Fetch new data from server
            const response = await fetch(`{{ route('admin.dashboard') }}?period=${days}&ajax=1`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json'
                }
            });

            if (!response.ok) throw new Error('Network response was not ok');
            
            const data = await response.json();
            
            // Update footer stats
            updateFooterStats(data.salesData);
            
            // Prepare chart data
            const labels = data.salesData.map(d => {
                const date = new Date(d.date);
                return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
            });
            
            const salesRevenue = data.salesData.map(d => parseFloat(d.total || 0));
            const salesTransactions = data.salesData.map(d => parseInt(d.transactions || 0));
            
            const datasets = createDatasets(salesRevenue, salesTransactions, data.categoryData || []);
            
            // Destroy old chart if exists
            if (currentChart) {
                currentChart.destroy();
            }
            
            // Create new chart
            currentChart = new Chart(ctx, {
                data: {
                    labels: labels,
                    datasets: datasets
                },
                options: getChartOptions()
            });
            
            // Restore UI
            chartContainer.style.opacity = '1';
            chartContainer.style.pointerEvents = 'auto';
            
        } catch (error) {
            console.error('Error updating chart:', error);
            alert('Failed to load chart data. Please refresh the page.');
            chartContainer.style.opacity = '1';
            chartContainer.style.pointerEvents = 'auto';
        }
    }

    // Create datasets configuration
    function createDatasets(salesRevenue, salesTransactions, categoryData) {
        const categoryColors = [
            { bg: 'rgba(254, 95, 85, 0.6)', border: 'rgba(254, 95, 85, 1)' },
            { bg: 'rgba(255, 234, 165, 0.6)', border: 'rgba(255, 234, 165, 1)' },
            { bg: 'rgba(238, 245, 219, 0.6)', border: 'rgba(238, 245, 219, 1)' },
            { bg: 'rgba(100, 181, 246, 0.6)', border: 'rgba(100, 181, 246, 1)' },
            { bg: 'rgba(171, 71, 188, 0.6)', border: 'rgba(171, 71, 188, 1)' },
        ];

        const datasets = [
            {
                type: 'line',
                label: 'Total Sales (₱)',
                data: salesRevenue,
                borderColor: '#FE5F55',
                backgroundColor: 'rgba(254, 95, 85, 0.1)',
                borderWidth: 3,
                tension: 0.4,
                fill: true,
                yAxisID: 'y',
                order: 1,
                pointRadius: 5,
                pointHoverRadius: 7,
                pointBackgroundColor: '#FE5F55',
                pointBorderColor: '#fff',
                pointBorderWidth: 2,
            },
            {
                type: 'bar',
                label: 'Transactions',
                data: salesTransactions,
                backgroundColor: 'rgba(255, 234, 165, 0.7)',
                borderColor: '#FFEAA5',
                borderWidth: 1,
                yAxisID: 'y1',
                order: 2,
                barThickness: 20,
            }
        ];

        // Add category stacked bars if data exists
        if (categoryData && categoryData.length > 0) {
            const totalRevenue = salesRevenue.reduce((a, b) => a + b, 0) || 1;
            
            categoryData.slice(0, 3).forEach((cat, idx) => {
                const catRevenue = parseFloat(cat.revenue || 0);
                const dailyCatRevenue = salesRevenue.map(dayRev => (dayRev / totalRevenue) * catRevenue);
                
                const color = categoryColors[idx % categoryColors.length];
                datasets.push({
                    type: 'bar',
                    label: cat.category_name || cat.name || 'Category ' + (idx + 1),
                    data: dailyCatRevenue,
                    backgroundColor: color.bg,
                    borderColor: color.border,
                    borderWidth: 1,
                    yAxisID: 'y',
                    order: 3 + idx,
                    stack: 'categories',
                    barThickness: 15,
                });
            });
        }

        return datasets;
    }

    // Chart options
    function getChartOptions() {
        return {
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
                mode: 'index',
                intersect: false,
            },
            plugins: {
                legend: {
                    display: true,
                    position: 'top',
                    labels: {
                        usePointStyle: true,
                        padding: 15,
                        font: { size: 11, weight: '500' }
                    }
                },
                tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                    padding: 12,
                    titleFont: { size: 13, weight: 'bold' },
                    bodyFont: { size: 12 },
                    bodySpacing: 6,
                    callbacks: {
                        label: function(context) {
                            let label = context.dataset.label || '';
                            if (label) label += ': ';
                            if (context.dataset.yAxisID === 'y1') {
                                label += context.parsed.y + ' txns';
                            } else {
                                label += '₱' + context.parsed.y.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
                            }
                            return label;
                        }
                    }
                }
            },
            scales: {
                y: {
                    type: 'linear',
                    display: true,
                    position: 'left',
                    title: { display: true, text: 'Revenue (₱)', font: { size: 12, weight: '600' } },
                    ticks: {
                        callback: function(value) {
                            return '₱' + value.toLocaleString('en-US', {minimumFractionDigits: 0, maximumFractionDigits: 0});
                        },
                        font: { size: 10 }
                    },
                    grid: { color: 'rgba(0, 0, 0, 0.05)' }
                },
                y1: {
                    type: 'linear',
                    display: true,
                    position: 'right',
                    title: { display: true, text: 'Transactions', font: { size: 12, weight: '600' } },
                    ticks: { font: { size: 10 } },
                    grid: { drawOnChartArea: false }
                },
                x: {
                    ticks: { font: { size: 10 } },
                    grid: { display: false }
                }
            }
        };
    }

    // Update footer statistics
    function updateFooterStats(salesData) {
        const totalRevenue = salesData.reduce((sum, d) => sum + parseFloat(d.total || 0), 0);
        const avgDaily = salesData.length ? totalRevenue / salesData.length : 0;
        const peakDay = salesData.reduce((max, d) => parseFloat(d.total || 0) > max ? parseFloat(d.total || 0) : max, 0);
        
        // Calculate trend
        const dataCount = salesData.length;
        const half = Math.floor(dataCount / 2);
        const recent = salesData.slice(half).reduce((sum, d) => sum + parseFloat(d.total || 0), 0);
        const previous = salesData.slice(0, half).reduce((sum, d) => sum + parseFloat(d.total || 0), 0);
        const trend = previous > 0 ? ((recent - previous) / previous) * 100 : 0;
        
        // Update DOM
        const formatCurrency = (val) => '₱' + val.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
        
        document.querySelectorAll('.card-footer .col-6').forEach((col, idx) => {
            const valueEl = col.querySelector('.h4');
            if (!valueEl) return;
            
            switch(idx) {
                case 0: // Total Revenue
                    valueEl.textContent = formatCurrency(totalRevenue);
                    break;
                case 1: // Avg Daily
                    valueEl.textContent = formatCurrency(avgDaily);
                    break;
                case 2: // Peak Day
                    valueEl.textContent = formatCurrency(peakDay);
                    break;
                case 3: // Growth Trend
                    const icon = trend >= 0 ? 'arrow-up' : 'arrow-down';
                    const colorClass = trend >= 0 ? 'text-success' : 'text-danger';
                    valueEl.className = 'h4 mb-0 fw-bold ' + colorClass;
                    valueEl.innerHTML = `<i class="fas fa-${icon} me-1"></i>${Math.abs(trend).toFixed(1)}%`;
                    
                    // Update gradient background
                    const gradientBg = trend >= 0 
                        ? 'linear-gradient(135deg, #d4f1dd 0%, #e8f8ed 100%)'
                        : 'linear-gradient(135deg, #ffd6d6 0%, #ffe6e6 100%)';
                    col.querySelector('.rounded').style.background = gradientBg;
                    break;
            }
        });
    }

    // Period toggle buttons
    document.querySelectorAll('[data-period]').forEach(btn => {
        btn.addEventListener('click', function() {
            const days = parseInt(this.dataset.period);
            if (days === currentPeriod) return;
            
            currentPeriod = days;
            document.querySelectorAll('[data-period]').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            updateChart(days);
        });
    });

    // Initialize with default data (7 days)
    const initialSalesData = @json($last7DaysSales ?? collect());
    const initialCategoryData = @json($salesByCategory ?? collect());
    
    const labels = initialSalesData.map(d => {
        const date = new Date(d.date);
        return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
    });
    
    const salesRevenue = initialSalesData.map(d => parseFloat(d.total || 0));
    const salesTransactions = initialSalesData.map(d => parseInt(d.transactions || 0));
    
    currentChart = new Chart(ctx, {
        data: {
            labels: labels,
            datasets: createDatasets(salesRevenue, salesTransactions, initialCategoryData)
        },
        options: getChartOptions()
    });
});
</script>
@endsection

--- End of File ---

File: .\resources\views\admin\employees\create.blade.php
@extends('layouts.admin')

@section('title', 'Create Employee')
@section('page-title', 'Create New Employee')

@section('content')
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.employees.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-user-plus"></i> Create New Employee
        </h1>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card kpi-card info shadow">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-user-plus me-2"></i> Employee Information</h5>
                </div>
                <div class="card-body admin-card-body">
                    <form action="{{ route('admin.employees.store') }}" method="POST">
                        @csrf
                        
                        <!-- Name Fields -->
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="first_name" class="form-label">
                                        <i class="fas fa-user text-sea-primary"></i> First Name <span class="text-danger">*</span>
                                    </label>
                                    <input type="text" name="first_name" id="first_name" 
                                           class="form-control @error('first_name') is-invalid @enderror" 
                                           value="{{ old('first_name') }}" required>
                                    @error('first_name')
                                        <div class="invalid-feedback">{{ $message }}</div>
                                    @enderror
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="middle_name" class="form-label">
                                        <i class="fas fa-user text-sea-primary"></i> Middle Name
                                    </label>
                                    <input type="text" name="middle_name" id="middle_name" 
                                           class="form-control @error('middle_name') is-invalid @enderror" 
                                           value="{{ old('middle_name') }}">
                                    @error('middle_name')
                                        <div class="invalid-feedback">{{ $message }}</div>
                                    @enderror
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="last_name" class="form-label">
                                        <i class="fas fa-user text-sea-primary"></i> Last Name <span class="text-danger">*</span>
                                    </label>
                                    <input type="text" name="last_name" id="last_name" 
                                           class="form-control @error('last_name') is-invalid @enderror" 
                                           value="{{ old('last_name') }}" required>
                                    @error('last_name')
                                        <div class="invalid-feedback">{{ $message }}</div>
                                    @enderror
                                </div>
                            </div>
                        </div>

                        <!-- Contact Information -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="phone" class="form-label">
                                        <i class="fas fa-phone text-sea-primary"></i> Phone Number
                                    </label>
                                    <input type="tel" name="phone" id="phone" 
                                           class="form-control @error('phone') is-invalid @enderror" 
                                           value="{{ old('phone') }}" placeholder="+63 123 456 7890">
                                    @error('phone')
                                        <div class="invalid-feedback">{{ $message }}</div>
                                    @enderror
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="status" class="form-label">
                                        <i class="fas fa-toggle-on text-sea-primary"></i> Status <span class="text-danger">*</span>
                                    </label>
                                    <select name="status" id="status" class="form-select @error('status') is-invalid @enderror" required>
                                        <option value="">Select Status</option>
                                        <option value="active" {{ old('status') == 'active' ? 'selected' : '' }}>
                                            Active
                                        </option>
                                        <option value="inactive" {{ old('status') == 'inactive' ? 'selected' : '' }}>
                                            Inactive
                                        </option>
                                        <option value="on_leave" {{ old('status') == 'on_leave' ? 'selected' : '' }}>
                                            On Leave
                                        </option>
                                    </select>
                                    @error('status')
                                        <div class="invalid-feedback">{{ $message }}</div>
                                    @enderror
                                </div>
                            </div>
                        </div>

                        <!-- Address -->
                        <div class="mb-3">
                            <label for="address" class="form-label">
                                <i class="fas fa-map-marker-alt text-sea-primary"></i> Address
                            </label>
                            <textarea name="address" id="address" rows="3" 
                                      class="form-control @error('address') is-invalid @enderror" 
                                      placeholder="Complete address">{{ old('address') }}</textarea>
                            @error('address')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>

                        <!-- Work Shift -->
                        <div class="alert-admin-info">
                            <i class="fas fa-info-circle me-2"></i> Work shift times are optional and can be set later
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="shift_start" class="form-label">
                                        <i class="fas fa-clock text-sea-primary"></i> Shift Start Time
                                    </label>
                                    <input type="time" name="shift_start" id="shift_start" 
                                           class="form-control @error('shift_start') is-invalid @enderror" 
                                           value="{{ old('shift_start') }}">
                                    @error('shift_start')
                                        <div class="invalid-feedback">{{ $message }}</div>
                                    @enderror
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="shift_end" class="form-label">
                                        <i class="fas fa-clock text-sea-primary"></i> Shift End Time
                                    </label>
                                    <input type="time" name="shift_end" id="shift_end" 
                                           class="form-control @error('shift_end') is-invalid @enderror" 
                                           value="{{ old('shift_end') }}">
                                    @error('shift_end')
                                        <div class="invalid-feedback">{{ $message }}</div>
                                    @enderror
                                    <div class="form-text">Must be after shift start time</div>
                                </div>
                            </div>
                        </div>

                        <!-- Submit Buttons -->
                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn-admin-light" onclick="window.location='{{ route('admin.employees.index') }}'">
                                <i class="fas fa-times me-2"></i> Cancel
                            </button>
                            <button type="submit" class="btn-admin-secondary">
                                <i class="fas fa-save me-2"></i> Create Employee
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Information Side Panel -->
        <div class="col-md-4">
            <div class="card kpi-card info shadow">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-info-circle me-2"></i> Employee Information</h5>
                </div>
                <div class="card-body admin-card-body">
                    <div class="info-section">
                        <h6 class="text-sea-primary mb-2">
                            <i class="fas fa-user me-2"></i> Personal Details
                        </h6>
                        <p class="small text-muted mb-3">
                            Fill in the employee's basic information including their full name, contact details, and current address.
                        </p>

                        <h6 class="text-sea-primary mb-2">
                            <i class="fas fa-toggle-on me-2"></i> Status Options
                        </h6>
                        <div class="status-info mb-3">
                            <div class="d-flex align-items-center mb-2">
                                <span class="badge-admin-role admin me-2">Active</span>
                                <small class="text-muted">Ready to work</small>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="badge-admin-role baker me-2">Inactive</span>
                                <small class="text-muted">Not currently working</small>
                            </div>
                            <div class="d-flex align-items-center">
                                <span class="badge-admin-role cashier me-2">On Leave</span>
                                <small class="text-muted">Temporarily away</small>
                            </div>
                        </div>

                        <h6 class="text-sea-primary mb-2">
                            <i class="fas fa-clock me-2"></i> Work Shifts
                        </h6>
                        <p class="small text-muted mb-3">
                            Set the employee's regular work hours. This is optional and can be updated later as needed.
                        </p>

                        <h6 class="text-sea-primary mb-2">
                            <i class="fas fa-user-plus me-2"></i> Next Steps
                        </h6>
                        <p class="small text-muted">
                            After creating the employee, you can create a user account for them to access the system.
                        </p>
                    </div>
                </div>
            </div>

            <!-- Quick Tips -->
            <div class="card kpi-card info shadow mt-3">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-lightbulb me-2"></i> Quick Tips</h5>
                </div>
                <div class="card-body admin-card-body">
                    <div class="tip-item mb-2">
                        <i class="fas fa-check text-success me-2"></i>
                        <small>Phone numbers should be unique for each employee</small>
                    </div>
                    <div class="tip-item mb-2">
                        <i class="fas fa-check text-success me-2"></i>
                        <small>Middle name is optional but helps with identification</small>
                    </div>
                    <div class="tip-item mb-2">
                        <i class="fas fa-check text-success me-2"></i>
                        <small>Set status to "Active" for employees ready to work</small>
                    </div>
                    <div class="tip-item">
                        <i class="fas fa-check text-success me-2"></i>
                        <small>Work shifts can be set now or updated later</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

--- End of File ---

File: .\resources\views\admin\employees\edit.blade.php
@extends('layouts.admin')

@section('title', 'Edit Employee')
@section('page-title', 'Edit Employee - ' . $employee->full_name)

@section('content')
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.employees.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-user-edit"></i> Edit Employee: {{ $employee->full_name }}
        </h1>
        <a href="{{ route('admin.employees.show', $employee) }}" class="btn-admin-secondary ms-3 position-absolute end-0">
            <i class="fas fa-eye me-1"></i> View
        </a>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card kpi-card info shadow">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-user-edit me-2"></i> Edit Employee Information</h5>
                </div>
                <div class="card-body admin-card-body">
                    <form action="{{ route('admin.employees.update', $employee) }}" method="POST">
                        @csrf
                        @method('PUT')
                        
                        <!-- Name Fields -->
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="first_name" class="form-label">
                                        <i class="fas fa-user text-sea-primary"></i> First Name <span class="text-danger">*</span>
                                    </label>
                                    <input type="text" name="first_name" id="first_name" 
                                           class="form-control @error('first_name') is-invalid @enderror" 
                                           value="{{ old('first_name', $employee->first_name) }}" required>
                                    @error('first_name')
                                        <div class="invalid-feedback">{{ $message }}</div>
                                    @enderror
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="middle_name" class="form-label">
                                        <i class="fas fa-user text-sea-primary"></i> Middle Name
                                    </label>
                                    <input type="text" name="middle_name" id="middle_name" 
                                           class="form-control @error('middle_name') is-invalid @enderror" 
                                           value="{{ old('middle_name', $employee->middle_name) }}">
                                    @error('middle_name')
                                        <div class="invalid-feedback">{{ $message }}</div>
                                    @enderror
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="last_name" class="form-label">
                                        <i class="fas fa-user text-sea-primary"></i> Last Name <span class="text-danger">*</span>
                                    </label>
                                    <input type="text" name="last_name" id="last_name" 
                                           class="form-control @error('last_name') is-invalid @enderror" 
                                           value="{{ old('last_name', $employee->last_name) }}" required>
                                    @error('last_name')
                                        <div class="invalid-feedback">{{ $message }}</div>
                                    @enderror
                                </div>
                            </div>
                        </div>

                        <!-- Contact Information -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="phone" class="form-label">
                                        <i class="fas fa-phone text-sea-primary"></i> Phone Number
                                    </label>
                                    <input type="tel" name="phone" id="phone" 
                                           class="form-control @error('phone') is-invalid @enderror" 
                                           value="{{ old('phone', $employee->phone) }}" placeholder="+63 123 456 7890">
                                    @error('phone')
                                        <div class="invalid-feedback">{{ $message }}</div>
                                    @enderror
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="status" class="form-label">
                                        <i class="fas fa-toggle-on text-sea-primary"></i> Status <span class="text-danger">*</span>
                                    </label>
                                    <select name="status" id="status" class="form-select @error('status') is-invalid @enderror" required>
                                        <option value="">Select Status</option>
                                        <option value="active" {{ old('status', $employee->status) == 'active' ? 'selected' : '' }}>
                                            Active
                                        </option>
                                        <option value="inactive" {{ old('status', $employee->status) == 'inactive' ? 'selected' : '' }}>
                                            Inactive
                                        </option>
                                        <option value="on_leave" {{ old('status', $employee->status) == 'on_leave' ? 'selected' : '' }}>
                                            On Leave
                                        </option>
                                    </select>
                                    @error('status')
                                        <div class="invalid-feedback">{{ $message }}</div>
                                    @enderror
                                </div>
                            </div>
                        </div>

                        <!-- Address -->
                        <div class="mb-3">
                            <label for="address" class="form-label">
                                <i class="fas fa-map-marker-alt text-sea-primary"></i> Address
                            </label>
                            <textarea name="address" id="address" rows="3" 
                                      class="form-control @error('address') is-invalid @enderror" 
                                      placeholder="Complete address">{{ old('address', $employee->address) }}</textarea>
                            @error('address')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>

                        <!-- Work Shift -->
                        <div class="alert-admin-info">
                            <i class="fas fa-info-circle me-2"></i> Update work shift times as needed
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="shift_start" class="form-label">
                                        <i class="fas fa-clock text-sea-primary"></i> Shift Start Time
                                    </label>
                                    <input type="time" name="shift_start" id="shift_start" 
                                           class="form-control @error('shift_start') is-invalid @enderror" 
                                           value="{{ old('shift_start', $employee->shift_start ? $employee->shift_start->format('H:i') : '') }}">
                                    @error('shift_start')
                                        <div class="invalid-feedback">{{ $message }}</div>
                                    @enderror
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="shift_end" class="form-label">
                                        <i class="fas fa-clock text-sea-primary"></i> Shift End Time
                                    </label>
                                    <input type="time" name="shift_end" id="shift_end" 
                                           class="form-control @error('shift_end') is-invalid @enderror" 
                                           value="{{ old('shift_end', $employee->shift_end ? $employee->shift_end->format('H:i') : '') }}">
                                    @error('shift_end')
                                        <div class="invalid-feedback">{{ $message }}</div>
                                    @enderror
                                    <div class="form-text">Must be after shift start time</div>
                                </div>
                            </div>
                        </div>

                        <!-- Submit Buttons -->
                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn-admin-light" onclick="window.location='{{ route('admin.employees.show', $employee) }}'">
                                <i class="fas fa-times me-2"></i> Cancel
                            </button>
                            <button type="submit" class="btn-admin-secondary">
                                <i class="fas fa-save me-2"></i> Update Employee
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Employee Information Side Panel -->
        <div class="col-md-4">
            <div class="card kpi-card info shadow">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-user-circle me-2"></i> Current Employee Info</h5>
                </div>
                <div class="card-body admin-card-body">
                    <!-- Employee ID & Created Date -->
                    <div class="mb-3">
                        <h6 class="text-sea-dark mb-2">
                            <i class="fas fa-id-badge me-2"></i> Employee Details
                        </h6>
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>ID:</strong></td>
                                <td><code>#{{ $employee->employee_id }}</code></td>
                            </tr>
                            <tr>
                                <td><strong>Joined:</strong></td>
                                <td>{{ $employee->created_at->format('M d, Y') }}</td>
                            </tr>
                            <tr>
                                <td><strong>Days:</strong></td>
                                <td>{{ $employee->created_at->diffInDays(now()) }} days</td>
                            </tr>
                        </table>
                    </div>

                    <!-- Current Status -->
                    <div class="mb-3">
                        <h6 class="text-sea-dark mb-2">
                            <i class="fas fa-user-check me-2"></i> Current Status
                        </h6>
                        @switch($employee->status)
                            @case('active')
                                <span class="badge-admin-role admin">
                                    <i class="fas fa-check-circle me-1"></i> Active
                                </span>
                                @break
                            @case('on_leave')
                                <span class="badge-admin-role cashier">
                                    <i class="fas fa-user-clock me-1"></i> On Leave
                                </span>
                                @break
                            @case('inactive')
                                <span class="badge-admin-role baker">
                                    <i class="fas fa-user-times me-1"></i> Inactive
                                </span>
                                @break
                        @endswitch
                    </div>

                    <!-- User Account Status -->
                    <div class="mb-0">
                        <h6 class="text-sea-dark mb-2">
                            <i class="fas fa-user-shield me-2"></i> User Account
                        </h6>
                        @if($employee->user)
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>Username:</strong></td>
                                    <td>{{ $employee->user->username }}</td>
                                </tr>
                                <tr>
                                    <td><strong>Role:</strong></td>
                                    <td>
                                        <span class="badge-admin-role {{ $employee->user->role }}">
                                            @switch($employee->user->role)
                                                @case('admin')
                                                    <i class="fas fa-crown me-1"></i> Admin
                                                    @break
                                                @case('manager')
                                                    <i class="fas fa-user-tie me-1"></i> Manager
                                                    @break
                                                @case('baker')
                                                    <i class="fas fa-bread-slice me-1"></i> Baker
                                                    @break
                                                @case('cashier')
                                                    <i class="fas fa-cash-register me-1"></i> Cashier
                                                    @break
                                            @endswitch
                                        </span>
                                    </td>
                                </tr>
                            </table>
                        @else
                            <p class="mb-0 text-warning">
                                <i class="fas fa-exclamation-triangle me-1"></i> No user account
                            </p>
                        @endif
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if(!$employee->user)
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete employee <strong>{{ $employee->full_name }}</strong>?</p>
                <p class="text-danger"><i class="fas fa-exclamation-triangle me-2"></i> This action cannot be undone!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-admin-light" data-bs-dismiss="modal">Cancel</button>
                <form action="{{ route('admin.employees.destroy', $employee) }}" method="POST" class="d-inline">
                    @csrf
                    @method('DELETE')
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-2"></i> Delete Employee
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>
@endif
@endsection

--- End of File ---

File: .\resources\views\admin\employees\index.blade.php
@extends('layouts.admin')

@section('title', 'Employee Management')
@section('page-title', 'Employee Management')

@section('content')
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-muted-sea">
            <i class="fas fa-users"></i> Employee Management
        </h1>
        <a href="{{ route('admin.employees.create') }}" class="btn-admin-secondary">
            <i class="fas fa-user-plus me-2"></i> Add New Employee
        </a>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card kpi-card info shadow">
                <div class="card-body admin-card-body">
                    <div class="d-flex align-items-center">
                        <div class="kpi-icon primary">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="ms-4">
                            <h6 class="kpi-title">Total Employees</h6>
                            <h3 class="h4 mb-0">{{ $stats['total'] }}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card kpi-card info shadow">
                <div class="card-body admin-card-body">
                    <div class="d-flex align-items-center">
                        <div class="kpi-icon success">
                            <i class="fas fa-user-check"></i>
                        </div>
                        <div class="ms-4">
                            <h6 class="kpi-title">Active</h6>
                            <h3 class="kpi-value">{{ $stats['active'] }}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card kpi-card info shadow">
                <div class="card-body admin-card-body">
                    <div class="d-flex align-items-center">
                        <div class="kpi-icon warning">
                            <i class="fas fa-user-clock"></i>
                        </div>
                        <div class="ms-4">
                            <h6 class="kpi-title">On Leave</h6>
                            <h3 class="kpi-value">{{ $stats['on_leave'] }}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card kpi-card info shadow">
                <div class="card-body admin-card-body">
                    <div class="d-flex align-items-center">
                        <div class="kpi-icon info">
                            <i class="fas fa-user-tie"></i>
                        </div>
                        <div class="ms-4">
                            <h6 class="kpi-title">With Accounts</h6>
                            <h3 class="kpi-value">{{ $stats['with_accounts'] }}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Employees Table -->
    <div class="card kpi-card shadow mb-4">
        <div class="card-header">
            <h5 class="mb-0 text-sea-primary">
                <i class="fas fa-list me-2"></i> All Employees
            </h5>
        </div>
        <div class="card-body admin-card-body">
            @if($employees->count() > 0)
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th style="width: 80px;">ID</th>
                                <th style="width: 200px;">Full Name</th>
                                <th style="width: 150px;" class="d-none d-md-table-cell">Phone</th>
                                <th style="width: 120px;" class="d-none d-lg-table-cell">Shift</th>
                                <th style="width: 100px;">Status</th>
                                <th style="width: 120px;" class="d-none d-sm-table-cell">User Account</th>
                                <th style="width: 100px;" class="d-none d-lg-table-cell">Created</th>
                                <th style="width: 120px; text-align: center;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($employees as $employee)
                                <tr>
                                    <td>
                                        <span class="fw-bold text-sea-primary">#{{ $employee->employee_id }}</span>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="avatar-sm me-2">
                                                <i class="fas fa-user-circle text-muted fa-2x"></i>
                                            </div>
                                            <div>
                                                <div class="fw-bold">{{ $employee->full_name }}</div>
                                                @if($employee->phone)
                                                    <small class="text-muted">{{ $employee->phone }}</small>
                                                @endif
                                            </div>
                                        </div>
                                    </td>
                                    <td class="d-none d-md-table-cell">
                                        @if($employee->phone)
                                            <span class="text-info">
                                                <i class="fas fa-phone me-1"></i> {{ $employee->phone }}
                                            </span>
                                        @else
                                            <span class="text-muted small">Not provided</span>
                                        @endif
                                    </td>
                                    <td class="d-none d-lg-table-cell">
                                        @if($employee->shift_start && $employee->shift_end)
                                            <div class="badge-admin-role manager d-inline-block text-nowrap">
                                                <i class="fas fa-clock me-1"></i>
                                                <span>{{ $employee->shift_start->format('H:i') }} - {{ $employee->shift_end->format('H:i') }}</span>
                                            </div>
                                        @else
                                            <span class="text-muted small">Not set</span>
                                        @endif
                                    </td>
                                    <td>
                                        @switch($employee->status)
                                            @case('active')
                                                <div class="badge-admin-role d-inline-block" style="background: linear-gradient(135deg, #4CAF50 0%, #8BC34A 100%) !important; color: #fff !important;">
                                                    <i class="fas fa-check-circle me-1" aria-label="Active"></i>
                                                    <span>Active</span>
                                                </div>
                                                @break
                                            @case('on_leave')
                                                <div class="badge-admin-role cashier d-inline-block">
                                                    <i class="fas fa-user-clock me-1" aria-label="On Leave"></i> 
                                                    <span class="d-none d-sm-inline">On Leave</span>
                                                    <span class="d-inline d-sm-none">Leave</span>
                                                </div>
                                                @break
                                            @case('inactive')
                                                <div class="badge-admin-role baker d-inline-block">
                                                    <i class="fas fa-user-times me-1" aria-label="Inactive"></i> 
                                                    <span>Inactive</span>
                                                </div>
                                                @break
                                        @endswitch
                                    </td>
                                    <td class="d-none d-sm-table-cell">
                                        @if($employee->user)
                                            <div class="badge-admin-role {{ $employee->user->role }} d-inline-block text-nowrap">
                                                <i class="fas fa-user-check me-1"></i> 
                                                <span>{{ ucfirst($employee->user->role) }}</span>
                                            </div>
                                        @else
                                            <span class="text-muted small">No account</span>
                                        @endif
                                    </td>
                                    <td class="d-none d-lg-table-cell">
                                        <span class="text-muted small">{{ $employee->created_at->format('M d, Y') }}</span>
                                    </td>
                                    <td>
                                        <div class="d-flex gap-2 align-items-center">
                        <button type="button" class="btn-admin-light btn-sm border border-1 d-flex align-items-center gap-1"
                            onclick="window.location='{{ route('admin.employees.show', $employee) }}'"
                            title="View">
                                                <i class="fas fa-eye" aria-label="View"></i>
                                                <span class="small text-muted">View</span>
                                            </button>
                        <button type="button" class="btn-admin-secondary btn-sm border border-1 d-flex align-items-center gap-1"
                            onclick="window.location='{{ route('admin.employees.edit', $employee) }}'"
                            title="Edit">
                                                <i class="fas fa-edit" aria-label="Edit"></i>
                                                <span class="small text-muted">Edit</span>
                                            </button>
                                            <button type="button" class="btn-admin-info btn-sm border border-1 d-flex align-items-center gap-1"
                                                    onclick="toggleStatus({{ $employee->employee_id }})" title="Toggle Status">
                                                <i class="fas fa-{{ $employee->status === 'active' ? 'ban' : 'check' }}" aria-label="{{ $employee->status === 'active' ? 'Deactivate' : 'Activate' }}"></i>
                                                <span class="small text-muted">{{ $employee->status === 'active' ? 'Deactivate' : 'Activate' }}</span>
                                            </button>
                                            @if(!$employee->user)
                                                <button type="button" class="btn-admin-primary btn-sm border border-1 d-flex align-items-center gap-1"
                                                        onclick="openDeleteModal(this)"
                                                        data-name="{{ $employee->full_name }}"
                                                        data-id="{{ $employee->employee_id }}"
                                                        data-action="{{ route('admin.employees.destroy', $employee->employee_id) }}"
                                                        title="Delete">
                                                    <i class="fas fa-trash" aria-label="Delete"></i>
                                                    <span class="small text-white">Delete</span>
                                                </button>
                                            @endif
                                        </div>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="d-flex justify-content-between align-items-center mt-4 pt-3 border-top">
                    <div class="pagination-info">
                        @if($employees->count() > 0)
                            <i class="fas fa-info-circle me-1"></i>
                            Showing <strong>{{ $employees->firstItem() }}</strong> to <strong>{{ $employees->lastItem() }}</strong> 
                            of <strong>{{ $employees->total() }}</strong> employees
                        @else
                            <i class="fas fa-exclamation-circle me-1"></i>
                            No employees found
                        @endif
                    </div>
                    <div>
                        {{ $employees->appends(request()->query())->links('vendor.pagination.admin') }}
                    </div>
                </div>
            @else
                <div class="text-center py-5">
                    <i class="fas fa-users fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No employees found</h5>
                    <p class="text-muted">Get started by adding your first employee.</p>
                    <a href="{{ route('admin.employees.create') }}" class="btn-admin-secondary">
                        <i class="fas fa-user-plus me-2"></i> Add First Employee
                    </a>
                </div>
            @endif
        </div>
    </div>
</div>

<!-- Delete Employee Modal -->
<div id="deleteModal" class="sea-modal" aria-hidden="true">
    <div class="sea-modal-dialog">
        <div class="sea-modal-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0 flex-grow-1" style="flex-basis:80%;max-width:80%;">
                <i class="fas fa-trash me-2"></i> Confirm Deletion - <span id="deleteEmployeeName"></span>
            </h5>
            <div style="flex-basis:10%;max-width:10%;" class="text-end">
                <button type="button" class="btn-admin-light btn-sm" onclick="closeModal('deleteModal')">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        <div class="sea-modal-body">
            <form id="deleteForm" method="POST" action="#">
                @csrf
                @method('DELETE')
                <p>Are you sure you want to delete employee <strong id="deleteEmployeeNameStrong"></strong>? This action cannot be undone.</p>
                <div class="d-flex justify-content-end mt-3">
                    <button type="button" class="btn-admin-light me-2" onclick="closeModal('deleteModal')">Cancel</button>
                    <button type="submit" class="btn-admin-primary">Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>

@push('scripts')
<script>
function openDeleteModal(btn) {
    const name = btn.getAttribute('data-name');
    const action = btn.getAttribute('data-action');
    
    document.getElementById('deleteEmployeeName').textContent = name;
    document.getElementById('deleteEmployeeNameStrong').textContent = name;
    document.getElementById('deleteForm').setAttribute('action', action);
    
    document.getElementById('deleteModal').classList.add('show');
    document.body.style.overflow = 'hidden';
}

function closeModal(modalId) {
    document.getElementById(modalId).classList.remove('show');
    document.body.style.overflow = '';
}

// Close modal on backdrop click
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('sea-modal')) {
        closeModal(e.target.id);
    }
});

// Close modal on Escape key
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        const openModal = document.querySelector('.sea-modal.show');
        if (openModal) {
            closeModal(openModal.id);
        }
    }
});
</script>
@endpush
@endsection

--- End of File ---

File: .\resources\views\admin\employees\show.blade.php
@extends('layouts.admin')

@section('title', 'Employee Details')
@section('page-title', 'Employee Details - ' . $employee->full_name)

@section('content')
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.employees.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-user-circle"></i> Employee Details: {{ $employee->full_name }}
        </h1>
        <a href="{{ route('admin.employees.edit', $employee) }}" class="btn-admin-secondary ms-3 position-absolute end-0">
            <i class="fas fa-edit me-1"></i> Edit
        </a>
    </div>

    <div class="row">
        <!-- Employee Information -->
        <div class="col-md-8">
            <!-- Employee Information -->
            <div class="card kpi-card info shadow mb-4">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-user me-2"></i> Employee Information</h5>
                </div>
                <div class="card-body admin-card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="text-sea-dark mb-3">Basic Details</h6>
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>Full Name:</strong></td>
                                    <td>{{ $employee->full_name }}</td>
                                </tr>
                                <tr>
                                    <td><strong>Phone Number:</strong></td>
                                    <td>
                                        @if($employee->phone)
                                            {{ $employee->phone }}
                                        @else
                                            <span class="text-muted">Not provided</span>
                                        @endif
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Status:</strong></td>
                                    <td>
                                        @switch($employee->status)
                                            @case('active')
                                                <span class="badge-admin-role admin">
                                                    <i class="fas fa-check-circle me-1"></i> Active
                                                </span>
                                                @break
                                            @case('on_leave')
                                                <span class="badge-admin-role cashier">
                                                    <i class="fas fa-user-clock me-1"></i> On Leave
                                                </span>
                                                @break
                                            @case('inactive')
                                                <span class="badge-admin-role baker">
                                                    <i class="fas fa-user-times me-1"></i> Inactive
                                                </span>
                                                @break
                                        @endswitch
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Employee ID:</strong></td>
                                    <td><code>#{{ $employee->employee_id }}</code></td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-sea-dark mb-3">Work Information</h6>
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>Address:</strong></td>
                                    <td>
                                        @if($employee->address)
                                            {{ $employee->address }}
                                        @else
                                            <span class="text-muted">Not provided</span>
                                        @endif
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Work Shift:</strong></td>
                                    <td>
                                        @if($employee->shift_start && $employee->shift_end)
                                            <span class="badge-admin-role manager">
                                                <i class="fas fa-clock me-1"></i>
                                                {{ $employee->shift_start->format('H:i') }} - {{ $employee->shift_end->format('H:i') }}
                                            </span>
                                        @else
                                            <span class="text-muted">Not set</span>
                                        @endif
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Joined Date:</strong></td>
                                    <td>{{ $employee->created_at->format('F d, Y \a\t g:i A') }}</td>
                                </tr>
                                <tr>
                                    <td><strong>Days Active:</strong></td>
                                    <td>{{ $employee->created_at->diffInDays(now()) }} days</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- User Account Information -->
            @if($employee->user)
                <div class="card kpi-card info shadow">
                    <div class="card-header">
                        <h5 class="mb-0 text-sea-primary">
                            <i class="fas fa-user-circle me-2"></i> User Account Information
                        </h5>
                    </div>
                    <div class="card-body admin-card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6 class="text-sea-dark mb-3">Account Details</h6>
                                <table class="table table-borderless">
                                    <tr>
                                        <td><strong>Username:</strong></td>
                                        <td>{{ $employee->user->username }}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Email:</strong></td>
                                        <td>{{ $employee->user->email }}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Role:</strong></td>
                                        <td>
                                            <span class="badge-admin-role {{ $employee->user->role }}">
                                            @switch($employee->user->role)
                                                @case('admin')
                                                    <i class="fas fa-crown me-1"></i> Admin
                                                    @break
                                                @case('manager')
                                                    <i class="fas fa-user-tie me-1"></i> Manager
                                                    @break
                                                @case('baker')
                                                    <i class="fas fa-bread-slice me-1"></i> Baker
                                                    @break
                                                @case('cashier')
                                                    <i class="fas fa-cash-register me-1"></i> Cashier
                                                    @break
                                            @endswitch
                                            </span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>Account Status:</strong></td>
                                        <td>
                                            @if($employee->user->status === 'active')
                                                <span class="badge-admin-role admin">
                                                    <i class="fas fa-check-circle me-1"></i> Active
                                                </span>
                                            @else
                                                <span class="badge-admin-role baker">
                                                    <i class="fas fa-times-circle me-1"></i> Inactive
                                                </span>
                                            @endif
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-sea-dark mb-3">Account Dates</h6>
                                <table class="table table-borderless">
                                    <tr>
                                        <td><strong>Account Created:</strong></td>
                                        <td>{{ $employee->user->created_at->format('F d, Y \a\t g:i A') }}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Last Updated:</strong></td>
                                        <td>{{ $employee->user->updated_at->format('F d, Y \a\t g:i A') }}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>User ID:</strong></td>
                                        <td><code>#{{ $employee->user->user_id }}</code></td>
                                    </tr>
                                </table>
                            </div>
                        </div>                        
                        <div class="mt-3 pt-3 border-top">
                            <button type="button" class="btn-admin-secondary" onclick="window.location='{{ route('admin.users.show', $employee->user) }}'">
                                <i class="fas fa-external-link-alt me-2"></i> View User Account Details
                            </button>
                        </div>
                    </div>
                </div>
            @else
                <div class="alert-admin-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    This employee doesn't have a user account yet. 
                    <a href="{{ route('admin.users.create') }}" class="fw-bold text-decoration-underline">Create one here</a>.
                </div>
            @endif
        </div>

        <!-- Action Panel -->
        <div class="col-md-4">
            <!-- Quick Actions -->
            <div class="card kpi-card info shadow">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary">
                        <i class="fas fa-bolt me-2"></i> Quick Actions
                    </h5>
                </div>
                <div class="card-body admin-card-body">
                    <div class="d-grid gap-2">
                        <form action="{{ route('admin.employees.edit', $employee) }}" method="GET" class="d-inline">
                            <button type="submit" class="btn-admin-secondary w-100">
                                <i class="fas fa-edit me-2"></i> Edit Employee
                            </button>
                        </form>
                        
                        <form action="{{ route('admin.employees.toggle-status', $employee) }}" method="POST" class="d-inline">
                            @csrf
                            @method('PATCH')
                            <button type="submit" class="btn-admin-light w-100">
                                <i class="fas fa-{{ $employee->status === 'active' ? 'pause' : 'play' }} me-2"></i>
                                @if($employee->status === 'active')
                                    Mark as Inactive
                                @elseif($employee->status === 'inactive')
                                    Mark as Active
                                @else
                                    Mark as Active
                                @endif
                            </button>
                        </form>

                        @if(!$employee->user)
                            <a href="{{ route('admin.users.create') }}?emp_id={{ $employee->emp_id }}" 
                               class="btn-admin-secondary w-100">
                                <i class="fas fa-user-plus me-2"></i> Create User Account
                            </a>
                        @endif

                        @if(!$employee->user)
                            <button type="button" class="btn btn-danger w-100" 
                                    data-bs-toggle="modal" data-bs-target="#deleteModal">
                                <i class="fas fa-trash me-2"></i> Delete Employee
                            </button>
                        @endif
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if(!$employee->user)
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete employee <strong>{{ $employee->full_name }}</strong>?</p>
                <p class="text-danger"><i class="fas fa-exclamation-triangle me-2"></i> This action cannot be undone!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-admin-light" data-bs-dismiss="modal">Cancel</button>
                <form action="{{ route('admin.employees.destroy', $employee) }}" method="POST" class="d-inline">
                    @csrf
                    @method('DELETE')
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-2"></i> Delete Employee
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>
@endif
@endsection

--- End of File ---

File: .\resources\views\admin\inventory\create.blade.php
@extends('layouts.admin')

@section('title', 'Add Stock Movement')
@section('page-title', 'Add Stock Movement')

@section('content')
<div class="container-fluid">
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.inventory.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-plus-circle"></i> Add Stock Movement
        </h1>
    </div>

    <div class="card shadow-sm">
        <div class="card-body admin-card-body">
            <form method="POST" action="{{ route('admin.inventory.store') }}" class="row g-3">
                @csrf

                <div class="col-md-6">
                    <label class="form-label">Product</label>
                    <select name="product_id" class="form-select" required>
                        <option value="">Select product</option>
                        @foreach($products as $p)
                            <option value="{{ $p->prod_id }}" {{ (old('product_id', request('product_id'))==$p->prod_id) ? 'selected' : '' }}>
                                {{ $p->name }} ({{ $p->sku }})
                            </option>
                        @endforeach
                    </select>
                    @error('product_id')<div class="text-danger small">{{ $message }}</div>@enderror
                </div>

                <div class="col-md-3">
                    <label class="form-label">Movement Type</label>
                    <select name="movement_kind" class="form-select" required>
                        <option value="stock_in" {{ old('movement_kind')==='stock_in' ? 'selected' : '' }}>Stock In</option>
                        <option value="stock_out" {{ old('movement_kind')==='stock_out' ? 'selected' : '' }}>Stock Out</option>
                        <option value="adjustment" {{ old('movement_kind')==='adjustment' ? 'selected' : '' }}>Adjustment</option>
                    </select>
                    @error('movement_kind')<div class="text-danger small">{{ $message }}</div>@enderror
                </div>

                <div class="col-md-3">
                    <label class="form-label">Quantity</label>
                    <input type="number" min="1" step="1" name="quantity" class="form-control" value="{{ old('quantity', 1) }}" required>
                    @error('quantity')<div class="text-danger small">{{ $message }}</div>@enderror
                </div>

                <div class="col-12">
                    <label class="form-label">Notes</label>
                    <textarea name="notes" rows="3" class="form-control" placeholder="Optional details...">{{ old('notes') }}</textarea>
                    @error('notes')<div class="text-danger small">{{ $message }}</div>@enderror
                </div>

                <div class="col-12 mx-auto d-flex justify-content-end gap-2">
                    <button type="reset" class="btn-admin-light w-25">
                        <i class="fas fa-times me-2"></i> Cancel
                    </button>
                    <button type="submit" class="btn-admin-secondary w-25">
                        <i class="fas fa-save me-2"></i> Save Movement
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
@endsection


--- End of File ---

File: .\resources\views\admin\inventory\edit.blade.php
@extends('layouts.admin')

@section('title', 'Edit Movement')
@section('page-title', 'Edit Movement')

@section('content')
<div class="container-fluid">
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.inventory.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-edit"></i> Edit Movement #{{ $movement->movement_id }}
        </h1>
        <a href="{{ route('admin.inventory.show', $movement->movement_id) }}" class="btn-admin-secondary ms-3 position-absolute end-0">
            <i class="fas fa-eye me-1"></i> View
        </a>
    </div>

    <div class="card shadow-sm mb-3">
        <div class="card-body admin-card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Product</label>
                    <input class="form-control" value="{{ $movement->product->name }} ({{ $movement->product->sku }})" disabled>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Type</label>
                    <input class="form-control" value="{{ ucfirst(str_replace('_',' ', $movement->transaction_type)) }}" disabled>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Quantity</label>
                    <input class="form-control" value="{{ $movement->quantity }}" disabled>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Prev → Curr</label>
                    <input class="form-control" value="{{ $movement->previous_stock }} → {{ $movement->current_stock }}" disabled>
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-body admin-card-body">
            <form method="POST" action="{{ route('admin.inventory.update', $movement->movement_id) }}" class="row g-3">
                @csrf
                @method('PUT')

                <div class="col-12">
                    <label class="form-label">Notes</label>
                    <textarea name="notes" rows="4" class="form-control" placeholder="Update notes...">{{ old('notes', $movement->notes) }}</textarea>
                    @error('notes')<div class="text-danger small">{{ $message }}</div>@enderror
                </div>

                <div class="col-12 mx-auto d-flex justify-content-end gap-2 mt-4">
                    <button type="reset" class="btn-admin-light w-25">
                        <i class="fas fa-times me-2"></i> Cancel
                    </button>
                    <button type="submit" class="btn-admin-secondary w-25">
                        <i class="fas fa-save me-2"></i> Update
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
@endsection


--- End of File ---

File: .\resources\views\admin\inventory\index.blade.php
@extends('layouts.admin')

@section('title', 'Inventory Management')
@section('page-title', 'Inventory Management')

@section('content')
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-muted-sea">
            <i class="fas fa-warehouse"></i> Inventory Management
        </h1>
        <div class="btn-group">
            <a href="{{ route('admin.inventory.create') }}" class="btn-admin-secondary me-2">
                <i class="fas fa-plus me-2"></i> Add Movement
            </a>
            <a href="{{ route('admin.inventory.low-stock-alerts') }}" class="btn-admin-light">
                <i class="fas fa-exclamation-triangle me-2"></i> Low Stock Alerts
            </a>
        </div>
    </div>

    <!-- Filters -->
    <div class="card admin-filter-card shadow mb-4">
        <div class="card-body admin-card-body">
            <form method="GET" class="row g-3 align-items-end">
                <div class="col-md-3">
                    <label class="form-label">Search</label>
                    <input type="text" name="search" class="form-control" value="{{ request('search') }}" placeholder="Product name or SKU">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Product</label>
                    <select name="product_id" class="form-select">
                        <option value="">All</option>
                        @foreach($products as $p)
                            <option value="{{ $p->prod_id }}" {{ request('product_id')==$p->prod_id ? 'selected' : '' }}>{{ $p->name }} ({{ $p->sku }})</option>
                        @endforeach
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Type</label>
                    <select name="type" class="form-select">
                        <option value="">All</option>
                        <option value="stock_in" {{ request('type')==='stock_in' ? 'selected' : '' }}>Stock In</option>
                        <option value="stock_out" {{ request('type')==='stock_out' ? 'selected' : '' }}>Stock Out</option>
                        <option value="adjustment" {{ request('type')==='adjustment' ? 'selected' : '' }}>Adjustment</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">From</label>
                    <input type="date" name="date_from" class="form-control" value="{{ request('date_from') }}">
                </div>
                <div class="col-md-2">
                    <label class="form-label">To</label>
                    <input type="date" name="date_to" class="form-control" value="{{ request('date_to') }}">
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button type="submit" class="btn-admin-secondary me-2">
                        <i class="fas fa-search me-2"></i>Filter
                    </button>
                    <button type="button" onclick="window.location='{{ route('admin.inventory.index') }}'" class="btn-admin-light">
                        <i class="fas fa-undo me-2"></i>Reset
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Movements Table -->
    <div class="card kpi-card shadow">
        <div class="card-header py-3 d-flex align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-sea-primary"><i class="fas fa-list me-2"></i> Stock Movements ({{ $movements->total() }})</h6>
        </div>
        <div class="card-body admin-card-body">
            @if($movements->count() === 0)
                <div class="text-center text-muted py-5">
                    <i class="fas fa-warehouse fa-3x mb-3 d-block"></i>
                    No movements found.
                </div>
            @else
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Date</th>
                                <th>Product</th>
                                <th>Type</th>
                                <th class="text-end">Qty</th>
                                <th class="text-center">Prev → Curr</th>
                                <th>Notes</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($movements as $mv)
                                <tr>
                                    <td>{{ $mv->created_at->format('Y-m-d H:i') }}</td>
                                    <td><a href="{{ route('admin.products.show', $mv->product) }}" class="text-sea-dark text-decoration-none"><i class="fas fa-box text-sea-primary me-2"></i>{{ $mv->product->name }}</a></td>
                                    <td>
                                        @switch($mv->transaction_type)
                                            @case('stock_in')<span class="badge-chip bg-sea-light"><i class="fas fa-arrow-down me-1"></i> In</span>@break
                                            @case('stock_out')<span class="badge-chip bg-sea-light"><i class="fas fa-arrow-up me-1"></i> Out</span>@break
                                            @default <span class="badge-chip bg-sea-light"><i class="fas fa-balance-scale me-1"></i> Adj</span>
                                        @endswitch
                                    </td>
                                    <td class="text-end">{{ $mv->quantity }}</td>
                                    <td class="text-center">{{ $mv->previous_stock }} → {{ $mv->current_stock }}</td>
                                    <td>{{ \Illuminate\Support\Str::limit($mv->notes, 80) }}</td>
                                    <td>
                                        <div class="d-flex gap-2 align-items-center">
                                            <button type="button" class="btn-admin-light btn-sm border border-1 d-flex align-items-center gap-1" title="View" onclick="window.location='{{ route('admin.inventory.show', $mv->movement_id) }}'">
                                                <i class="fas fa-eye" aria-label="View"></i>
                                                <span class="small text-muted">View</span>
                                            </button>
                                            <button type="button" class="btn-admin-secondary btn-sm border border-1 d-flex align-items-center gap-1" title="Edit" onclick="window.location='{{ route('admin.inventory.edit', $mv->movement_id) }}'">
                                                <i class="fas fa-edit" aria-label="Edit"></i>
                                                <span class="small text-muted">Edit</span>
                                            </button>
                                            <button type="button" class="btn-admin-delete btn-sm border border-1 d-flex align-items-center gap-1" title="Delete"
                                            data-action="{{ route('admin.inventory.destroy', $mv->movement_id) }}"
                                                    onclick="openDeleteInvModal(this)">
                                                <i class="fas fa-trash" aria-label="Delete"></i>
                                                <span class="small text-white">Delete</span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
                <div class="d-flex justify-content-end">
                    {{ $movements->appends(request()->query())->links('vendor.pagination.admin') }}
                </div>
            @endif
        </div>
    </div>

    <!-- Delete Modal -->
    <div id="deleteInvModal" class="sea-modal" aria-hidden="true">
        <div class="sea-modal-dialog">
            <div class="sea-modal-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0 flex-grow-1" style="flex-basis:80%;max-width:80%;">
                    <i class="fas fa-trash me-2"></i> Confirm Deletion - <span id="deleteMovementProduct"></span>
                </h5>
                <div style="flex-basis:10%;max-width:10%;" class="text-end">
                    <button type="button" class="btn-admin-light btn-sm" onclick="closeModal('deleteInvModal')">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="sea-modal-body">
                <form id="deleteInvForm" method="POST" action="#">
                    @csrf
                    @method('DELETE')
                    <p>
                        Are you sure you want to delete <strong id="deleteMovementProductName"></strong>? Deleting a movement will revert the product stock to its previous value. This action cannot be undone.
                    </p>
                    <div class="d-flex justify-content-end mt-3">
                        <button type="button" class="btn-admin-light me-2" onclick="closeModal('deleteInvModal')">Cancel</button>
                        <button type="submit" class="btn-admin-primary">Delete</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@endsection

@push('scripts')
<script>
function openDeleteInvModal(btn){
    const modal = document.getElementById('deleteInvModal');
    const form = document.getElementById('deleteInvForm');
    form.action = btn.dataset.action;
    modal.classList.add('show');
}
function closeModal(id){ document.getElementById(id).classList.remove('show'); }
document.querySelectorAll('.sea-modal').forEach(m => {
    m.addEventListener('click', e => { if(e.target === m){ m.classList.remove('show'); } });
});
</script>
@endpush

--- End of File ---

File: .\resources\views\admin\inventory\low-stock-alerts.blade.php
@extends('layouts.admin')

@section('title', 'Low Stock Alerts')
@section('page-title', 'Low Stock Alerts')

@section('content')
<div class="container-fluid">
    <div class="d-flex align-items-center mb-4">
        <div>
            <a href="{{ route('admin.inventory.index') }}" class="btn-admin-light me-3">
                <i class="fas fa-arrow-left me-2"></i> Back to Movements
            </a>
        </div>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-exclamation-triangle"></i> Low Stock Alerts
        </h1>
        <div style="width:120px"></div>
    </div>

    <div class="card shadow-sm">
        <div class="card-body admin-card-body">
            @if($products->isEmpty())
                <div class="text-center text-muted py-5">
                    <i class="fas fa-check-circle fa-3x mb-3 d-block"></i>
                    All products are above minimum stock.
                </div>
            @else
                <div class="table-responsive">
                    <table class="table table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Product</th>
                                <th class="text-end">On Hand</th>
                                <th class="text-end">Minimum</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($products as $p)
                                <tr>
                                    <td>
                                        <a href="{{ route('admin.products.show', $p) }}" class="text-decoration-none text-sea-dark">
                                            <i class="fas fa-box me-2 text-sea-primary"></i>{{ $p->name }} ({{ $p->sku }})
                                        </a>
                                    </td>
                                    <td class="text-end">{{ optional($p->inventoryStock)->quantity ?? 0 }}</td>
                                    <td class="text-end">{{ optional($p->inventoryStock)->reorder_level ?? 0 }}</td>
                                    <td>
                                        <button type="button" onclick="location.href='{{ route('admin.inventory.create', ['product_id' => $p->prod_id]) }}'" class="btn-admin-secondary btn-sm">
                                            <i class="fas fa-plus me-1"></i> Add Stock
                                        </button>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            @endif
        </div>
    </div>
</div>
@endsection


--- End of File ---

File: .\resources\views\admin\inventory\show.blade.php
@extends('layouts.admin')

@section('title', 'Movement Details')
@section('page-title', 'Movement Details')

@section('content')
<div class="container-fluid">
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.inventory.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-exchange-alt"></i> Movement #{{ $movement->movement_id }}
        </h1>
        <a href="{{ route('admin.inventory.edit', $movement->movement_id) }}" class="btn-admin-secondary ms-3 position-absolute end-0">
            <i class="fas fa-edit me-1"></i> Edit
        </a>
    </div>

    <div class="card kpi-card info shadow-sm">
        <div class="card-header">
            <h5 class="mb-0 text-sea-primary"><i class="fas fa-info-circle me-2"></i> Movement Information</h5>
        </div>
        <div class="card-body admin-card-body">
            <table class="table table-borderless">
                <tr>
                    <td width="200"><strong>Date:</strong></td>
                    <td>{{ $movement->created_at->format('Y-m-d H:i') }}</td>
                </tr>
                <tr>
                    <td><strong>Product:</strong></td>
                    <td>
                        <a href="{{ route('admin.products.show', $movement->product) }}" class="text-decoration-none">
                            {{ $movement->product->name }} <span class="text-muted">({{ $movement->product->sku }})</span>
                        </a>
                    </td>
                </tr>
                <tr>
                    <td><strong>Transaction Type:</strong></td>
                    <td>
                        @php
                            $typeClass = match($movement->transaction_type) {
                                'stock_in' => 'admin',
                                'stock_out' => 'baker',
                                'adjustment' => 'manager',
                                default => ''
                            };
                        @endphp
                        <span class="badge-admin-role {{ $typeClass }}">
                            @if($movement->transaction_type === 'stock_in')
                                <i class="fas fa-arrow-up me-1"></i>
                            @elseif($movement->transaction_type === 'stock_out')
                                <i class="fas fa-arrow-down me-1"></i>
                            @else
                                <i class="fas fa-balance-scale me-1"></i>
                            @endif
                            {{ ucfirst(str_replace('_', ' ', $movement->transaction_type)) }}
                        </span>
                    </td>
                </tr>
                <tr>
                    <td><strong>Quantity:</strong></td>
                    <td><strong class="text-sea-primary">{{ $movement->quantity }}</strong> units</td>
                </tr>
                <tr>
                    <td><strong>Stock Change:</strong></td>
                    <td>
                        <span class="text-muted">{{ $movement->previous_stock }}</span> 
                        <i class="fas fa-arrow-right mx-2"></i> 
                        <strong>{{ $movement->current_stock }}</strong>
                    </td>
                </tr>
                <tr>
                    <td><strong>Notes:</strong></td>
                    <td>{{ $movement->notes ?? '—' }}</td>
                </tr>
            </table>
        </div>
    </div>
</div>
@endsection


--- End of File ---

File: .\resources\views\admin\inventory-reports\index.blade.php
@extends('layouts.admin')
@section('title', 'Inventory Reports')
@section('page-title', 'Inventory Reports')

@section('content')
<div class="container-fluid">
<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3 mb-0 text-muted-sea">
        <i class="fas fa-warehouse me-2"></i> Inventory Reports
    </h1>
    <a href="{{ route('admin.inventory-reports.export', request()->all()) }}" class="btn-admin-primary">
        <i class="fas fa-file-export me-2"></i> Export PDF
    </a>
    </div>

    <div class="card admin-filter-card shadow mb-4">
        <div class="card-body admin-card-body">
            <form method="GET" action="{{ route('admin.inventory-reports.index') }}" class="row g-3 align-items-end">
                <div class="col-md-2">
                    <label class="form-label">From</label>
                    <input type="date" name="date_from" class="form-control" value="{{ $dateFrom }}">
                </div>
                <div class="col-md-2">
                    <label class="form-label">To</label>
                    <input type="date" name="date_to" class="form-control" value="{{ $dateTo }}">
                </div>
                <div class="col-md-2">
                    <label class="form-label">Product</label>
                    <select name="prod_id" class="form-select">
                        <option value="">All Products</option>
                        @foreach($products as $p)
                            <option value="{{ $p->prod_id }}" {{ request('prod_id') == $p->prod_id ? 'selected' : '' }}>
                                {{ $p->sku }} - {{ $p->name }}
                            </option>
                        @endforeach
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Type</label>
                    <select name="transaction_type" class="form-select">
                        <option value="">All</option>
                        <option value="stock_in" {{ request('transaction_type')=='stock_in' ? 'selected' : '' }}>Stock In</option>
                        <option value="stock_out" {{ request('transaction_type')=='stock_out' ? 'selected' : '' }}>Stock Out</option>
                        <option value="adjustment" {{ request('transaction_type')=='adjustment' ? 'selected' : '' }}>Adjustment</option>
                    </select>
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button type="submit" class="btn-admin-secondary">
                        <i class="fas fa-filter me-1"></i> Filter
                    </button>
                    <button type="reset" class="btn-admin-light" onclick="window.location='{{ route('admin.inventory-reports.index') }}'">
                        <i class="fas fa-undo me-1"></i> Reset
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card kpi-card">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div class="text-sea-primary">
                        <i class="fas fa-arrow-down fa-2x"></i>
                    </div>
                    <div class="flex-grow-1 text-end">
                        <h3 class="mb-0">{{ number_format($totals['stock_in'] ?? 0) }}</h3>
                        <p class="text-muted mb-0">Total Stock In</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card kpi-card">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div class="text-sea-primary">
                        <i class="fas fa-arrow-up fa-2x"></i>
                    </div>
                    <div class="flex-grow-1 text-end">
                        <h3 class="mb-0">{{ number_format($totals['stock_out'] ?? 0) }}</h3>
                        <p class="text-muted mb-0">Total Stock Out</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card kpi-card">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div class="text-sea-primary">
                        <i class="fas fa-sliders-h fa-2x"></i>
                    </div>
                    <div class="flex-grow-1 text-end">
                        <h3 class="mb-0">{{ number_format($totals['adjustment'] ?? 0) }}</h3>
                        <p class="text-muted mb-0">Adjustments</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card kpi-card shadow">
        <div class="card-body admin-card-body">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h5 class="mb-0">Movement Ledger</h5>
                <div class="d-flex gap-2 align-items-center">
                    <button type="button" class="btn-admin-light btn-sm border border-1 d-flex align-items-center gap-1" onclick="window.location='{{ route('admin.inventory-reports.show', request()->all()) }}'" title="Summary View">
                        <i class="fas fa-chart-line" aria-label="Summary View"></i>
                        <span class="small text-muted">Summary</span>
                    </button>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-borderless align-middle">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Product</th>
                            <th>Type</th>
                            <th class="text-end">Qty</th>
                            <th class="text-end">Prev</th>
                            <th class="text-end">Current</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @forelse($movements as $m)
                            <tr>
                                <td>{{ $m->created_at->format('Y-m-d H:i') }}</td>
                                <td>{{ $m->product->sku ?? '-' }} - {{ $m->product->name ?? 'Unknown' }}</td>
                                <td>
                                    @if($m->transaction_type == 'stock_in')
                                        <span class="badge-admin-role" style="background: linear-gradient(135deg, #4CAF50 0%, #8BC34A 100%) !important; color: #fff !important;">
                                            <i class="fas fa-arrow-down me-1" aria-label="Stock In"></i> Stock In
                                        </span>
                                    @elseif($m->transaction_type == 'stock_out')
                                        <span class="badge-admin-role admin">
                                            <i class="fas fa-arrow-up me-1" aria-label="Stock Out"></i> Stock Out
                                        </span>
                                    @else
                                        <span class="badge-admin-role manager">
                                            <i class="fas fa-sliders-h me-1" aria-label="Adjustment"></i> Adjustment
                                        </span>
                                    @endif
                                </td>
                                <td class="text-end">{{ $m->quantity }}</td>
                                <td class="text-end">{{ $m->previous_stock }}</td>
                                <td class="text-end">{{ $m->current_stock }}</td>
                                <td>{{ $m->notes }}</td>
                            </tr>
                        @empty
                            <tr>
                                <td colspan="8" class="text-center text-muted">No movements for selected filters.</td>
                            </tr>
                        @endforelse
                    </tbody>
                </table>
            </div>
            <div>
                {{ $movements->appends(request()->all())->links('vendor.pagination.admin') }}
            </div>
        </div>
    </div>
    </div>
@endsection


--- End of File ---

File: .\resources\views\admin\inventory-reports\pdf.blade.php
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Inventory Report for {{ $dateFrom }} to {{ $dateTo }}</title>
    <style>
        body { font-family: DejaVu Sans, sans-serif; font-size: 12px; }
        h2 { margin: 0 0 10px 0; }
        table { width: 100%; border-collapse: collapse; }
        th, td { padding: 6px 8px; border-bottom: 1px solid #ddd; }
        th { background: #EEF5DB; }
        .text-end { text-align: right; }
        .muted { color: #666; }
    </style>
    </head>
<body>
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Inventory Report</title>
        <style>
            * { box-sizing: border-box; }
            body { font-family: DejaVu Sans, Arial, Helvetica, sans-serif; font-size: 12px; color: #111827; margin: 16px; }
            h1, h2, h3, h4, h5 { margin: 0; }
            .muted { color: #6b7280; }
            .report-header { margin-bottom: 14px; }
            .period { font-size: 11px; color: #6b7280; margin-top: 4px; }
            .summary { display: table; width: 100%; margin: 10px 0 14px; }
            .summary .cell { display: table-cell; width: 25%; padding: 8px 10px; border: 1px solid #e5e7eb; }
            .label { font-size: 11px; color: #6b7280; margin-bottom: 4px; }
            table { width: 100%; border-collapse: collapse; }
            th, td { border: 1px solid #e5e7eb; padding: 6px 8px; }
            thead th { background: #f9fafb; font-weight: 600; }
            tfoot th { background: #f3f4f6; }
            .text-end { text-align: right; }
        </style>
        <div style="text-align: center; margin-bottom: 18px;">
            <img src="{{ public_path('images/Arbee\'s_logo_round.png') }}" alt="Logo" style="height:72px; border: 2px solid black; border-radius: 50%;">
            <div style="font-size: 1.7em; font-weight: bold; margin-top: 8px; letter-spacing: 1px;">
                Arbee's Bakeshop
            </div>
        </div>
    </head>
    <body>
        <div class="report-header">
            <h2>Inventory Report</h2>
            <div class="period">Period: <b>{{ $dateFrom }} to {{ $dateTo }}<b></div>
        </div>

        <div class="summary">
            <div class="cell">
                <div class="label">Total Stock In</div>
                <div><strong>{{ number_format($totalIn ?? 0) }}</strong></div>
            </div>
            <div class="cell">
                <div class="label">Total Stock Out</div>
                <div><strong>{{ number_format($totalOut ?? 0) }}</strong></div>
            </div>
            <div class="cell">
                <div class="label">Adjustments</div>
                <div><strong>{{ number_format($totalAdjust ?? 0) }}</strong></div>
            </div>
            <div class="cell">
                <div class="label">Net Change</div>
                <div><strong>{{ number_format($netChange ?? 0) }}</strong></div>
            </div>
        </div>

        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Product</th>
                    <th>Type</th>
                    <th class="text-end">Qty</th>
                    <th class="text-end">Prev</th>
                    <th class="text-end">Current</th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody>
                @forelse($movements as $m)
                    <tr>
                        <td>{{ \Illuminate\Support\Carbon::parse($m->created_at)->format('Y-m-d H:i') }}</td>
                        <td>{{ $m->product->sku ?? '-' }} - {{ $m->product->name ?? 'Unknown' }}</td>
                        <td>{{ ucfirst(str_replace('_',' ', $m->transaction_type)) }}</td>
                        <td class="text-end">{{ $m->quantity }}</td>
                        <td class="text-end">{{ $m->previous_stock }}</td>
                        <td class="text-end">{{ $m->current_stock }}</td>
                        <td>{{ $m->notes }}</td>
                    </tr>
                @empty
                    <tr>
                        <td colspan="7" class="muted">No movements in range.</td>
                    </tr>
                @endforelse
            </tbody>
            <tfoot>
                <tr>
                    <th colspan="3" class="text-end">Totals</th>
                    <th class="text-end">{{ number_format(($totalIn ?? 0) - ($totalOut ?? 0) + ($totalAdjust ?? 0)) }}</th>
                    <th colspan="3">&nbsp;</th>
                </tr>
            </tfoot>
        </table>
    </body>
    </html>


--- End of File ---

File: .\resources\views\admin\inventory-reports\show.blade.php
@extends('layouts.admin')
@section('title', 'Inventory Summary')
@section('page-title', 'Inventory Summary')

@section('content')
<div class="container-fluid">
<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3 mb-0 text-muted-sea">
        <i class="fas fa-chart-line me-2"></i> Inventory Summary
    </h1>
    <div>
        <a href="{{ route('admin.inventory-reports.index', request()->all()) }}" class="btn-admin-light me-2">
            <i class="fas fa-list me-1"></i> Ledger View
        </a>
        <a href="{{ route('admin.inventory-reports.export', request()->all()) }}" class="btn-admin-primary">
            <i class="fas fa-file-export me-2"></i> Export PDF
        </a>
    </div>
    </div>

<div class="card admin-filter-card shadow mb-4">
    <div class="card-body admin-card-body">
        <form method="GET" action="{{ route('admin.inventory-reports.show') }}" class="row g-3 align-items-end">
            <div class="col-md-3">
                <label class="form-label">From</label>
                <input type="date" name="date_from" class="form-control" value="{{ $dateFrom }}">
            </div>
            <div class="col-md-3">
                <label class="form-label">To</label>
                <input type="date" name="date_to" class="form-control" value="{{ $dateTo }}">
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <button type="submit" class="btn-admin-secondary">
                    <i class="fas fa-filter me-1"></i> Filter
                </button>
            </div>
        </form>
    </div>
</div>

<div class="row g-3">
    <div class="col-lg-7">
        <div class="card kpi-card h-100 shadow">
            <div class="card-body admin-card-body">
                <h5 class="mb-3">Daily Movements</h5>
                <div class="table-responsive">
                    <table class="table table-borderless align-middle">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th class="text-end">Stock In</th>
                                <th class="text-end">Stock Out</th>
                                <th class="text-end">Adjustments</th>
                                <th class="text-end">Net</th>
                            </tr>
                        </thead>
                        <tbody>
                            @forelse($daily as $d)
                                <tr>
                                    <td>{{ $d->date }}</td>
                                    <td class="text-end">{{ number_format($d->total_in) }}</td>
                                    <td class="text-end">{{ number_format($d->total_out) }}</td>
                                    <td class="text-end">{{ number_format($d->total_adjust) }}</td>
                                    <td class="text-end">{{ number_format(($d->total_in ?? 0) - ($d->total_out ?? 0) + ($d->total_adjust ?? 0)) }}</td>
                                </tr>
                            @empty
                                <tr>
                                    <td colspan="5" class="text-center text-muted">No data in selected range.</td>
                                </tr>
                            @endforelse
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-5">
        <div class="card kpi-card h-100 shadow">
            <div class="card-body admin-card-body">
                <h5 class="mb-3">Top Stock Outs</h5>
                <div class="table-responsive">
                    <table class="table table-borderless align-middle">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th class="text-end">Total Out</th>
                            </tr>
                        </thead>
                        <tbody>
                            @forelse($topOut as $row)
                                <tr>
                                    <td>{{ $row->sku }} - {{ $row->name }}</td>
                                    <td class="text-end">{{ number_format($row->total_out) }}</td>
                                </tr>
                            @empty
                                <tr>
                                    <td colspan="2" class="text-center text-muted">No stock-out data.</td>
                                </tr>
                            @endforelse
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    </div>

@endsection


--- End of File ---

File: .\resources\views\admin\partials\delete-modal.blade.php
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header card-header-sea-light">
        <h5 class="modal-title" id="deleteModalLabel"><i class="fas fa-exclamation-triangle text-danger me-2"></i> Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Are you sure you want to delete this record? This action cannot be undone.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn-admin-light" data-bs-dismiss="modal">Cancel</button>
        <form method="POST" action="#">
            @csrf
            @method('DELETE')
            <button type="submit" class="btn-admin-primary">
                <i class="fas fa-trash me-2"></i> Delete
            </button>
        </form>
      </div>
    </div>
  </div>
</div>

--- End of File ---

File: .\resources\views\admin\productions\create.blade.php
@extends('layouts.admin')
@section('title', 'New Production')
@section('page-title', 'New Production')

@section('content')
<div class="d-flex align-items-center mb-4" style="position:relative;">
    <a href="{{ route('admin.productions.index') }}" class="btn-admin-light me-3 position-absolute start-0">
        <i class="fas fa-arrow-left me-1"></i> Back
    </a>
    <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
        <i class="fas fa-plus-circle me-2"></i> Create New Production
    </h1>
</div>

<form method="POST" action="{{ route('admin.productions.store') }}">
    @csrf
    @include('admin.productions._form')
</form>
@endsection


--- End of File ---

File: .\resources\views\admin\productions\edit.blade.php
@extends('layouts.admin')
@section('title', 'Edit Production')
@section('page-title', 'Edit Production')

@section('content')
<div class="d-flex align-items-center mb-4" style="position:relative;">
    <a href="{{ route('admin.productions.index') }}" class="btn-admin-light me-3 position-absolute start-0">
        <i class="fas fa-arrow-left me-1"></i> Back
    </a>
    <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
        <i class="fas fa-edit me-2"></i> Edit Production - {{ $production->batch_number }}
    </h1>
</div>

<form method="POST" action="{{ route('admin.productions.update', $production) }}">
    @csrf
    @method('PUT')
    @include('admin.productions._form')
</form>
@endsection


--- End of File ---

File: .\resources\views\admin\productions\index.blade.php
@extends('layouts.admin')
@section('title', 'Production Orders')
@section('page-title', 'Production Orders')

@section('content')
<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-muted-sea">
            <i class="fas fa-industry"></i> Production Orders
        </h1>
        <a href="{{ route('admin.productions.create') }}" class="btn-admin-secondary">
            <i class="fas fa-plus me-2"></i> New Production
        </a>
    </div>

    <div class="card admin-filter-card shadow mb-4">
        <div class="card-body admin-card-body">
            <form method="GET" class="row g-3">
                <div class="col-md-2">
                    <label class="form-label">Status</label>
                    <select name="status" class="form-select">
                        <option value="">All</option>
                        @foreach(['pending','in_progress','completed','cancelled'] as $s)
                            <option value="{{ $s }}" {{ request('status')===$s ? 'selected' : '' }}>{{ ucfirst(str_replace('_',' ',$s)) }}</option>
                        @endforeach
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Product</label>
                    <select name="prod_id" class="form-select">
                        <option value="">All products</option>
                        @foreach($products as $p)
                            <option value="{{ $p->prod_id }}" {{ request('prod_id')==$p->prod_id ? 'selected' : '' }}>{{ $p->name }} ({{ $p->sku }})</option>
                        @endforeach
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Baker</label>
                    <select name="baker_id" class="form-select">
                        <option value="">All bakers</option>
                        @foreach($employees as $emp)
                            <option value="{{ $emp->emp_id }}" {{ request('baker_id')==$emp->emp_id ? 'selected' : '' }}>{{ $emp->full_name ?? ($emp->first_name.' '.$emp->last_name) }}</option>
                        @endforeach
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Search</label>
                    <input type="text" name="search" class="form-control" value="{{ request('search') }}" placeholder="Batch # or notes">
                </div>
                <div class="col-md-3">
                    <label class="form-label">From</label>
                    <input type="date" name="date_from" class="form-control" value="{{ request('date_from') }}">
                </div>
                <div class="col-md-3">
                    <label class="form-label">To</label>
                    <input type="date" name="date_to" class="form-control" value="{{ request('date_to') }}">
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button type="submit" class="btn-admin-secondary me-2">
                        <i class="fas fa-search me-1"></i> Filter
                    </button>
                    <button type="reset" class="btn-admin-light me-2" onclick="window.location='{{ route('admin.productions.index') }}'">
                        <i class="fas fa-undo me-1"></i> Reset
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div class="card kpi-card shadow">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-sea-primary">Production Batches ({{ $productions->total() }})</h6>
        </div>
        <div class="card-body admin-card-body">
            @if($productions->count())
                <div class="table-responsive">
                    <table class="table table-bordered align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Batch #</th>
                                <th>Product</th>
                                <th class="text-end">Quantity</th>
                                <th>Baker</th>
                                <th>Produced</th>
                                <th>Expires</th>
                                <th>Status</th>
                                <th width="240" class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($productions as $production)
                                <tr>
                                    <td><a href="{{ route('admin.productions.show', $production) }}" class="text-decoration-none">{{ $production->batch_number }}</a></td>
                                    <td>{{ $production->product?->name }} <small class="text-muted">({{ $production->product?->sku }})</small></td>
                                    <td class="text-end">{{ number_format($production->quantity_produced) }}</td>
                                    <td>{{ $production->baker?->full_name ?? ($production->baker?->first_name.' '.$production->baker?->last_name) }}</td>
                                    <td>{{ $production->production_date?->format('Y-m-d') }}</td>
                                    <td>
                                        @if($production->expiration_date)
                                            {{ $production->expiration_date->format('Y-m-d') }}
                                        @else
                                            <span class="text-muted">—</span>
                                        @endif
                                    </td>
                                    <td>
                                        @php
                                            $status = $production->status;
                                            $statusMap = [
                                                'pending' => ['label' => 'Pending', 'icon' => 'hourglass-half', 'class' => 'admin', 'time' => $production->pending_at],
                                                'in_progress' => ['label' => 'In Progress', 'icon' => 'cogs', 'class' => 'baker', 'time' => $production->in_progress_at],
                                                'completed' => ['label' => 'Completed', 'icon' => 'check-circle', 'class' => 'manager', 'time' => $production->completed_at],
                                                'cancelled' => ['label' => 'Cancelled', 'icon' => 'times-circle', 'class' => '', 'time' => $production->updated_at],
                                            ];
                                            $current = $statusMap[$status] ?? null;
                                        @endphp
                                        @if($current)
                                            <span class="badge-admin-role {{ $current['class'] }}">
                                                <i class="fas fa-{{ $current['icon'] }} me-1"></i> {{ $current['label'] }}
                                            </span>
                                            @if($current['time'])
                                                <span class="text-muted small ms-2">({{ $current['time']->format('M d, Y H:i') }})</span>
                                            @endif
                                        @endif
                                        <div class="mt-1" style="max-width:120px;">
                                            <div class="progress" style="height: 6px;">
                                                @php
                                                    $progress = 0;
                                                    if($status==='pending') $progress=20;
                                                    elseif($status==='in_progress') $progress=60;
                                                    elseif($status==='completed') $progress=100;
                                                    elseif($status==='cancelled') $progress=0;
                                                @endphp
                                                <div class="progress-bar bg-success" role="progressbar" style="width: {{ $progress }}%" aria-valuenow="{{ $progress }}" aria-valuemin="0" aria-valuemax="100"></div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex gap-2 align-items-center">
                                            <button type="button" class="btn-admin-light btn-sm border border-1 d-flex align-items-center gap-1" 
                                                    onclick="window.location='{{ route('admin.productions.show', $production) }}'" 
                                                    title="View">
                                                <i class="fas fa-eye" aria-label="View"></i>
                                                <span class="small text-muted">View</span>
                                            </button>
                                            <button type="button" class="btn-admin-secondary btn-sm border border-1 d-flex align-items-center gap-1" 
                                                    onclick="window.location='{{ route('admin.productions.edit', $production) }}'" 
                                                    title="Edit">
                                                <i class="fas fa-edit" aria-label="Edit"></i>
                                                <span class="small text-muted">Edit</span>
                                            </button>
                                            @if($production->status !== 'completed')
                                                <form action="{{ route('admin.productions.cancel', $production) }}" method="POST" class="d-inline">
                                                    @csrf
                                                    @method('PATCH')
                                                    <button type="submit" class="btn-admin-info btn-sm border border-1 d-flex align-items-center gap-1" title="Cancel Production">
                                                        <i class="fas fa-ban" aria-label="Cancel"></i>
                                                        <span class="small text-muted">Cancel</span>
                                                    </button>
                                                </form>
                                            @endif
                                            @if($production->status !== 'completed')
                                                <button type="button" class="btn-admin-delete btn-sm border border-1 d-flex align-items-center gap-1" 
                                                        onclick="openDeleteModal(this)"
                                                        data-batch="{{ $production->batch_number }}"
                                                        data-product="{{ $production->product->name ?? 'N/A' }}"
                                                        data-action="{{ route('admin.productions.destroy', $production) }}" 
                                                        title="Delete">
                                                    <i class="fas fa-trash" aria-label="Delete"></i>
                                                    <span class="small text-white">Delete</span>
                                                </button>
                                            @endif
                                        </div>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>Showing {{ $productions->firstItem() }} to {{ $productions->lastItem() }} of {{ $productions->total() }}</div>
                    {{ $productions->appends(request()->query())->links('vendor.pagination.admin') }}
                </div>
            @else
                <div class="text-center py-4">
                    <i class="fas fa-industry fa-3x text-gray-300 mb-3"></i>
                    <h5>No production orders found</h5>
                </div>
            @endif
        </div>
    </div>
</div>

<!-- Delete Production Modal -->
<div id="deleteProductionModal" class="sea-modal" aria-hidden="true">
    <div class="sea-modal-dialog">
        <div class="sea-modal-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0 flex-grow-1" style="flex-basis:80%;max-width:80%;">
                <i class="fas fa-trash me-2"></i> Confirm Deletion - <span id="deleteProductionBatch"></span>
            </h5>
            <div style="flex-basis:10%;max-width:10%;" class="text-end">
                <button type="button" class="btn-admin-light btn-sm" onclick="closeModal('deleteProductionModal')">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        <div class="sea-modal-body">
            <form id="deleteProductionForm" method="POST" action="#">
                @csrf
                @method('DELETE')
                <p>
                    Are you sure you want to delete production batch <strong id="deleteProductionBatchName"></strong> 
                    for product <strong id="deleteProductionProduct"></strong>? 
                    This will revert the inventory stock changes. This action cannot be undone.
                </p>
                <div class="d-flex justify-content-end mt-3">
                    <button type="button" class="btn-admin-light me-2" onclick="closeModal('deleteProductionModal')">Cancel</button>
                    <button type="submit" class="btn-admin-primary">Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>

@push('scripts')
<script>
function openDeleteModal(button) {
    const batch = button.getAttribute('data-batch');
    const product = button.getAttribute('data-product');
    const action = button.getAttribute('data-action');
    
    document.getElementById('deleteProductionBatch').textContent = batch;
    document.getElementById('deleteProductionBatchName').textContent = batch;
    document.getElementById('deleteProductionProduct').textContent = product;
    document.getElementById('deleteProductionForm').setAttribute('action', action);
    
    document.getElementById('deleteProductionModal').classList.add('show');
    document.body.style.overflow = 'hidden';
}

function closeModal(modalId) {
    document.getElementById(modalId).classList.remove('show');
    document.body.style.overflow = '';
}

// Close modal on backdrop click
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('sea-modal')) {
        closeModal(e.target.id);
    }
});

// Close modal on Escape key
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        const openModal = document.querySelector('.sea-modal.show');
        if (openModal) {
            closeModal(openModal.id);
        }
    }
});
</script>
@endpush
@endsection


--- End of File ---

File: .\resources\views\admin\productions\show.blade.php
@extends('layouts.admin')
@section('title', 'Production Details')
@section('page-title', 'Production Details')
@section('content')
<div class="container-fluid">
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.productions.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-industry"></i> Batch #{{ $production->batch_number }}
        </h1>
        <a href="{{ route('admin.productions.edit', $production) }}" class="btn-admin-secondary ms-3 position-absolute end-0">
            <i class="fas fa-edit me-1"></i> Edit
        </a>
    </div>
                <tr>
                    <td><strong>Status:</strong></td>
                    <td>
                        @php
                            $status = $production->status;
                            $statusMap = [
                                'pending' => ['label' => 'Pending', 'icon' => 'hourglass-half', 'class' => 'admin', 'time' => $production->pending_at],
                                'in_progress' => ['label' => 'In Progress', 'icon' => 'cogs', 'class' => 'baker', 'time' => $production->in_progress_at],
                                'completed' => ['label' => 'Completed', 'icon' => 'check-circle', 'class' => 'manager', 'time' => $production->completed_at],
                                'cancelled' => ['label' => 'Cancelled', 'icon' => 'times-circle', 'class' => '', 'time' => $production->updated_at],
                            ];
                            $current = $statusMap[$status] ?? null;
                        @endphp
                        @if($current)
                            <span class="badge-admin-role {{ $current['class'] }}">
                                <i class="fas fa-{{ $current['icon'] }} me-1"></i> {{ $current['label'] }}
                            </span>
                            @if($current['time'])
                                <span class="text-muted small ms-2">({{ $current['time']->format('M d, Y H:i') }})</span>
                            @endif
                        @endif
                        <!-- Progress bar -->
                        <div class="mt-2" style="max-width:320px;">
                            <div class="progress" style="height: 8px;">
                                @php
                                    $progress = 0;
                                    if($status==='pending') $progress=20;
                                    elseif($status==='in_progress') $progress=60;
                                    elseif($status==='completed') $progress=100;
                                    elseif($status==='cancelled') $progress=0;
                                @endphp
                                <div class="progress-bar bg-success" role="progressbar" style="width: {{ $progress }}%" aria-valuenow="{{ $progress }}" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                        </div>
                    </td>
                </tr>

    <div class="card kpi-card info shadow-sm">
        <div class="card-header">
            <h5 class="mb-0 text-sea-primary">
                <i class="fas fa-info-circle me-2"></i> Production Information
            </h5>
        </div>
        <div class="card-body admin-card-body">
            <table class="table table-borderless">
                <tr>
                    <td width="200"><strong>Batch Number:</strong></td>
                    <td><code>{{ $production->batch_number }}</code></td>
                </tr>
                <tr>
                    <td><strong>Product:</strong></td>
                    <td>
                        @if($production->product)
                            <a href="{{ route('admin.products.show', $production->product) }}" class="text-decoration-none">
                                {{ $production->product->name }} <span class="text-muted">({{ $production->product->sku }})</span>
                            </a>
                        @else
                            <span class="text-muted">—</span>
                        @endif
                    </td>
                </tr>
                <tr>
                    <td><strong>Quantity Produced:</strong></td>
                    <td><strong class="text-sea-primary">{{ number_format($production->quantity_produced) }}</strong> units</td>
                </tr>
                <tr>
                    <td><strong>Production Date:</strong></td>
                    <td>{{ $production->production_date?->format('M d, Y') ?? '—' }}</td>
                </tr>
                <tr>
                    <td><strong>Responsible Baker:</strong></td>
                    <td>{{ $production->baker?->full_name ?? ($production->baker?->first_name . ' ' . $production->baker?->last_name) ?? '—' }}</td>
                </tr>
                <tr>
                    <td><strong>Status:</strong></td>
                    <td>
                        @if($production->status === 'pending')
                            <span class="badge-admin-role admin"><i class="fas fa-hourglass-half me-1"></i> Pending</span>
                        @elseif($production->status === 'in_progress')
                            <span class="badge-admin-role baker"><i class="fas fa-spinner me-1"></i> In Progress</span>
                        @elseif($production->status === 'completed')
                            <span class="badge-admin-role"><i class="fas fa-check-circle me-1"></i> Completed</span>
                        @elseif($production->status === 'cancelled')
                            <span class="badge-admin-role baker"><i class="fas fa-times-circle me-1"></i> Cancelled</span>
                        @endif
                    </td>
                </tr>
                <tr>
                    <td><strong>Notes:</strong></td>
                    <td>{{ $production->notes ?? '—' }}</td>
                </tr>
            </table>
        </div>
    </div>
</div>

@if($production->status !== 'completed')
<form id="delete-form" action="{{ route('admin.productions.destroy', $production) }}" method="POST" style="display: none;">
    @csrf
    @method('DELETE')
</form>
@endif
@endsection


--- End of File ---

File: .\resources\views\admin\productions\_form.blade.php
@php($editing = isset($production))
@php($isCompleted = $editing && $production->status === 'completed')
<div class="card kpi-card info shadow">
    <div class="card-header">
        <h5 class="mb-0 text-sea-primary">
            <i class="fas fa-industry me-2"></i> Production Details
        </h5>
    </div>
    <div class="card-body admin-card-body">
    <div class="row g-3">
      <div class="col-md-6">
        <label class="form-label">Product</label>
        @if($isCompleted)
          <input type="text" class="form-control" value="{{ $production->product->sku }} - {{ $production->product->name }}" readonly style="background-color: #f8f9fa;">
          <input type="hidden" name="prod_id" value="{{ $production->prod_id }}">
          <small class="form-text text-muted">Cannot change product for completed production</small>
        @else
          <select name="prod_id" class="form-select" id="prod_id" required>
            <option value="">Select product</option>
            @foreach($products as $p)
              <option value="{{ $p->prod_id }}" data-shelf-life="{{ $p->shelf_life ?? '' }}" @selected(old('prod_id', $production->prod_id ?? '')==$p->prod_id)>{{ $p->sku }} - {{ $p->name }}</option>
            @endforeach
          </select>
        @endif
      </div>
      <div class="col-md-3">
        <label class="form-label">Batch #</label>
        @if($editing)
          <input type="text" name="batch_number" class="form-control" value="{{ old('batch_number', $production->batch_number ?? '') }}" readonly style="background-color: #f8f9fa;">
          <small class="form-text text-muted">Batch number cannot be changed</small>
        @else
          <input type="text" name="batch_number" class="form-control" value="{{ old('batch_number', $nextBatchNumber ?? '') }}" readonly style="background-color: #f8f9fa;">
          <small class="form-text text-muted">Auto-generated batch number</small>
        @endif
      </div>
      <div class="col-md-3">
        <label class="form-label">Quantity Produced</label>
        @if($isCompleted)
          <input type="text" class="form-control" value="{{ number_format($production->quantity_produced) }}" readonly style="background-color: #f8f9fa;">
          <input type="hidden" name="quantity_produced" value="{{ $production->quantity_produced }}">
          <small class="form-text text-muted">Cannot change quantity for completed production</small>
        @else
          <input type="number" name="quantity_produced" class="form-control" value="{{ old('quantity_produced', $production->quantity_produced ?? 1) }}" min="1" required>
        @endif
      </div>
      <div class="col-md-4">
        <label class="form-label">Production Date</label>
   <input type="date" name="production_date" id="production_date" class="form-control" 
     value="{{ old('production_date', optional($production->production_date ?? now())->format('Y-m-d')) }}" 
               min="{{ now()->format('Y-m-d') }}" 
               required>
        <small class="form-text text-muted">Cannot select past dates</small>
      </div>
      <div class="col-md-4">
        <label class="form-label d-block">Produce at</label>
        <div class="form-control" style="background-color:#f8f9fa" readonly>
            Barangay 76-A, New Matina, Bucana, Davao City, Branch
        </div>
        <small class="form-text text-muted">Production location</small>
      </div>
      <div class="col-md-4">
   <label class="form-label">Expiration Date</label>
   <input type="date" name="expiration_date" id="expiration_date" class="form-control"
     value="{{ old('expiration_date', optional($production->expiration_date ?? null)?->format('Y-m-d')) }}">
   <small class="form-text text-muted">Defaults based on product shelf life</small>
      </div>
      <div class="col-md-4">
        <label class="form-label">Responsible Baker</label>
  <select name="baker_id" class="form-select" required>
          <option value="">Select baker</option>
          @foreach($employees as $employee)
            <option value="{{ $employee->emp_id }}" @selected(old('baker_id', $production->baker_id ?? '')==$employee->emp_id)>{{ $employee->full_name ?? ($employee->first_name.' '.$employee->last_name) }}</option>
          @endforeach
        </select>
      </div>
      <div class="col-md-4">
        <label class="form-label">Status</label>
        @if($isCompleted)
          <input type="text" class="form-control" value="Completed" readonly style="background-color: #f8f9fa;">
          <input type="hidden" name="status" value="completed">
          <small class="form-text text-muted">Cannot change status from completed</small>
        @else
          <select name="status" class="form-select" required>
            @foreach(['pending','in_progress','completed','cancelled'] as $s)
              <option value="{{ $s }}" @selected(old('status', $production->status ?? 'pending')===$s)>{{ ucfirst(str_replace('_',' ',$s)) }}</option>
            @endforeach
          </select>
        @endif
      </div>
      <div class="col-12">
        <label class="form-label">Notes</label>
        <textarea name="notes" class="form-control" rows="3">{{ old('notes', $production->notes ?? '') }}</textarea>
      </div>
        </div>
        <div class="col-12 mx-auto d-flex justify-content-end gap-2 mt-4">
          <button type="reset" class="btn-admin-light w-25">
            <i class="fas fa-times me-2"></i> Cancel
          </button>
          <button type="submit" class="btn-admin-secondary w-25">
            <i class="fas fa-save me-2"></i> {{ $editing ? 'Update Production' : 'Create Production' }}
          </button>
        </div>
    </div>
</div>

@if(!$editing)
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Set default production date to today if not set
    const dateInput = document.querySelector('input[name="production_date"]');
    if (dateInput && !dateInput.value) {
        dateInput.value = new Date().toISOString().split('T')[0];
    }
    
    // Show batch number info tooltip
    const batchInput = document.querySelector('input[name="batch_number"]');
    if (batchInput && batchInput.readOnly) {
        batchInput.title = 'Batch numbers are automatically generated based on today\'s date and sequence';
    }
  // Auto-calc expiration based on shelf life
  function calcExpiration() {
    const prodSelect = document.getElementById('prod_id');
    const shelf = parseInt(prodSelect?.selectedOptions?.[0]?.getAttribute('data-shelf-life') || '');
    const prodDateEl = document.getElementById('production_date');
    const expEl = document.getElementById('expiration_date');
    if (!prodDateEl || !expEl || !prodDateEl.value) return;
    if (!isNaN(shelf) && shelf > 0) {
      const base = new Date(prodDateEl.value + 'T00:00:00');
      base.setDate(base.getDate() + shelf);
      const yyyy = base.getFullYear();
      const mm = String(base.getMonth() + 1).padStart(2, '0');
      const dd = String(base.getDate()).padStart(2, '0');
      expEl.value = `${yyyy}-${mm}-${dd}`;
    }
  }
  document.getElementById('prod_id')?.addEventListener('change', calcExpiration);
  document.getElementById('production_date')?.addEventListener('change', calcExpiration);
  // Initial calc on load if empty
  const expElInit = document.getElementById('expiration_date');
  if (expElInit && !expElInit.value) {
    calcExpiration();
  }
});
</script>
@endif


--- End of File ---

File: .\resources\views\admin\products\create.blade.php
@extends('layouts.admin')

@section('title', 'Add Product')
@section('page-title', 'Add Product')

@section('content')
<div class="container-fluid">
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.products.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-box"></i> Add Product
        </h1>
    </div>

    <form method="POST" action="{{ route('admin.products.store') }}">
        @csrf
        @php($mode='create')
        @include('admin.products._form', ['mode' => $mode])
    </form>
</div>
@endsection


--- End of File ---

File: .\resources\views\admin\products\edit.blade.php
@extends('layouts.admin')

@section('title', 'Edit Product')
@section('page-title', 'Edit Product')

@section('content')
<div class="container-fluid">
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.products.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-box"></i> Edit Product
        </h1>
    </div>

    <form method="POST" action="{{ route('admin.products.update', $product) }}">
        @csrf
        @method('PUT')
        @php($mode='edit')
        @include('admin.products._form', ['mode' => $mode])
    </form>
</div>
@endsection


--- End of File ---

File: .\resources\views\admin\products\index.blade.php
@extends('layouts.admin')

@section('title', 'Product Management')
@section('page-title', 'Product Management')

@section('content')
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-muted-sea">
            <i class="fas fa-boxes"></i> Product Management
        </h1>
        <div class="btn-group">
            <a href="{{ route('admin.products.create') }}" class="btn-admin-secondary me-2">
                <i class="fas fa-plus me-2"></i> Add Product
            </a>
            <a href="{{ route('admin.products.export') }}" class="btn-admin-light">
                <i class="fas fa-file-pdf me-2"></i> Export PDF
            </a>
        </div>
    </div>

    <!-- KPI Cards -->
    <div class="row g-3 mb-3">
        <div class="col-md-4">
            <div class="card kpi-card info shadow-sm">
                <div class="card-body admin-card-body d-flex justify-content-between align-items-center">
                    <i class="fas fa-box text-sea-primary fa-2x"></i>
                    <div class="text-end ms-3 flex-grow-1">
                        <div class="h4 mb-0">{{ \App\Models\Product::count() }}</div>
                        <div class="text-muted">Total Products</div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card kpi-card info shadow-sm">
                <div class="card-body admin-card-body d-flex justify-content-between align-items-center">
                    <i class="fas fa-check-circle text-sea-primary fa-2x"></i>
                    <div class="text-end ms-3 flex-grow-1">
                        <div class="h4 mb-0">{{ \App\Models\Product::where('status','active')->count() }}</div>
                        <div class="text-muted">Active Products</div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card kpi-card info shadow-sm">
                <div class="card-body admin-card-body d-flex justify-content-between align-items-center">
                    <i class="fas fa-tags text-sea-primary fa-2x"></i>
                    <div class="text-end ms-3 flex-grow-1">
                        <div class="h4 mb-0">{{ \App\Models\Category::count() }}</div>
                        <div class="text-muted">Categories</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card shadow-sm mb-3">
        <div class="card-body admin-card-body">
            <form method="GET" class="row g-3 align-items-end">
                <div class="col-md-4">
                    <label class="form-label">Search</label>
                    <input type="text" name="search" class="form-control" value="{{ request('search') }}" placeholder="Name or SKU">
                </div>
                <div class="col-md-2">
                    <label class="form-label">Category</label>
                    <select name="category_id" class="form-select">
                        <option value="">All</option>
                        @foreach($categories as $cat)
                            <option value="{{ $cat->category_id }}" {{ request('category_id') == $cat->category_id ? 'selected' : '' }}>{{ $cat->name }}</option>
                        @endforeach
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Status</label>
                    <select name="status" class="form-select">
                        <option value="">All</option>
                        <option value="active" {{ request('status')==='active' ? 'selected' : '' }}>Active</option>
                        <option value="inactive" {{ request('status')==='inactive' ? 'selected' : '' }}>Inactive</option>
                    </select>
                </div>
                
                <div class="col-md-4 d-flex align-items-end">
                    <button type="submit" class="btn-admin-secondary me-2"><i class="fas fa-search me-2"></i>Filter</button>
                    <button type="button" class="btn-admin-light" onclick="resetProductFilters(this.form)"><i class="fas fa-times me-2"></i>Reset</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Products Table -->
    <div class="card shadow-sm">
        <div class="card-header p-3 d-flex align-items-center justify-content-between card-header-sea-light">
            <h2 class="h6 mb-0 text-sea-dark"><i class="fas fa-box me-2"></i> Products Inventory</h2>
        </div>
        <div class="card-body admin-card-body">
            @if($products->count() === 0)
                <div class="text-center text-muted py-5">
                    <i class="fas fa-box-open fa-3x mb-3 d-block"></i>
                    No products found.
                </div>
            @else
                <form id="bulkForm" method="POST" action="{{ route('admin.products.bulk-update') }}">
                    @csrf
                    <div class="table-responsive">
                        <table class="table table-hover align-middle">
                            <thead class="table-light">
                                <tr>
                                    <th style="width:28px"><input type="checkbox" onclick="document.querySelectorAll('.select-product').forEach(cb=>cb.checked=this.checked)"></th>
                                    <th>SKU</th>
                                    <th>Name</th>
                                    <th>Category</th>
                                    <th class="text-end">Price</th>
                                    <th>Status</th>
                                    <th class="text-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach($products as $product)
                                    <tr>
                                        <td><input type="checkbox" name="product_ids[]" class="select-product" value="{{ $product->prod_id }}"></td>
                                        <td><code>{{ $product->sku }}</code></td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <i class="fas fa-box text-sea-primary me-2"></i>
                                                <a href="{{ route('admin.products.show', $product) }}" class="text-sea-dark text-decoration-none">{{ $product->name }}</a>
                                                @if($product->isLowStock())
                                                    <span class="badge-chip bg-sea-light ms-2"><i class="fas fa-exclamation-triangle me-1"></i> Low</span>
                                                @endif
                                            </div>
                                        </td>
                                        <td>{{ $product->category?->name ?? '-' }}</td>
                                        <td class="text-end">{{ number_format($product->price, 2) }}</td>
                                        
                                        <td>
                                            @if($product->status === 'active')
                                                <span class="badge-admin-role" style="background: linear-gradient(135deg, #4CAF50 0%, #8BC34A 100%) !important; color: #fff !important;">
                                                    <i class="fas fa-check-circle me-1" aria-label="Active"></i> Active
                                                </span>
                                            @else
                                                <span class="badge-admin-role baker"><i class="fas fa-times-circle me-1" aria-label="Inactive"></i> Inactive</span>
                                            @endif
                                        </td>
                                        <td>
                                            <div class="d-flex gap-2 align-items-center">
                                                <button type="button" class="btn-admin-light btn-sm border border-1 d-flex align-items-center gap-1" title="View" onclick="window.location='{{ route('admin.products.show', $product) }}'">
                                                    <i class="fas fa-eye" aria-label="View"></i>
                                                    <span class="small text-muted">View</span>
                                                </button>
                                                <button type="button" class="btn-admin-secondary btn-sm border border-1 d-flex align-items-center gap-1" title="Edit" onclick="window.location='{{ route('admin.products.edit', $product) }}'">
                                                    <i class="fas fa-edit" aria-label="Edit"></i>
                                                    <span class="small text-muted">Edit</span>
                                                </button>
                                                <button type="button" class="btn-admin-warning btn-sm border border-1 d-flex align-items-center gap-1" title="Adjust Stock"
                                                        data-action="{{ route('admin.products.adjust-stock', $product) }}"
                                                        data-name="{{ $product->name }}"
                                                        onclick="openAdjustModal(this)">
                                                    <i class="fas fa-balance-scale" aria-label="Adjust Stock"></i>
                                                    <span class="small text-muted">Stock</span>
                                                </button>
                                                <button type="button" class="btn-admin-delete btn-sm border border-1 d-flex align-items-center gap-1" title="Delete"
                                                        data-action="{{ route('admin.products.destroy', $product) }}"
                                                        data-name="{{ $product->name }}"
                                                        onclick="openDeleteModal(this)">
                                                    <i class="fas fa-trash" aria-label="Delete"></i>
                                                    <span class="small text-white">Delete</span>
                                                </button>
                                            </div>
                                                
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>

                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <div class="d-flex align-items-center">
                            <select name="action" class="form-select me-2" style="width:auto">
                                <option value="activate">Activate</option>
                                <option value="deactivate">Deactivate</option>
                                <option value="delete">Delete</option>
                            </select>
                            <button type="submit" class="btn-admin-secondary" id="applySelectedBtn">Apply to selected</button>
                        </div>
                        {{ $products->appends(request()->query())->links('vendor.pagination.admin') }}
                    </div>
                </form>
            @endif
        </div>
    </div>

    <!-- Global Modals -->
    <!-- Adjust Stock Modal -->
    <div id="adjustModal" class="sea-modal" aria-hidden="true">
        <div class="sea-modal-dialog">
            <div class="sea-modal-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0 flex-grow-1" style="flex-basis:80%;max-width:80%;">
                    <i class="fas fa-balance-scale me-2"></i> Adjust Stock - <span id="adjustProductName"></span>
                </h5>
                <div style="flex-basis:10%;max-width:10%;" class="text-end">
                    <button type="button" class="btn-admin-light btn-sm" onclick="closeModal('adjustModal')">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="sea-modal-body">
                <form id="adjustForm" method="POST" action="#">
                    @csrf
                    <div class="row g-2">
                        <div class="col-4">
                            <label class="form-label">Type</label>
                            <select name="adjustment_type" class="form-select">
                                <option value="increase">Increase</option>
                                <option value="decrease">Decrease</option>
                            </select>
                        </div>
                        <div class="col-4">
                            <label class="form-label">Quantity</label>
                            <input type="number" name="quantity" min="1" class="form-control" placeholder="Qty">
                        </div>
                        <div class="col-12">
                            <label class="form-label">Reason</label>
                            <input type="text" name="reason" class="form-control" placeholder="Reason" required>
                        </div>
                        <div class="col-12">
                            <label class="form-label">Notes</label>
                            <textarea name="notes" rows="2" class="form-control" placeholder="Notes (optional)"></textarea>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end mt-3">
                        <button type="button" class="btn-admin-light me-2" onclick="closeModal('adjustModal')">Cancel</button>
                        <button type="submit" class="btn-admin-primary">Apply</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="sea-modal" aria-hidden="true">
        <div class="sea-modal-dialog">
            <div class="sea-modal-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0 flex-grow-1" style="flex-basis:80%;max-width:80%;">
                    <i class="fas fa-trash me-2"></i> Confirm Deletion - <span id="deleteProductName"></span>
                </h5>
                <div style="flex-basis:10%;max-width:10%;" class="text-end">
                    <button type="button" class="btn-admin-light btn-sm" onclick="closeModal('deleteModal')">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="sea-modal-body">
                <form id="deleteForm" method="POST" action="#">
                    @csrf
                    @method('DELETE')
                    <p>Are you sure you want to delete <strong id="deleteProductName"></strong>? This action cannot be undone.</p>
                    <div class="d-flex justify-content-end mt-3">
                        <button type="button" class="btn-admin-light me-2" onclick="closeModal('deleteModal')">Cancel</button>
                        <button type="submit" class="btn-admin-primary">Delete</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@endsection

@push('scripts')
<script>
function resetProductFilters(form){
    Array.from(form.elements).forEach(el => {
        if (el.tagName === 'INPUT' && (el.type === 'text' || el.type === 'number')) el.value = '';
        if (el.tagName === 'SELECT') el.selectedIndex = 0;
    });
    form.submit();
}
function openAdjustModal(btn){
    const modal = document.getElementById('adjustModal');
    document.getElementById('adjustProductName').textContent = btn.dataset.name;
    const form = document.getElementById('adjustForm');
    form.action = btn.dataset.action;
    modal.classList.add('show');
}
function openDeleteModal(btn){
    const modal = document.getElementById('deleteModal');
    document.getElementById('deleteProductName').textContent = btn.dataset.name;
    const form = document.getElementById('deleteForm');
    form.action = btn.dataset.action;
    modal.classList.add('show');
}
function closeModal(id){
    document.getElementById(id).classList.remove('show');
}
// Close when clicking outside dialog
document.querySelectorAll('.sea-modal').forEach(m => {
    m.addEventListener('click', e => {
        if(e.target === m){ m.classList.remove('show'); }
    });
});

// Bulk apply guard
document.getElementById('bulkForm')?.addEventListener('submit', function(e){
    const checked = this.querySelectorAll('.select-product:checked');
    if(checked.length === 0){
        e.preventDefault();
        alert('Please select at least one product.');
        return false;
    }
});
</script>
@endpush

--- End of File ---

File: .\resources\views\admin\products\pdf.blade.php
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Products Export</title>
    <style>
        * { box-sizing: border-box; }
        body { font-family: DejaVu Sans, Arial, Helvetica, sans-serif; font-size: 12px; color: #111827; margin: 16px; }
        h2 { margin: 0 0 8px; }
        .meta { font-size: 11px; color: #6b7280; margin-bottom: 12px; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #e5e7eb; padding: 6px 8px; }
        thead th { background: #f9fafb; font-weight: 600; }
        .text-end { text-align: right; }
        .nowrap { white-space: nowrap; }
    </style>
</head>
<body>
    <h2>Products</h2>
    <div class="meta">Exported at: {{ now()->format('Y-m-d H:i') }}</div>

    <table>
        <thead>
            <tr>
                <th>SKU</th>
                <th>Name</th>
                <th>Category</th>
                <th class="nowrap">Unit</th>
                <th class="text-end">Price</th>
                
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach($products as $p)
                <tr>
                    <td>{{ $p->sku }}</td>
                    <td>{{ $p->name }}</td>
                    <td>{{ $p->category->name ?? '-' }}</td>
                    <td class="nowrap">{{ $p->unit }}</td>
                    <td class="text-end">₱{{ number_format($p->price, 2) }}</td>
                    
                    <td>{{ ucfirst($p->status) }}</td>
                </tr>
            @endforeach
        </tbody>
    </table>
</body>
</html>

--- End of File ---

File: .\resources\views\admin\products\show.blade.php
@extends('layouts.admin')

@section('title', 'Product Details')
@section('page-title', 'Product Details')

@section('content')
<div class="container-fluid">
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.products.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-box text-sea-primary"></i> {{ $product->name }}
        </h1>
        <a href="{{ route('admin.products.edit', $product) }}" class="btn-admin-secondary ms-3 position-absolute end-0">
            <i class="fas fa-edit me-1"></i> Edit
        </a>
    </div>

    <div class="row g-4">
        <div class="col-lg-4">
            <div class="card kpi-card info shadow-sm">
                <div class="card-body admin-card-body">
                    <table class="table table-borderless mb-0">
                        <tr><td><strong>SKU:</strong></td><td><code>{{ $product->sku }}</code></td></tr>
                        <tr><td><strong>Name:</strong></td><td>{{ $product->name }}</td></tr>
                        <tr><td><strong>Category:</strong></td><td>{{ $product->category?->name ?? '-' }}</td></tr>
                        <tr><td><strong>Price:</strong></td><td>{{ number_format($product->price, 2) }} / {{ $product->unit }}</td></tr>
                        <tr><td><strong>Status:</strong></td><td>
                            @if($product->status==='active')
                                <span class="badge-admin-role"><i class="fas fa-check-circle me-1"></i> Active</span>
                            @else
                                <span class="badge-admin-role baker"><i class="fas fa-times-circle me-1"></i> Inactive</span>
                            @endif
                        </td></tr>
                        <tr><td><strong>Description:</strong></td><td>{{ $product->description ?: '—' }}</td></tr>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="card kpi-card primary shadow-sm">
                <div class="card-header p-3 card-header-sea-primary"><h2 class="h6 mb-0"><i class="fas fa-warehouse me-2"></i> Inventory</h2></div>
                <div class="card-body admin-card-body">
                    <div class="row g-3 mb-2">
                        <div class="col-md-4">
                            <div class="bg-sea-light p-3 rounded">
                                <div class="text-muted">On Hand</div>
                                <div class="h4 mb-0">{{ $product->inventoryStock->quantity ?? 0 }}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="bg-sea-light p-3 rounded">
                                <div class="text-muted">Reorder Level</div>
                                <div class="h4 mb-0">{{ $product->inventoryStock->reorder_level ?? 0 }}</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="bg-sea-light p-3 rounded">
                                <div class="text-muted">Status</div>
                                <div class="h4 mb-0">{{ $product->isLowStock() ? 'Low' : 'OK' }}</div>
                            </div>
                        </div>
                    </div>

                    <h6 class="mt-3 mb-2 text-muted">Recent Stock Movements</h6>
                    @if(isset($stockMovements) && $stockMovements->count())
                        <div class="table-responsive">
                            <table class="table table-sm table-hover">
                                <thead class="table-light"><tr><th>Date</th><th>Type</th><th class="text-end">Qty</th><th>Prev → Curr</th><th>Notes</th></tr></thead>
                                <tbody>
                                    @foreach($stockMovements as $mv)
                                        <tr>
                                            <td>{{ $mv->created_at->format('Y-m-d H:i') }}</td>
                                            <td>{{ ucfirst($mv->transaction_type) }}</td>
                                            <td class="text-end">{{ $mv->quantity }}</td>
                                            <td>{{ $mv->previous_stock }} → {{ $mv->current_stock }}</td>
                                            <td>{{ $mv->notes }}</td>
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>
                    @else
                        <div class="text-muted">No movements yet.</div>
                    @endif
                </div>
            </div>
        </div>
    </div>
</div>
@endsection


--- End of File ---

File: .\resources\views\admin\products\_form.blade.php
@php
    $mode = $mode ?? 'create';
    $product = $product ?? null;
@endphp

@if ($errors->any())
    <div class="alert-admin-danger mb-3">
        <i class="fas fa-exclamation-triangle me-2"></i>
        Please fix the errors below.
    </div>
@endif

<div class="row g-4">
    <div class="col-lg-5">
        <div class="card kpi-card info shadow-sm">
            <div class="card-header p-3 card-header-sea-light">
                <h2 class="h6 mb-0 text-sea-dark"><i class="fas fa-box me-2"></i> Product Details</h2>
            </div>
            <div class="card-body admin-card-body">
                <div class="mb-3">
                    <label class="form-label" for="sku">SKU</label>
                    <input type="text" name="sku" id="sku" class="form-control" value="{{ old('sku', $product->sku ?? '') }}" required>
                    @error('sku')<div class="text-danger small">{{ $message }}</div>@enderror
                </div>
                <div class="mb-3">
                    <label class="form-label" for="name">Name</label>
                    <input type="text" name="name" id="name" class="form-control" value="{{ old('name', $product->name ?? '') }}" required>
                    @error('name')<div class="text-danger small">{{ $message }}</div>@enderror
                </div>
                <div class="mb-3">
                    <label class="form-label" for="description">Description</label>
                    <textarea name="description" id="description" rows="3" class="form-control">{{ old('description', $product->description ?? '') }}</textarea>
                    @error('description')<div class="text-danger small">{{ $message }}</div>@enderror
                </div>
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label" for="category_id">Category</label>
                        <select name="category_id" id="category_id" class="form-select" required>
                            <option value="">Select category</option>
                            @foreach($categories as $cat)
                                <option value="{{ $cat->category_id }}" {{ old('category_id', $product->category_id ?? '') == $cat->category_id ? 'selected' : '' }}>{{ $cat->name }}</option>
                            @endforeach
                        </select>
                        @error('category_id')<div class="text-danger small">{{ $message }}</div>@enderror
                    </div>
                    <div class="col-md-6">
                        <label class="form-label" for="status">Status</label>
                        <select name="status" id="status" class="form-select">
                            <option value="active" {{ old('status', $product->status ?? 'active') === 'active' ? 'selected' : '' }}>Active</option>
                            <option value="inactive" {{ old('status', $product->status ?? 'active') === 'inactive' ? 'selected' : '' }}>Inactive</option>
                        </select>
                        @error('status')<div class="text-danger small">{{ $message }}</div>@enderror
                    </div>
                </div>
                
            </div>
        </div>
    </div>

    <div class="col-lg-7">
        <div class="card kpi-card primary shadow-sm">
            <div class="card-header p-3 card-header-sea-primary">
                <h2 class="h6 mb-0"><i class="fas fa-cog me-2"></i> Pricing & Inventory</h2>
            </div>
            <div class="card-body admin-card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label" for="price">Price</label>
                        <input type="number" step="0.01" min="0" name="price" id="price" class="form-control" value="{{ old('price', $product->price ?? 0) }}" required>
                        @error('price')<div class="text-danger small">{{ $message }}</div>@enderror
                    </div>
                    <div class="col-md-6">
                        <label class="form-label" for="unit">Unit</label>
                        <input type="text" name="unit" id="unit" class="form-control" value="{{ old('unit', $product->unit ?? '') }}" placeholder="pcs, kg, box" required>
                        @error('unit')<div class="text-danger small">{{ $message }}</div>@enderror
                    </div>
                </div>

                <div class="row g-3 mt-1">
                    <div class="col-md-4">
                        <label class="form-label" for="shelf_life">Shelf Life (days)</label>
                        <input type="number" min="0" name="shelf_life" id="shelf_life" class="form-control" value="{{ old('shelf_life', $product->shelf_life ?? '') }}">
                        @error('shelf_life')<div class="text-danger small">{{ $message }}</div>@enderror
                    </div>
                    <div class="col-md-4">
                        <label class="form-label" for="reorder_level">Reorder Level</label>
                        <input type="number" min="0" name="reorder_level" id="reorder_level" class="form-control" value="{{ old('reorder_level', optional(optional($product)->inventoryStock)->reorder_level ?? 10) }}">
                        @error('reorder_level')<div class="text-danger small">{{ $message }}</div>@enderror
                    </div>
                    <div class="col-md-4 d-flex align-items-center">
                        <div class="form-check d-flex align-items-center mt-4">
                            <input class="form-check-input me-2" type="checkbox" name="is_available" id="is_available" value="1" {{ old('is_available', $product->is_available ?? true) ? 'checked' : '' }}>
                            <label class="form-check-label mb-0" for="is_available">Available for Sale</label>
                        </div>
                    </div>
                </div>

                @if($mode === 'create')
                <div class="row g-3 mt-1">
                    <div class="col-md-6">
                        <label class="form-label" for="initial_quantity">Initial Stock</label>
                        <input type="number" min="0" name="initial_quantity" id="initial_quantity" class="form-control" value="{{ old('initial_quantity', 0) }}">
                        @error('initial_quantity')<div class="text-danger small">{{ $message }}</div>@enderror
                    </div>
                </div>
                @endif
            </div>
        </div>
    </div>
</div>

<div class="col-12 mx-auto d-flex justify-content-end gap-2 mt-4">
    <button type="reset" class="btn-admin-light w-25">
        <i class="fas fa-times me-2"></i> Cancel
    </button>
    <button type="submit" class="btn-admin-secondary w-25">
        <i class="fas fa-save me-2"></i> {{ $mode === 'edit' ? 'Update Product' : 'Create Product' }}
    </button>
</div>


--- End of File ---

File: .\resources\views\admin\sales\create.blade.php
@extends('layouts.admin')
@section('title', 'New Sale')
@section('page-title', 'New Sale')

@section('content')
@if ($errors->any())
    <div class="alert alert-admin-danger alert-dismissible fade show mb-4" role="alert">
        <h6 class="alert-heading"><i class="fas fa-exclamation-triangle me-2"></i>Please fix the following errors:</h6>
        <ul class="mb-0">
            @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
@endif

<div class="d-flex align-items-center mb-4" style="position:relative;">
    <a href="{{ route('admin.sales.index') }}" class="btn-admin-light me-3 position-absolute start-0">
        <i class="fas fa-arrow-left me-1"></i> Back
    </a>
    <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
        <i class="fas fa-plus me-2"></i> New Sale Order
    </h1>
</div>

<form method="POST" action="{{ route('admin.sales.store') }}" id="sale-form">
    @csrf
    
    <!-- Order Items Card -->
    <div class="card kpi-card primary shadow mb-4">
        <div class="card-header">
            <h5 class="mb-0 text-sea-primary">
                <i class="fas fa-shopping-cart me-2"></i> Order Items
            </h5>
        </div>
        <div class="card-body admin-card-body">
            <div id="items-container">
                <div class="row g-3 item-row border rounded p-3 mb-3" data-index="0">
                    <div class="col-lg-3 col-md-6">
                        <label class="form-label">Product</label>
                        <select class="form-select product-select" name="items[0][prod_id]" data-index="0" required>
                            <option value="">Select product</option>
                            @foreach($products as $p)
                                <option value="{{ $p->prod_id }}" data-price="{{ $p->price }}" data-stock="{{ $p->inventoryStock->quantity ?? 0 }}">
                                    {{ $p->name }} ({{ $p->sku }}) - ₱{{ number_format($p->price, 2) }} — Stock: {{ $p->inventoryStock->quantity ?? 0 }}
                                </option>
                            @endforeach
                        </select>
                        <div class="form-text small text-muted mt-1">Stock: <span class="stock-label" data-index="0">—</span></div>
                    </div>
                    <div class="col-lg-2 col-md-3 col-sm-6">
                        <label class="form-label">Quantity</label>
                        <input type="number" class="form-control quantity-input" name="items[0][quantity]" value="1" min="1" data-index="0" required>
                        <div class="invalid-feedback qty-error" data-index="0">Quantity exceeds available stock.</div>
                    </div>
                    <div class="col-lg-2 col-md-3 col-sm-6">
                        <label class="form-label">Unit Price</label>
                        <input type="number" step="0.01" class="form-control unit-price-input" name="items[0][unit_price]" value="0" min="0" data-index="0" readonly required>
                    </div>
                    <div class="col-lg-2 col-md-6 col-sm-6">
                        <label class="form-label">Subtotal</label>
                        <input type="text" class="form-control line-total" value="₱0.00" readonly>
                    </div>
                    <div class="col-lg-3 col-md-6 col-sm-6">
                        <label class="form-label">Action</label>
                        <button type="button" class="btn-admin-light btn-sm w-100 remove-item" disabled>
                            <i class="fas fa-trash me-1"></i> Remove
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="d-flex justify-content-between align-items-center">
                <button type="button" class="btn-admin-secondary" id="add-item">
                    <i class="fas fa-plus me-2"></i> Add Another Item
                </button>
                <div class="text-end">
                    <h5 class="mb-0 text-sea-primary">Order Total: <span id="order-total">₱0.00</span></h5>
                </div>
            </div>
        </div>
    </div>

    <!-- Payment Information Card -->
    <div class="card kpi-card primary shadow mb-4">
        <div class="card-header">
            <h5 class="mb-0 text-sea-primary">
                <i class="fas fa-credit-card me-2"></i> Payment Information
            </h5>
        </div>
        <div class="card-body admin-card-body">
            <div class="row g-3">
                <div class="col-lg-4 col-md-6">
                    <label class="form-label">Cashier <span class="text-danger">*</span></label>
                    <select name="cashier_id" class="form-select" required>
                        <option value="">Select cashier</option>
                        @isset($cashiers)
                            @foreach($cashiers as $emp)
                                <option value="{{ $emp->emp_id }}" @selected(old('cashier_id')==$emp->emp_id)>
                                    {{ $emp->full_name ?? ($emp->first_name.' '.$emp->last_name) }}
                                </option>
                            @endforeach
                        @endisset
                    </select>
                </div>
                <div class="col-lg-2 col-md-3 col-sm-6">
                    <label class="form-label">Subtotal</label>
                    <input type="text" class="form-control" id="subtotal-display" value="₱0.00" readonly style="background-color: #f8f9fa;">
                </div>
                <div class="col-lg-2 col-md-3 col-sm-6">
                    <label class="form-label">VAT ({{ config('vat.vat_rate', 12) }}%)</label>
                    <input type="text" class="form-control" id="vat-display" value="₱0.00" readonly style="background-color: #f8f9fa;">
                </div>
                <div class="col-lg-2 col-md-3 col-sm-6">
                    <label class="form-label">Total Amount <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="total-display" value="₱0.00" readonly style="background-color: #f8f9fa; font-weight: bold;">
                    <input type="hidden" name="total_amount" id="total-amount-hidden" value="0">
                </div>
                <div class="col-lg-2 col-md-3 col-sm-6">
                    <label class="form-label">Amount Paid <span class="text-danger">*</span></label>
                    <input type="number" step="0.01" class="form-control" name="amount_paid" id="amount-paid" value="{{ old('amount_paid', 0) }}" min="0" required>
                    <div class="invalid-feedback" id="payment-error">
                        Amount paid must be at least equal to the total amount.
                    </div>
                </div>
                <div class="col-lg-2 col-md-3 col-sm-6">
                    <label class="form-label">Change</label>
                    <input type="text" class="form-control" id="change-display" value="₱0.00" readonly style="background-color: #f8f9fa;">
                </div>
                <div class="col-lg-2 col-md-3 col-sm-6">
                    <label class="form-label">Payment Method</label>
                    <input type="text" class="form-control" value="Cash" readonly disabled>
                    <input type="hidden" name="payment_method" value="cash">
                </div>
                <div class="col-12">
                    <label class="form-label">Notes</label>
                    <textarea class="form-control" name="notes" rows="2" placeholder="Optional notes about this sale...">{{ old('notes') }}</textarea>
                </div>
            </div>
        </div>
    </div>

    <!-- Submit Actions -->
    <div class="col-12 mx-auto d-flex justify-content-end gap-2">
        <button type="reset" class="btn-admin-light w-25">
            <i class="fas fa-times me-2"></i> Cancel
        </button>
        <button type="submit" class="btn-admin-primary w-25" id="submit-sale" disabled>
            <i class="fas fa-save me-2"></i> Complete Sale
        </button>
    </div>
</form>

@push('scripts')
<script>
(function(){
    let itemIndex = 1;
    const container = document.getElementById('items-container');
    const addButton = document.getElementById('add-item');
    const orderTotalEl = document.getElementById('order-total');
    const totalDisplayEl = document.getElementById('total-display');
    const totalHiddenEl = document.getElementById('total-amount-hidden');
    const amountPaidEl = document.getElementById('amount-paid');
    const changeDisplayEl = document.getElementById('change-display');
    const submitButton = document.getElementById('submit-sale');
    const paymentError = document.getElementById('payment-error');

    function getRowStock(index) {
        const select = document.querySelector(`.product-select[data-index="${index}"]`);
        const opt = select ? select.selectedOptions[0] : null;
        return opt ? parseFloat(opt.dataset.stock || '0') : 0;
    }

    function setStockLabel(index) {
        const stock = getRowStock(index);
        const label = document.querySelector(`.stock-label[data-index="${index}"]`);
        if (label) label.textContent = (!isNaN(stock) && stock >= 0) ? stock : '—';
    }

    function validateQuantityAgainstStock(index) {
        const row = document.querySelector(`.item-row[data-index="${index}"]`);
        if (!row) return true;
        const qtyInput = row.querySelector('.quantity-input');
        const errorEl = row.querySelector('.qty-error');
        const stock = getRowStock(index);
        const qty = parseFloat(qtyInput.value || '0');
        const productSelected = !!document.querySelector(`.product-select[data-index="${index}"]`)?.value;
        const valid = !productSelected || (stock > 0 && qty <= stock);
        if (!valid) {
            qtyInput.classList.add('is-invalid');
            if (errorEl) errorEl.style.display = 'block';
        } else {
            qtyInput.classList.remove('is-invalid');
            if (errorEl) errorEl.style.display = 'none';
        }
        return valid;
    }

    function validateAllStocks() {
        let ok = true;
        document.querySelectorAll('.item-row').forEach(r => {
            const idx = r.getAttribute('data-index');
            if (!validateQuantityAgainstStock(idx)) ok = false;
        });
        return ok;
    }

    // Product options template
    const productOptions = `
        <option value="">Select product</option>
        @foreach($products as $p)
            <option value="{{ $p->prod_id }}" data-price="{{ $p->price }}" data-stock="{{ $p->inventoryStock->quantity ?? 0 }}">{{ $p->name }} ({{ $p->sku }}) - ₱{{ number_format($p->price, 2) }} — Stock: {{ $p->inventoryStock->quantity ?? 0 }}</option>
        @endforeach
    `;

    function createItemRow(index) {
        const div = document.createElement('div');
        div.className = 'row g-3 item-row border rounded p-3 mb-3';
        div.setAttribute('data-index', index);
        
        div.innerHTML = `
            <div class="col-lg-3 col-md-6">
                <label class="form-label">Product</label>
                <select class="form-select product-select" name="items[${index}][prod_id]" data-index="${index}" required>
                    ${productOptions}
                </select>
                <div class="form-text small text-muted mt-1">Stock: <span class="stock-label" data-index="${index}">—</span></div>
            </div>
            <div class="col-lg-2 col-md-3 col-sm-6">
                <label class="form-label">Quantity</label>
                <input type="number" class="form-control quantity-input" name="items[${index}][quantity]" value="1" min="1" data-index="${index}" required>
                <div class="invalid-feedback qty-error" data-index="${index}">Quantity exceeds available stock.</div>
            </div>
            <div class="col-lg-2 col-md-3 col-sm-6">
                <label class="form-label">Unit Price</label>
                <input type="number" step="0.01" class="form-control unit-price-input" name="items[${index}][unit_price]" value="0" min="0" data-index="${index}" readonly required>
            </div>
            <div class="col-lg-2 col-md-6 col-sm-6">
                <label class="form-label">Subtotal</label>
                <input type="text" class="form-control line-total" value="₱0.00" readonly>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <label class="form-label">Action</label>
                <button type="button" class="btn-admin-light btn-sm w-100 remove-item">
                    <i class="fas fa-trash me-1"></i> Remove
                </button>
            </div>
        `;
        
        return div;
    }

    function updateLineTotal(index) {
        const row = document.querySelector(`.item-row[data-index="${index}"]`);
        const quantity = parseFloat(row.querySelector('.quantity-input').value) || 0;
        const unitPrice = parseFloat(row.querySelector('.unit-price-input').value) || 0;
        const lineTotal = quantity * unitPrice;
        
        row.querySelector('.line-total').value = '₱' + lineTotal.toFixed(2);
        updateOrderTotal();
    }

    function updateOrderTotal() {
        let subtotal = 0;
        document.querySelectorAll('.item-row').forEach(row => {
            const quantity = parseFloat(row.querySelector('.quantity-input').value) || 0;
            const unitPrice = parseFloat(row.querySelector('.unit-price-input').value) || 0;
            subtotal += quantity * unitPrice;
        });

        const vatRate = {{ config('vat.vat_rate', 12) }};
        const vatAmount = +(subtotal * (vatRate / 100)).toFixed(2);
        const total = +(subtotal + vatAmount).toFixed(2);

        document.getElementById('subtotal-display').value = '₱' + subtotal.toFixed(2);
        document.getElementById('vat-display').value = '₱' + vatAmount.toFixed(2);
        orderTotalEl.textContent = '₱' + total.toFixed(2);
        totalDisplayEl.value = '₱' + total.toFixed(2);
        totalHiddenEl.value = total.toFixed(2);

        updateChange();
        validatePayment();
    }

    function updateChange() {
        const total = parseFloat(totalHiddenEl.value) || 0;
        const paid = parseFloat(amountPaidEl.value) || 0;
        const change = Math.max(0, paid - total);
        
        changeDisplayEl.value = '₱' + change.toFixed(2);
    }

    function validatePayment() {
        const total = parseFloat(totalHiddenEl.value) || 0;
        const paid = parseFloat(amountPaidEl.value) || 0;
        const hasItems = document.querySelectorAll('.item-row').length > 0;
        
        const isValid = total > 0 && paid >= total && hasItems;
        
        submitButton.disabled = !isValid;
        
        if (paid < total && paid > 0) {
            amountPaidEl.classList.add('is-invalid');
            paymentError.style.display = 'block';
        } else {
            amountPaidEl.classList.remove('is-invalid');
            paymentError.style.display = 'none';
        }
    }

    function updateRemoveButtons() {
        const rows = document.querySelectorAll('.item-row');
        rows.forEach((row, index) => {
            const removeBtn = row.querySelector('.remove-item');
            removeBtn.disabled = rows.length === 1;
        });
    }

    // Event delegation for dynamic elements
    container.addEventListener('change', function(e) {
        if (e.target.classList.contains('product-select')) {
            const index = e.target.dataset.index;
            const selectedOption = e.target.selectedOptions[0];
            const price = selectedOption ? selectedOption.dataset.price : 0;
            const priceInput = document.querySelector(`.unit-price-input[data-index="${index}"]`);
            priceInput.value = price;
            setStockLabel(index);
            validateQuantityAgainstStock(index);
            updateLineTotal(index);
        }
        
        if (e.target.classList.contains('quantity-input') || e.target.classList.contains('unit-price-input')) {
            const index = e.target.dataset.index;
            // If unit-price input triggered change, re-sync it from selected product to avoid manual edits
            if (e.target.classList.contains('unit-price-input')) {
                const productSelect = document.querySelector(`.product-select[data-index="${index}"]`);
                const selectedOption = productSelect ? productSelect.selectedOptions[0] : null;
                const price = selectedOption ? selectedOption.dataset.price : 0;
                e.target.value = price;
            }
            if (e.target.classList.contains('quantity-input')) {
                validateQuantityAgainstStock(index);
            }
            updateLineTotal(index);
        }
    });

    // Also guard against typing into readonly via some browsers: block keypress
    container.addEventListener('keydown', function(e){
        if (e.target.classList.contains('unit-price-input')) {
            e.preventDefault();
        }
    });

    container.addEventListener('click', function(e) {
        if (e.target.closest('.remove-item')) {
            const row = e.target.closest('.item-row');
            row.remove();
            updateOrderTotal();
            updateRemoveButtons();
        }
    });

    addButton.addEventListener('click', function() {
        const newRow = createItemRow(itemIndex);
        container.appendChild(newRow);
        setStockLabel(itemIndex);
        validateQuantityAgainstStock(itemIndex);
        itemIndex++;
        updateRemoveButtons();
    });

    amountPaidEl.addEventListener('input', function() {
        updateChange();
        validatePayment();
    });

    // Initialize
    updateRemoveButtons();
    document.querySelectorAll('.item-row').forEach(r => {
        const idx = r.getAttribute('data-index');
        setStockLabel(idx);
        validateQuantityAgainstStock(idx);
    });
    validatePayment();
})();
</script>
@endpush
@endsection

--- End of File ---

File: .\resources\views\admin\sales\create_old.blade.php
@extends('layouts.admin')
@section('title', 'New Sale')
@section('page-title', 'New Sale')

@section('content')
@if ($errors->any())
    <div class="alert alert-admin-danger alert-dismissible fade show mb-4" role="alert">
        <h6 class="alert-heading"><i class="fas fa-exclamation-triangle me-2"></i>Please fix the following errors:</h6>
        <ul class="mb-0">
            @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
@endif

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3 mb-0 text-muted-sea">
        <i class="fas fa-plus me-2"></i> New Sale Order
    </h1>
    <a href="{{ route('admin.sales.index') }}" class="btn-admin-light btn-sm">
        <i class="fas fa-arrow-left me-2"></i> Back to Sales
    </a>
</div>

<form method="POST" action="{{ route('admin.sales.store') }}" id="sale-form">
    @csrf
    
    <!-- Step 1: Order Items -->
    <div class="card admin-card shadow mb-4">
        <div class="card-header">
            <h5 class="mb-0 text-sea-primary">
                <i class="fas fa-shopping-cart me-2"></i> Order Items
            </h5>
        </div>
        <div class="card-body admin-card-body">
            <div id="items-container">
                <!-- Initial item row -->
                <div class="row g-3 item-row border rounded p-3 mb-3" data-index="0">
                    <div class="col-lg-3 col-md-6">
                        <label class="form-label">Product</label>
                        <select class="form-select product-select" name="items[0][product_id]" data-index="0" required>
                            <option value="">Select product</option>
                            @foreach($products as $p)
                                <option value="{{ $p->id }}" data-price="{{ $p->price }}">{{ $p->name }} ({{ $p->sku }}) - ₱{{ number_format($p->price, 2) }}</option>
                            @endforeach
                        </select>
                    </div>
                    <div class="col-lg-2 col-md-3 col-sm-6">
                        <label class="form-label">Quantity</label>
                        <input type="number" class="form-control quantity-input" name="items[0][quantity]" value="1" min="1" data-index="0" required>
                    </div>
                    <div class="col-lg-2 col-md-3 col-sm-6">
                        <label class="form-label">Unit Price</label>
                        <input type="number" step="0.01" class="form-control unit-price-input" name="items[0][unit_price]" value="0" min="0" data-index="0" required>
                    </div>
                    <div class="col-lg-2 col-md-6 col-sm-6">
                        <label class="form-label">Subtotal</label>
                        <input type="text" class="form-control line-total" value="₱0.00" readonly>
                    </div>
                    <div class="col-lg-3 col-md-6 col-sm-6">
                        <label class="form-label">Action</label>
                        <button type="button" class="btn-admin-light btn-sm w-100 remove-item" disabled>
                            <i class="fas fa-trash me-1"></i> Remove
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="d-flex justify-content-between align-items-center">
                <button type="button" class="btn-admin-secondary" id="add-item">
                    <i class="fas fa-plus me-2"></i> Add Another Item
                </button>
                <div class="text-end">
                    <h5 class="mb-0 text-sea-primary">Order Total: <span id="order-total">₱0.00</span></h5>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 2: Payment Information -->
    <div class="card admin-card shadow mb-4">
        <div class="card-header">
            <h5 class="mb-0 text-sea-primary">
                <i class="fas fa-credit-card me-2"></i> Payment Information
            </h5>
        </div>
        <div class="card-body admin-card-body">
            <div class="row g-3">
                <div class="col-lg-4 col-md-6">
                    <label class="form-label">Cashier <span class="text-danger">*</span></label>
                    <select name="cashier_id" class="form-select" required>
                        <option value="">Select cashier</option>
                        @isset($cashiers)
                            @foreach($cashiers as $emp)
                                <option value="{{ $emp->employee_id }}" @selected(old('cashier_id')==$emp->employee_id)>
                                    {{ $emp->full_name ?? ($emp->first_name.' '.$emp->last_name) }}
                                </option>
                            @endforeach
                        @endisset
                    </select>
                </div>
                <div class="col-lg-2 col-md-3 col-sm-6">
                    <label class="form-label">Total Amount <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="total-display" value="₱0.00" readonly style="background-color: #f8f9fa; font-weight: bold;">
                    <input type="hidden" name="total_amount" id="total-amount-hidden" value="0">
                </div>
                <div class="col-lg-2 col-md-3 col-sm-6">
                    <label class="form-label">Amount Paid <span class="text-danger">*</span></label>
                    <input type="number" step="0.01" class="form-control" name="amount_paid" id="amount-paid" value="{{ old('amount_paid', 0) }}" min="0" required>
                    <div class="invalid-feedback" id="payment-error">
                        Amount paid must be at least equal to the total amount.
                    </div>
                </div>
                <div class="col-lg-2 col-md-3 col-sm-6">
                    <label class="form-label">Change</label>
                    <input type="text" class="form-control" id="change-display" value="₱0.00" readonly style="background-color: #f8f9fa;">
                </div>
                <div class="col-lg-2 col-md-3 col-sm-6">
                    <label class="form-label">Payment Method</label>
                    <select name="payment_method" class="form-select">
                        <option value="cash">Cash</option>
                        <option value="card">Card</option>
                        <option value="gcash">GCash</option>
                    </select>
                </div>
                <div class="col-12">
                    <label class="form-label">Notes</label>
                    <textarea class="form-control" name="notes" rows="2" placeholder="Optional notes about this sale...">{{ old('notes') }}</textarea>
                </div>
            </div>
        </div>
    </div>

    <!-- Submit Actions -->
    <div class="d-flex gap-2">
        <button class="btn-admin-primary" type="submit" id="submit-sale" disabled>
            <i class="fas fa-save me-2"></i> Complete Sale
        </button>
        <a href="{{ route('admin.sales.index') }}" class="btn-admin-light">
            <i class="fas fa-times me-2"></i> Cancel
        </a>
    </div>
</form>

@push('scripts')
<script>
(function(){
    let itemIndex = 1;
    const container = document.getElementById('items-container');
    const addButton = document.getElementById('add-item');
    const orderTotalEl = document.getElementById('order-total');
    const totalDisplayEl = document.getElementById('total-display');
    const totalHiddenEl = document.getElementById('total-amount-hidden');
    const amountPaidEl = document.getElementById('amount-paid');
    const changeDisplayEl = document.getElementById('change-display');
    const submitButton = document.getElementById('submit-sale');
    const paymentError = document.getElementById('payment-error');

    // Product options template
    const productOptions = `
        <option value="">Select product</option>
        @foreach($products as $p)
            <option value="{{ $p->id }}" data-price="{{ $p->price }}">{{ $p->name }} ({{ $p->sku }}) - ₱{{ number_format($p->price, 2) }}</option>
        @endforeach
    `;

    function createItemRow(index) {
        const div = document.createElement('div');
        div.className = 'row g-3 item-row border rounded p-3 mb-3';
        div.setAttribute('data-index', index);
        
        div.innerHTML = `
            <div class="col-lg-3 col-md-6">
                <label class="form-label">Product</label>
                <select class="form-select product-select" name="items[${index}][product_id]" data-index="${index}" required>
                    ${productOptions}
                </select>
            </div>
            <div class="col-lg-2 col-md-3 col-sm-6">
                <label class="form-label">Quantity</label>
                <input type="number" class="form-control quantity-input" name="items[${index}][quantity]" value="1" min="1" data-index="${index}" required>
            </div>
            <div class="col-lg-2 col-md-3 col-sm-6">
                <label class="form-label">Unit Price</label>
                <input type="number" step="0.01" class="form-control unit-price-input" name="items[${index}][unit_price]" value="0" min="0" data-index="${index}" required>
            </div>
            <div class="col-lg-2 col-md-6 col-sm-6">
                <label class="form-label">Subtotal</label>
                <input type="text" class="form-control line-total" value="₱0.00" readonly>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <label class="form-label">Action</label>
                <button type="button" class="btn-admin-light btn-sm w-100 remove-item">
                    <i class="fas fa-trash me-1"></i> Remove
                </button>
            </div>
        `;
        
        return div;
    }

    function updateLineTotal(index) {
        const row = document.querySelector(`.item-row[data-index="${index}"]`);
        const quantity = parseFloat(row.querySelector('.quantity-input').value) || 0;
        const unitPrice = parseFloat(row.querySelector('.unit-price-input').value) || 0;
        const lineTotal = quantity * unitPrice;
        
        row.querySelector('.line-total').value = '₱' + lineTotal.toFixed(2);
        updateOrderTotal();
    }

    function updateOrderTotal() {
        let total = 0;
        document.querySelectorAll('.item-row').forEach(row => {
            const quantity = parseFloat(row.querySelector('.quantity-input').value) || 0;
            const unitPrice = parseFloat(row.querySelector('.unit-price-input').value) || 0;
            total += quantity * unitPrice;
        });

        orderTotalEl.textContent = '₱' + total.toFixed(2);
        totalDisplayEl.value = '₱' + total.toFixed(2);
        totalHiddenEl.value = total.toFixed(2);
        
        updateChange();
        validatePayment();
    }

    function updateChange() {
        const total = parseFloat(totalHiddenEl.value) || 0;
        const paid = parseFloat(amountPaidEl.value) || 0;
        const change = Math.max(0, paid - total);
        
        changeDisplayEl.value = '₱' + change.toFixed(2);
    }

    function validatePayment() {
        const total = parseFloat(totalHiddenEl.value) || 0;
        const paid = parseFloat(amountPaidEl.value) || 0;
        const hasItems = document.querySelectorAll('.item-row').length > 0;
        
        const isValid = total > 0 && paid >= total && hasItems;
        
        submitButton.disabled = !isValid;
        
        if (paid < total && paid > 0) {
            amountPaidEl.classList.add('is-invalid');
            paymentError.style.display = 'block';
        } else {
            amountPaidEl.classList.remove('is-invalid');
            paymentError.style.display = 'none';
        }
    }

    function updateRemoveButtons() {
        const rows = document.querySelectorAll('.item-row');
        rows.forEach((row, index) => {
            const removeBtn = row.querySelector('.remove-item');
            removeBtn.disabled = rows.length === 1;
        });
    }

    // Event delegation for dynamic elements
    container.addEventListener('change', function(e) {
        if (e.target.classList.contains('product-select')) {
            const index = e.target.dataset.index;
            const selectedOption = e.target.selectedOptions[0];
            const price = selectedOption ? selectedOption.dataset.price : 0;
            const priceInput = document.querySelector(`.unit-price-input[data-index="${index}"]`);
            priceInput.value = price;
            updateLineTotal(index);
        }
        
        if (e.target.classList.contains('quantity-input') || e.target.classList.contains('unit-price-input')) {
            const index = e.target.dataset.index;
            updateLineTotal(index);
        }
    });

    container.addEventListener('click', function(e) {
        if (e.target.closest('.remove-item')) {
            const row = e.target.closest('.item-row');
            row.remove();
            updateOrderTotal();
            updateRemoveButtons();
        }
    });

    addButton.addEventListener('click', function() {
        const newRow = createItemRow(itemIndex);
        container.appendChild(newRow);
        itemIndex++;
        updateRemoveButtons();
    });

    amountPaidEl.addEventListener('input', function() {
        updateChange();
        validatePayment();
    });

    // Initialize
    updateRemoveButtons();
    validatePayment();
})();
</script>
@endpush
@endsection


--- End of File ---

File: .\resources\views\admin\sales\edit.blade.php
@extends('layouts.admin')
@section('title', 'Edit Sale')
@section('page-title', 'Edit Sale')

@section('content')
<div class="container-fluid">
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.sales.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-edit"></i> Edit Sale: {{ $sale->order_number }}
        </h1>
    </div>

    @if($sale->status !== 'completed')
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <strong>Note:</strong> Only completed sales can be edited for security reasons.
        </div>
    @else
        <form method="POST" action="{{ route('admin.sales.update', $sale) }}">
            @csrf
            @method('PUT')
            
            <!-- Sale Details (Read-only) -->
            <div class="card admin-card mb-3">
                <div class="card-header">
                    <h6 class="m-0"><i class="fas fa-info-circle me-2"></i>Sale Information</h6>
                </div>
                <div class="card-body admin-card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <table class="table table-borderless table-sm">
                                <tr><td><strong>Order Number:</strong></td><td>{{ $sale->order_number }}</td></tr>
                                <tr><td><strong>Date:</strong></td><td>{{ $sale->order_date->format('M d, Y') }}</td></tr>
                                <tr><td><strong>Status:</strong></td><td>
                                    <span class="badge-admin-role admin">
                                        <i class="fas fa-check-circle me-1"></i> {{ ucfirst($sale->status) }}
                                    </span>
                                </td></tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <table class="table table-borderless table-sm">
                                <tr><td><strong>Total Amount:</strong></td><td>₱{{ number_format($sale->total_amount, 2) }}</td></tr>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Items (Read-only) -->
            <div class="card admin-card mb-3">
                <div class="card-header">
                    <h6 class="m-0"><i class="fas fa-list me-2"></i>Items Sold</h6>
                </div>
                <div class="card-body admin-card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-sm">
                            <thead class="table-light">
                                <tr>
                                    <th>Product</th>
                                    <th class="text-end">Quantity</th>
                                    <th class="text-end">Unit Price</th>
                                    <th class="text-end">Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach($sale->items as $item)
                                    <tr>
                                        <td>{{ $item->product->name }} <small class="text-muted">({{ $item->product->sku }})</small></td>
                                        <td class="text-end">{{ $item->quantity }}</td>
                                        <td class="text-end">₱{{ number_format($item->unit_price, 2) }}</td>
                                        <td class="text-end">₱{{ number_format($item->total_price, 2) }}</td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Editable Fields -->
            <div class="card admin-card mb-3">
                <div class="card-header">
                    <h6 class="m-0"><i class="fas fa-edit me-2"></i>Editable Information</h6>
                </div>
                <div class="card-body admin-card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Cashier</label>
                            <select name="cashier_id" class="form-select" required>
                                <option value="">Select cashier</option>
                                @foreach($cashiers as $emp)
                                    <option value="{{ $emp->emp_id }}" @selected(old('cashier_id', $sale->cashier_id) == $emp->emp_id)>
                                        {{ $emp->first_name }} {{ $emp->last_name }}
                                    </option>
                                @endforeach
                            </select>
                        </div>
                        <div class="col-12">
                            <label class="form-label">Notes</label>
                            <textarea name="notes" class="form-control" rows="3" placeholder="Add any notes about this sale...">{{ old('notes', $sale->notes) }}</textarea>
                        </div>
                    </div>
                </div>
            </div>     
                <div class="row mt-2">
                    <div class="col-md-12 d-flex justify-content-end gap-2">
                        <button type="button" onclick="window.location='{{ route('admin.sales.index') }}'" class="btn-admin-light btn-sm">
                            <i class="fas fa-times me-2"></i> Cancel
                        </button>
                        <button class="btn-admin-secondary btn-sm" type="submit">
                            <i class="fas fa-save me-2"></i> Update Sale
                        </button>
                    </div>
                </div>
           
        </form>
    @endif
</div>
@endsection

--- End of File ---

File: .\resources\views\admin\sales\index.blade.php
@extends('layouts.admin')
@section('title', 'Sales Management')
@section('page-title', 'Sales Management')

@section('content')
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-muted-sea">
            <i class="fas fa-cash-register"></i> Sales Management
        </h1>
        <a href="{{ route('admin.sales.create') }}" class="btn-admin-secondary">
            <i class="fas fa-plus me-2"></i> New Sale
        </a>
    </div>

    <!-- Filters -->
    <div class="card admin-filter-card shadow mb-4">
        <div class="card-body admin-card-body">
            <form method="GET" action="{{ route('admin.sales.index') }}" class="row g-3">
                <div class="col-md-2">
                    <label for="status" class="form-label">Status</label>
                    <select name="status" id="status" class="form-select">
                        <option value="">All Status</option>
                        @foreach(['completed','cancelled','refunded'] as $s)
                            <option value="{{ $s }}" {{ request('status')===$s ? 'selected' : '' }}>{{ ucfirst($s) }}</option>
                        @endforeach
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="search" class="form-label">Search</label>
                    <input type="text" name="search" id="search" class="form-control" 
                           placeholder="Sale number or notes..." value="{{ request('search') }}">
                </div>
                <div class="col-md-2">
                    <label for="date_from" class="form-label">Date From</label>
                    <input type="date" name="date_from" id="date_from" class="form-control" value="{{ request('date_from') }}">
                </div>
                <div class="col-md-2">
                    <label for="date_to" class="form-label">Date To</label>
                    <input type="date" name="date_to" id="date_to" class="form-control" value="{{ request('date_to') }}">
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button type="submit" class="btn-admin-secondary">
                        <i class="fas fa-search me-1"></i> Filter
                    </button>
                    <button type="reset" class="btn-admin-light" onclick="window.location='{{ route('admin.sales.index') }}'">
                        <i class="fas fa-undo me-1"></i> Reset
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div class="card kpi-card shadow">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-sea-primary">Sales ({{ $sales->total() }})</h6>
        </div>
        <div class="card-body admin-card-body">
            @if($sales->count())
                <div class="table-responsive">
                    <table class="table table-bordered align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Order #</th>
                                <th>Date</th>
                                <th class="text-end">Items</th>
                                <th class="text-end">Total</th>
                                <th>Status</th>
                                <th width="220" class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($sales as $s)
                                <tr>
                                    <td><a class="text-decoration-none" href="{{ route('admin.sales.show', $s) }}">{{ $s->order_number }}</a></td>
                                    <td>{{ $s->order_date?->format('Y-m-d') }}</td>
                                    <td class="text-end">{{ $s->items->sum('quantity') }}</td>
                                    <td class="text-end">₱{{ number_format($s->total_amount, 2) }}</td>
                                    <td>
                                        @switch($s->status)
                                            @case('completed')
                                                <span class="badge-admin-role baker" style="background: linear-gradient(135deg, #4CAF50 0%, #8BC34A 100%) !important; color: #fff !important;">
                                                    <i class="fas fa-check-circle me-1"></i> Completed
                                                </span>
                                                @break
                                            @case('cancelled')
                                                <span class="badge-admin-role baker"><i class="fas fa-times-circle me-1"></i> Cancelled</span>
                                                @break
                                            @case('refunded')
                                                <span class="badge-admin-role manager"><i class="fas fa-undo me-1"></i> Refunded</span>
                                                @break
                                        @endswitch
                                    </td>
                                    <td>
                                        <div class="d-flex gap-2 align-items-center">
                                            <button type="button" class="btn-admin-light btn-sm border border-1 d-flex align-items-center gap-1" 
                                                    onclick="window.location='{{ route('admin.sales.show', $s) }}'" 
                                                    title="View">
                                                <i class="fas fa-eye" aria-label="View"></i>
                                                <span class="small text-muted">View</span>
                                            </button>
                                            @if($s->status === 'completed')
                                                <button type="button" class="btn-admin-secondary btn-sm border border-1 d-flex align-items-center gap-1" 
                                                        onclick="window.location='{{ route('admin.sales.edit', $s) }}'" 
                                                        title="Edit">
                                                    <i class="fas fa-edit" aria-label="Edit"></i>
                                                    <span class="small text-muted">Edit</span>
                                                </button>
                                            @endif
                                            @if($s->status !== 'cancelled')
                                                <button type="button" class="btn-admin-info btn-sm border border-1 d-flex align-items-center gap-1" 
                                                        title="Cancel"
                                                        onclick="openCancelModal(this)"
                                                        data-order="{{ $s->order_number }}"
                                                        data-total="{{ number_format($s->total_amount, 2) }}"
                                                        data-action="{{ route('admin.sales.cancel', $s) }}"> 
                                                    <i class="fas fa-ban" aria-label="Cancel"></i>
                                                    <span class="small text-muted">Cancel</span>
                                                </button>
                                            @endif
                                        </div>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>Showing {{ $sales->firstItem() }} to {{ $sales->lastItem() }} of {{ $sales->total() }}</div>
                    {{ $sales->appends(request()->query())->links('vendor.pagination.admin') }}
                </div>
            @else
                <div class="text-center py-4">
                    <i class="fas fa-cash-register fa-3x text-gray-300 mb-3"></i>
                    <h5>No sales found</h5>
                </div>
            @endif
        </div>
    </div>
</div>

<!-- Cancel Sale Modal -->
<div id="cancelSaleModal" class="sea-modal" aria-hidden="true">
    <div class="sea-modal-dialog">
        <div class="sea-modal-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0 flex-grow-1" style="flex-basis:80%;max-width:80%;">
                <i class="fas fa-ban me-2"></i> Confirm Cancellation - <span id="cancelSaleOrder"></span>
            </h5>
            <div style="flex-basis:10%;max-width:10%;" class="text-end">
                <button type="button" class="btn-admin-light btn-sm" onclick="closeModal('cancelSaleModal')">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        <div class="sea-modal-body">
            <form id="cancelSaleForm" method="POST" action="#">
                @csrf
                @method('PATCH')
                <p>
                    Are you sure you want to cancel sale <strong id="cancelSaleOrderNumber"></strong> 
                    with total amount of <strong>₱<span id="cancelSaleTotal"></span></strong>? 
                    This will restore the product stock. This action cannot be undone.
                </p>
                <div class="d-flex justify-content-end mt-3">
                    <button type="button" class="btn-admin-light me-2" onclick="closeModal('cancelSaleModal')">Cancel</button>
                    <button type="submit" class="btn-admin-primary">Confirm Cancellation</button>
                </div>
            </form>
        </div>
    </div>
</div>

@push('scripts')
<script>
function openCancelModal(button) {
    const order = button.getAttribute('data-order');
    const total = button.getAttribute('data-total');
    const action = button.getAttribute('data-action');
    
    document.getElementById('cancelSaleOrder').textContent = order;
    document.getElementById('cancelSaleOrderNumber').textContent = order;
    document.getElementById('cancelSaleTotal').textContent = total;
    document.getElementById('cancelSaleForm').setAttribute('action', action);
    
    document.getElementById('cancelSaleModal').classList.add('show');
    document.body.style.overflow = 'hidden';
}

function closeModal(modalId) {
    document.getElementById(modalId).classList.remove('show');
    document.body.style.overflow = '';
}

// Close modal on backdrop click
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('sea-modal')) {
        closeModal(e.target.id);
    }
});

// Close modal on Escape key
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        const openModal = document.querySelector('.sea-modal.show');
        if (openModal) {
            closeModal(openModal.id);
        }
    }
});
</script>
@endpush
@endsection


--- End of File ---

File: .\resources\views\admin\sales\show.blade.php
@extends('layouts.admin')
@section('title', 'Sale Details')
@section('page-title', 'Sale Details')

@section('content')
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.sales.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-eye me-2"></i> Sale Details - {{ $sale->order_number }}
        </h1>
        @if($sale->status === 'completed')
            <a href="{{ route('admin.sales.edit', $sale) }}" class="btn-admin-secondary ms-3 position-absolute end-0">
                <i class="fas fa-edit me-1"></i> Edit
            </a>
        @endif
    </div>

    <!-- Sale Information -->
    <div class="card kpi-card info shadow mb-4">
        <div class="card-header">
            <h5 class="mb-0 text-sea-primary">
                <i class="fas fa-info-circle me-2"></i> Sale Information
            </h5>
        </div>
        <div class="card-body admin-card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <table class="table table-borderless">
                        <tr><td><strong>Order Number:</strong></td><td>{{ $sale->order_number }}</td></tr>
                        <tr><td><strong>Order Date:</strong></td><td>{{ $sale->order_date?->format('Y-m-d') }}</td></tr>
                        <tr><td><strong>Order Type:</strong></td><td>{{ ucfirst(str_replace('_',' ', $sale->order_type)) }}</td></tr>
                        <tr><td><strong>Cashier:</strong></td><td>{{ $sale->cashier?->full_name ?? ($sale->cashier?->first_name.' '.$sale->cashier?->last_name) ?? 'N/A' }}</td></tr>
                    </table>
                </div>
                <div class="col-md-6">
                    <table class="table table-borderless">
                        <tr><td><strong>Subtotal:</strong></td><td>₱{{ number_format($sale->subtotal, 2) }}</td></tr>
                        <tr><td><strong>VAT ({{ config('vat.vat_rate', 12) }}%):</strong></td><td>₱{{ number_format($sale->vat_amount, 2) }}</td></tr>
                        <tr><td><strong>Total Amount:</strong></td><td class="text-success fw-bold">₱{{ number_format($sale->total_amount, 2) }}</td></tr>
                        <tr>
                            <td><strong>Status:</strong></td>
                            <td>
                                @switch($sale->status)
                                    @case('completed')
                                        <span class="badge-admin-role baker"><i class="fas fa-check-circle me-1"></i> Completed</span>
                                        @break
                                    @case('cancelled')
                                        <span class="badge-admin-role baker"><i class="fas fa-times-circle me-1"></i> Cancelled</span>
                                        @break
                                    @case('refunded')
                                        <span class="badge-admin-role manager"><i class="fas fa-undo me-1"></i> Refunded</span>
                                        @break
                                @endswitch
                            </td>
                        </tr>
                    </table>
                </div>
                @if($sale->notes)
                    <div class="col-12">
                        <strong>Notes:</strong>
                        <p class="mt-2 p-3 bg-light rounded">{{ $sale->notes }}</p>
                    </div>
                @endif
            </div>
            
            
        </div>
    </div>

    <!-- Sale Items -->
    <div class="card kpi-card info shadow">
        <div class="card-header">
            <h5 class="mb-0 text-sea-primary">
                <i class="fas fa-shopping-cart me-2"></i> Sale Items ({{ $sale->items->count() }})
            </h5>
        </div>
        <div class="card-body admin-card-body">
            <div class="table-responsive">
                <table class="table table-bordered align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>Product</th>
                            <th>SKU</th>
                            <th class="text-end">Quantity</th>
                            <th class="text-end">Unit Price</th>
                            <th class="text-end">Total Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($sale->items as $item)
                            <tr>
                                <td>{{ $item->product?->name ?? 'Unknown Product' }}</td>
                                <td>{{ $item->product?->sku ?? 'N/A' }}</td>
                                <td class="text-end">{{ $item->quantity }}</td>
                                <td class="text-end">₱{{ number_format($item->unit_price, 2) }}</td>
                                <td class="text-end fw-bold">₱{{ number_format($item->total_price, 2) }}</td>
                            </tr>
                        @endforeach
                    </tbody>
                    <tfoot class="table-light">
                        <tr>
                            <th colspan="4" class="text-end">Total:</th>
                            <th class="text-end text-success">₱{{ number_format($sale->total_amount, 2) }}</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>

@push('scripts')
<script>
function handleCancelSale(url) {
    if(confirm('Are you sure you want to cancel this sale?')) {
        var form = document.createElement('form');
        form.method = 'POST';
        form.action = url;
        
        var csrfInput = document.createElement('input');
        csrfInput.type = 'hidden';
        csrfInput.name = '_token';
        csrfInput.value = '{{ csrf_token() }}';
        form.appendChild(csrfInput);
        
        var methodInput = document.createElement('input');
        methodInput.type = 'hidden';
        methodInput.name = '_method';
        methodInput.value = 'PATCH';
        form.appendChild(methodInput);
        
        document.body.appendChild(form);
        form.submit();
    }
}
</script>
@endpush
@endsection


--- End of File ---

File: .\resources\views\admin\sales-reports\index.blade.php
@extends('layouts.admin')
@section('title', 'Sales Reports')
@section('page-title', 'Sales Reports')

@section('content')
<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-muted-sea">
            <i class="fas fa-chart-line"></i> Sales Reports
        </h1>
        <div class="btn-group">
            <a href="{{ route('admin.sales-reports.show', request()->query()) }}" class="btn-admin-secondary">
                <i class="fas fa-chart-bar me-2"></i> Detailed Report
            </a>
            <a href="{{ route('admin.sales-reports.export', request()->query()) }}" class="btn-admin-primary">
                <i class="fas fa-file-pdf me-2"></i> Export PDF
            </a>
        </div>
    </div>
        <!-- Filters -->
    <div class="card admin-filter-card shadow mb-4">
        <div class="card-body admin-card-body">
            <form method="GET" class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Date From</label>
                    <input type="date" name="date_from" class="form-control" value="{{ $dateFrom }}" required>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Date To</label>
                    <input type="date" name="date_to" class="form-control" value="{{ $dateTo }}" required>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Status</label>
                    <select name="status" class="form-select">
                        <option value="">All</option>
                        @foreach(['completed','cancelled','refunded'] as $s)
                            <option value="{{ $s }}" {{ request('status')===$s ? 'selected' : '' }}>{{ ucfirst($s) }}</option>
                        @endforeach
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Cashier</label>
                    <select name="cashier_id" class="form-select">
                        <option value="">All cashiers</option>
                        @foreach($cashiers as $emp)
                            <option value="{{ $emp->emp_id }}" {{ request('cashier_id')==$emp->emp_id ? 'selected' : '' }}>
                                {{ $emp->first_name }} {{ $emp->last_name }}
                            </option>
                        @endforeach
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Search</label>
                    <input type="text" name="search" class="form-control" value="{{ request('search') }}" placeholder="Sale # or notes">
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button class="btn-admin-secondary me-2" type="submit"><i class="fas fa-filter me-1"></i> Apply</button>
                    <button type="button" onclick="window.location='{{ route('admin.sales-reports.index') }}'" class="btn-admin-light">
                        <i class="fas fa-undo me-1"></i> Reset
                    </button>
                </div>
            </form>
        </div>
    </div>
    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card kpi-card">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div class="text-sea-primary">
                        <i class="fas fa-peso-sign fa-2x"></i>
                    </div>
                    <div class="flex-grow-1 text-end">
                        <h3 class="mb-0">{{ '₱' . number_format($totalSales, 2) }}</h3>
                        <p class="text-muted mb-0">Total Sales</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card kpi-card">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div class="text-sea-primary">
                        <i class="fas fa-shopping-cart fa-2x"></i>
                    </div>
                    <div class="flex-grow-1 text-end">
                        <h3 class="mb-0">{{ number_format($totalTransactions) }}</h3>
                        <p class="text-muted mb-0">Total Transactions</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card kpi-card">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div class="text-sea-primary">
                        <i class="fas fa-calculator fa-2x"></i>
                    </div>
                    <div class="flex-grow-1 text-end">
                        <h3 class="mb-0">{{ '₱' . number_format($averageTransaction, 2) }}</h3>
                        <p class="text-muted mb-0">Average Transaction</p>
                    </div>
                </div>
            </div>
        </div>
    </div>



    <!-- Sales Table -->
    <div class="card kpi-card shadow">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-sea-primary">Sales Transactions ({{ $sales->total() }})</h6>
            <small class="text-muted">{{ $dateFrom }} to {{ $dateTo }}</small>
        </div>
        <div class="card-body admin-card-body">
            @if($sales->count())
                <div class="table-responsive">
                    <table class="table table-bordered align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Order #</th>
                                <th>Date</th>
                                <th>Cashier</th>
                                <th class="text-end">Items</th>
                                <th class="text-end">Total</th>
                                <th>Status</th>
                                <th width="120" class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($sales as $sale)
                                <tr>
                                    <td><a class="text-decoration-none" href="{{ route('admin.sales.show', $sale) }}">{{ $sale->order_number }}</a></td>
                                    <td>{{ $sale->order_date?->format('M d, Y') }}</td>
                                    <td>{{ $sale->cashier ? ($sale->cashier->first_name . ' ' . $sale->cashier->last_name) : '—' }}</td>
                                    <td class="text-end">{{ $sale->items->sum('quantity') }}</td>
                                    <td class="text-end">₱{{ number_format($sale->total_amount, 2) }}</td>
                                    <td>
                                        @switch($sale->status)
                                            @case('completed')
                                                <span class="badge-admin-role" style="background: linear-gradient(135deg, #4CAF50 0%, #8BC34A 100%) !important; color: #fff !important;">
                                                    <i class="fas fa-check-circle me-1" aria-label="Completed"></i> Completed
                                                </span>
                                                @break
                                            @case('cancelled')
                                                <span class="badge-admin-role baker"><i class="fas fa-times-circle me-1" aria-label="Cancelled"></i> Cancelled</span>
                                                @break
                                            @case('refunded')
                                                <span class="badge-admin-role manager"><i class="fas fa-undo me-1" aria-label="Refunded"></i> Refunded</span>
                                                @break
                                        @endswitch
                                    </td>
                                    <td>
                                        <div class="d-flex gap-2 align-items-center">
                                            <button type="button"
                                                class="btn-admin-light btn-sm border border-1 d-flex align-items-center gap-1"
                                                onclick="window.location='{{ route('admin.sales.show', $sale) }}'"
                                                title="View"
                                                aria-label="View Sale">
                                                <i class="fas fa-eye" aria-label="View"></i>
                                                <span class="small text-muted">View</span>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>Showing {{ $sales->firstItem() }} to {{ $sales->lastItem() }} of {{ $sales->total() }}</div>
                    {{ $sales->appends(request()->query())->links('vendor.pagination.admin') }}
                </div>
            @else
                <div class="text-center py-4">
                    <i class="fas fa-chart-line fa-3x text-gray-300 mb-3"></i>
                    <h5>No sales found for selected period</h5>
                    <p class="text-muted">Try adjusting your date range or filters</p>
                </div>
            @endif
        </div>
    </div>
</div>
@endsection

--- End of File ---

File: .\resources\views\admin\sales-reports\pdf.blade.php
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Report</title>
    <style>
        /* Minimal print styles - PDF only contains the report */
        * { box-sizing: border-box; }
        body { font-family: DejaVu Sans, Arial, Helvetica, sans-serif; font-size: 12px; color: #111827; margin: 16px; }
        h1, h2, h3, h4, h5 { margin: 0; }
        .muted { color: #6b7280; }
        .report-header { margin-bottom: 14px; }
        .period { font-size: 11px; color: #6b7280; margin-top: 4px; }
        .summary { display: table; width: 100%; margin: 10px 0 14px; }
        .summary .cell { display: table-cell; width: 33.33%; padding: 8px 10px; border: 1px solid #e5e7eb; }
        .label { font-size: 11px; color: #6b7280; margin-bottom: 4px; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #e5e7eb; padding: 6px 8px; }
        thead th { background: #f9fafb; font-weight: 600; }
        tfoot th { background: #f3f4f6; }
        .text-end { text-align: right; }
    </style>
    <!-- Optional: You can add a logo by placing an <img> here if needed for branding -->
<div style="text-align: center; margin-bottom: 18px;">
    <img src="{{ public_path('images/Arbee\'s_logo_round.png') }}" alt="Logo" style="height:72px; border: 2px solid black; border-radius: 50%;">
    <div style="font-size: 1.7em; font-weight: bold; margin-top: 8px; letter-spacing: 1px;">
        Arbee's Bakeshop
    </div>
</div>
    
</head>
<body>
    <div class="report-header">
        <h2>Sales Report</h2>
        <div class="period">Period: <b>{{ $dateFrom }} to {{ $dateTo }}<b></div>
    </div>

    <div class="summary">
        <div class="cell">
            <div class="label">Total Sales</div>
            <div><strong>₱{{ number_format($totalSales, 2) }}</strong></div>
        </div>
        <div class="cell">
            <div class="label">Total Transactions</div>
            <div><strong>{{ number_format($totalTransactions) }}</strong></div>
        </div>
        <div class="cell">
            <div class="label">Average Transaction</div>
            <div><strong>₱{{ number_format($averageTransaction, 2) }}</strong></div>
        </div>
    </div>

    <table>
        <thead>
            <tr>
                <th>Order #</th>
                <th>Date</th>
                <th>Cashier</th>
                <th class="text-end">Items</th>
                <th class="text-end">Total</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach($sales as $sale)
                <tr>
                    <td>{{ $sale->order_number }}</td>
                    <td>{{ $sale->order_date?->format('Y-m-d') }}</td>
                    <td>{{ $sale->cashier ? ($sale->cashier->first_name . ' ' . $sale->cashier->last_name) : '—' }}</td>
                    <td class="text-end">{{ $sale->items->sum('quantity') }}</td>
                    <td class="text-end">₱{{ number_format($sale->total_amount, 2) }}</td>
                    <td>{{ ucfirst($sale->status) }}</td>
                </tr>
            @endforeach
        </tbody>
        <tfoot>
            <tr>
                <th colspan="4" class="text-end">Totals</th>
                <th class="text-end">₱{{ number_format($totalSales, 2) }}</th>
                <th>&nbsp;</th>
            </tr>
        </tfoot>
    </table>
</body>
</html>


--- End of File ---

File: .\resources\views\admin\sales-reports\show.blade.php
@extends('layouts.admin')
@section('title', 'Detailed Sales Report')
@section('page-title', 'Detailed Sales Report')

@section('content')
<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-muted-sea">
            <i class="fas fa-chart-bar"></i> Detailed Sales Report
        </h1>
        <div class="btn-group gap-3">
            <a href="{{ route('admin.sales-reports.index', ['date_from' => $dateFrom, 'date_to' => $dateTo]) }}" class="btn-admin-light">
                <i class="fas fa-arrow-left me-2"></i> Back to List
            </a>
            <a href="{{ route('admin.sales-reports.export', ['date_from' => $dateFrom, 'date_to' => $dateTo]) }}" class="btn-admin-primary">
                <i class="fas fa-file-pdf me-2"></i> Export PDF
            </a>
        </div>
    </div>

    <!-- Period Info -->
    <div class="alert alert-info mb-4">
        <i class="fas fa-calendar me-2"></i>
        <strong>Report Period:</strong> {{ \Carbon\Carbon::parse($dateFrom)->format('M d, Y') }} to {{ \Carbon\Carbon::parse($dateTo)->format('M d, Y') }}
    </div>

    <!-- Daily Sales Summary -->
    <div class="card kpi-card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-sea-primary">
                <i class="fas fa-calendar-day me-2"></i> Daily Sales Summary
            </h6>
        </div>
        <div class="card-body admin-card-body">
            @if($dailySales->count())
                <div class="table-responsive">
                    <table class="table table-bordered align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Date</th>
                                <th class="text-end">Transactions</th>
                                <th class="text-end">Total Sales</th>
                                <th class="text-end">Average per Transaction</th>
                            </tr>
                        </thead>
                        <tbody>
                            @php $totalTrans = 0; $totalAmount = 0; @endphp
                            @foreach($dailySales as $day)
                                @php $totalTrans += $day->transactions; $totalAmount += $day->total; @endphp
                                <tr>
                                    <td>{{ \Carbon\Carbon::parse($day->date)->format('M d, Y (D)') }}</td>
                                    <td class="text-end">{{ number_format($day->transactions) }}</td>
                                    <td class="text-end">₱{{ number_format($day->total, 2) }}</td>
                                    <td class="text-end">₱{{ number_format($day->transactions > 0 ? $day->total / $day->transactions : 0, 2) }}</td>
                                </tr>
                            @endforeach
                        </tbody>
                        <tfoot class="table-light">
                            <tr>
                                <th>Total</th>
                                <th class="text-end">{{ number_format($totalTrans) }}</th>
                                <th class="text-end">₱{{ number_format($totalAmount, 2) }}</th>
                                <th class="text-end">₱{{ number_format($totalTrans > 0 ? $totalAmount / $totalTrans : 0, 2) }}</th>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            @else
                <div class="text-center py-4">
                    <i class="fas fa-calendar-times fa-3x text-gray-300 mb-3"></i>
                    <h5>No sales data for this period</h5>
                </div>
            @endif
        </div>
    </div>

    <div class="row">
        <!-- Top Products -->
        <div class="col-md-6">
            <div class="card kpi-card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-sea-primary">
                        <i class="fas fa-trophy me-2"></i> Top Products
                    </h6>
                </div>
                <div class="card-body admin-card-body">
                    @if($topProducts->count())
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead class="table-light">
                                    <tr>
                                        <th>Product</th>
                                        <th class="text-end">Qty Sold</th>
                                        <th class="text-end">Revenue</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach($topProducts as $product)
                                        <tr>
                                            <td>
                                                <strong>{{ $product->name }}</strong><br>
                                                <small class="text-muted">{{ $product->sku }}</small>
                                            </td>
                                            <td class="text-end">{{ number_format($product->total_qty) }}</td>
                                            <td class="text-end">₱{{ number_format($product->total_revenue, 2) }}</td>
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>
                    @else
                        <div class="text-center py-4">
                            <i class="fas fa-box fa-2x text-gray-300 mb-3"></i>
                            <p>No product sales data</p>
                        </div>
                    @endif
                </div>
            </div>
        </div>

        <!-- Cashier Performance -->
        <div class="col-md-6">
            <div class="card kpi-card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-sea-primary">
                        <i class="fas fa-users me-2"></i> Cashier Performance
                    </h6>
                </div>
                <div class="card-body admin-card-body">
                    @if($cashierPerformance->count())
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead class="table-light">
                                    <tr>
                                        <th>Cashier</th>
                                        <th class="text-end">Transactions</th>
                                        <th class="text-end">Total Sales</th>
                                        <th class="text-end">Avg/Transaction</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach($cashierPerformance as $perf)
                                        <tr>
                                            <td>{{ $perf->cashier ? ($perf->cashier->first_name . ' ' . $perf->cashier->last_name) : 'Unknown' }}</td>
                                            <td class="text-end">{{ number_format($perf->transactions) }}</td>
                                            <td class="text-end">₱{{ number_format($perf->total_sales, 2) }}</td>
                                            <td class="text-end">₱{{ number_format($perf->transactions > 0 ? $perf->total_sales / $perf->transactions : 0, 2) }}</td>
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>
                    @else
                        <div class="text-center py-4">
                            <i class="fas fa-user-times fa-2x text-gray-300 mb-3"></i>
                            <p>No cashier performance data</p>
                        </div>
                    @endif
                </div>
            </div>
        </div>
    </div>

    <!-- Hourly Sales Pattern -->
    <div class="card kpi-card shadow">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-sea-primary">
                <i class="fas fa-clock me-2"></i> Hourly Sales Pattern
            </h6>
        </div>
        <div class="card-body admin-card-body">
            @if($hourlySales->count())
                <div class="table-responsive">
                    <table class="table table-bordered align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Hour</th>
                                <th class="text-end">Transactions</th>
                                <th class="text-end">Total Sales</th>
                                <th class="text-end">Average per Transaction</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($hourlySales as $hour)
                                <tr>
                                    <td>{{ sprintf('%02d:00 - %02d:59', $hour->hour, $hour->hour) }}</td>
                                    <td class="text-end">{{ number_format($hour->transactions) }}</td>
                                    <td class="text-end">₱{{ number_format($hour->total, 2) }}</td>
                                    <td class="text-end">₱{{ number_format($hour->transactions > 0 ? $hour->total / $hour->transactions : 0, 2) }}</td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            @else
                <div class="text-center py-4">
                    <i class="fas fa-clock fa-3x text-gray-300 mb-3"></i>
                    <h5>No hourly sales data</h5>
                </div>
            @endif
        </div>
    </div>
</div>
@endsection

--- End of File ---

File: .\resources\views\admin\settings\index.blade.php
@extends('layouts.admin')
@section('title', 'System Settings')
@section('page-title', 'System Settings')

@section('content')
<div class="container-fluid">
  <div class="card kpi-card shadow">
    <div class="card-body admin-card-body">
      <form method="POST" action="{{ route('admin.settings.update') }}" class="row g-3">
        @csrf
        @method('PUT')
        <div class="col-md-6">
          <label class="form-label">Store Name</label>
          <input type="text" class="form-control" name="store_name" value="{{ $settings['store.name'] }}" required>
        </div>
        <div class="col-md-6">
          <label class="form-label">Branch</label>
          <input type="text" class="form-control" name="store_branch" value="{{ $settings['store.branch'] }}" required>
        </div>
        <div class="col-md-6">
          <label class="form-label">Theme</label>
          <select class="form-select" name="ui_theme">
            <option value="sea" {{ $settings['ui.theme']==='sea' ? 'selected' : '' }}>Sea Style</option>
          </select>
        </div>
        <div class="col-12">
          <button class="btn-admin-primary" type="submit"><i class="fas fa-save me-2"></i> Save Settings</button>
        </div>
      </form>
    </div>
  </div>
</div>
@endsection


--- End of File ---

File: .\resources\views\admin\users\create.blade.php
@extends('layouts.admin')

@section('title', 'Create User')
@section('page-title', 'Create New User')

@section('content')
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.users.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-user-plus"></i> Create New User
        </h1>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card kpi-card primary shadow">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-user-plus me-2"></i> User Information</h5>
                </div>
                <div class="card-body admin-card-body">
                    <form action="{{ route('admin.users.store') }}" method="POST">
                        @csrf
                        
                        <!-- Employee Selection -->
                        <div class="mb-3">
                            <label for="emp_id" class="form-label">
                                <i class="fas fa-id-badge text-sea-primary"></i> Employee <span class="text-danger">*</span>
                            </label>
                            <select name="emp_id" id="emp_id" class="form-select @error('emp_id') is-invalid @enderror" required>
                                <option value="">Select Employee</option>
                                @foreach($availableEmployees as $employee)
                                    <option value="{{ $employee->emp_id }}" {{ old('emp_id') == $employee->emp_id ? 'selected' : '' }}>
                                        {{ $employee->full_name }} - {{ $employee->phone }}
                                    </option>
                                @endforeach
                            </select>
                            @error('emp_id')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                            @if($availableEmployees->isEmpty())
                                <div class="text-warning mt-2">
                                    <i class="fas fa-exclamation-triangle"></i> No available employees. All employees already have user accounts.
                                </div>
                            @endif
                        </div>

                        <!-- Username -->
                        <div class="mb-3">
                            <label for="username" class="form-label">
                                <i class="fas fa-user text-sea-primary"></i> Username <span class="text-danger">*</span>
                            </label>
                            <input type="text" name="username" id="username" 
                                   class="form-control @error('username') is-invalid @enderror" 
                                   value="{{ old('username') }}" required>
                            @error('username')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>

                        <!-- Email -->
                        <div class="mb-3">
                            <label for="email" class="form-label">
                                <i class="fas fa-envelope text-sea-primary"></i> Email <span class="text-danger">*</span>
                            </label>
                            <input type="email" name="email" id="email" 
                                   class="form-control @error('email') is-invalid @enderror" 
                                   value="{{ old('email') }}" 
                                   autocomplete="off"
                                   required>
                            @error('email')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>

                        <!-- Role -->
                        <div class="mb-3">
                            <label for="role" class="form-label">
                                <i class="fas fa-user-tag text-sea-primary"></i> Role <span class="text-danger">*</span>
                            </label>
                            <select name="role" id="role" class="form-select @error('role') is-invalid @enderror" required>
                                <option value="">Select Role</option>
                                <option value="admin" {{ old('role') == 'admin' ? 'selected' : '' }}>
                                    <i class="fas fa-crown"></i> Admin
                                </option>
                                <option value="baker" {{ old('role') == 'baker' ? 'selected' : '' }}>
                                    <i class="fas fa-bread-slice"></i> Baker
                                </option>
                                <option value="cashier" {{ old('role') == 'cashier' ? 'selected' : '' }}>
                                    <i class="fas fa-cash-register"></i> Cashier
                                </option>
                            </select>
                            @error('role')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>

                        <!-- Password Info -->
                        <div class="alert-admin-info">
                            <i class="fas fa-info-circle me-2"></i> Password is required for new user accounts
                        </div>

                        <!-- Password -->
                        <div class="mb-3">
                            <label for="password" class="form-label">
                                <i class="fas fa-lock text-sea-primary"></i> Password <span class="text-danger">*</span>
                            </label>
                            <input type="password" name="password" id="password" 
                                   class="form-control @error('password') is-invalid @enderror" required>
                            @error('password')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                            <div class="form-text">Minimum 8 characters required</div>
                        </div>

                        <!-- Confirm Password -->
                        <div class="mb-3">
                            <label for="password_confirmation" class="form-label">
                                <i class="fas fa-lock text-sea-primary"></i> Confirm Password <span class="text-danger">*</span>
                            </label>
                            <input type="password" name="password_confirmation" id="password_confirmation" 
                                   class="form-control" required>
                        </div>

                        <!-- Status -->
                        <div class="mb-3">
                            <label for="status" class="form-label">
                                <i class="fas fa-toggle-on text-success"></i> Status
                            </label>
                            <select name="status" id="status" class="form-control" required>
                                <option value="active" {{ old('status', 'active') === 'active' ? 'selected' : '' }}>Active</option>
                                <option value="inactive" {{ old('status') === 'inactive' ? 'selected' : '' }}>Inactive</option>
                            </select>
                        </div>

                        <!-- Submit Buttons -->
                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn-admin-light" onclick="window.location='{{ route('admin.users.index') }}'">
                                <i class="fas fa-times me-2"></i> Cancel
                            </button>
                            <button type="submit" class="btn-admin-secondary">
                                <i class="fas fa-save me-2"></i> Create User
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Role Information Side Panel -->
        <div class="col-md-4">
            <div class="card kpi-card info shadow">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-info-circle me-2"></i> Role Descriptions</h5>
                </div>
                <div class="card-body admin-card-body">
                    <div class="role-info">
                        <div class="mb-3 p-3 rounded" style="border-left: 3px solid #FE5F55; background: rgba(238, 245, 219, 0.3);">
                            <span class="badge-admin-role admin mb-2">
                                <i class="fas fa-crown me-1"></i> Admin
                            </span>
                            <p class="mb-0 small text-muted">Full system access, manage all users and settings</p>
                        </div>
                        <div class="mb-3 p-3 rounded" style="border-left: 3px solid #FE5F55; background: rgba(238, 245, 219, 0.3);">
                            <span class="badge-admin-role baker mb-2">
                                <i class="fas fa-bread-slice me-1"></i> Baker
                            </span>
                            <p class="mb-0 small text-muted">Manage production, recipes, and baking operations</p>
                        </div>
                        <div class="mb-3 p-3 rounded" style="border-left: 3px solid #FE5F55; background: rgba(238, 245, 219, 0.3);">
                            <span class="badge-admin-role cashier mb-2">
                                <i class="fas fa-cash-register me-1"></i> Cashier
                            </span>
                            <p class="mb-0 small text-muted">Handle sales, payments, and customer service</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Available Employees Info -->
            <div class="card kpi-card primary shadow mt-3">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-users me-2"></i> Available Employees</h5>
                </div>
                <div class="card-body admin-card-body">
                    @if($availableEmployees->count() > 0)
                        <p class="text-success mb-2">
                            <i class="fas fa-check-circle"></i> {{ $availableEmployees->count() }} employees available for user creation
                        </p>
                        <small class="text-muted">
                            Select an employee from the dropdown to create their user account.
                        </small>
                    @else
                        <p class="text-warning mb-2">
                            <i class="fas fa-exclamation-triangle"></i> No employees available
                        </p>
                        <small class="text-muted">
                            All employees already have user accounts. Create new employees first to add more users.
                        </small>
                    @endif
                </div>
            </div>
        </div>
    </div>
</div>
@endsection



--- End of File ---

File: .\resources\views\admin\users\edit.blade.php
@extends('layouts.admin')

@section('title', 'Edit User')
@section('page-title', 'Edit User - ' . $user->username)

@section('content')
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.users.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-user-edit"></i> Edit User: {{ $user->username }}
        </h1>
        <a href="{{ route('admin.users.show', $user) }}" class="btn-admin-secondary ms-3 position-absolute end-0">
            <i class="fas fa-eye me-1"></i> View
        </a>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card kpi-card primary shadow">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-user-edit me-2"></i> Edit User Information</h5>
                </div>
                <div class="card-body admin-card-body">
                    <form action="{{ route('admin.users.update', $user) }}" method="POST">
                        @csrf
                        @method('PUT')
                        
                        <!-- Employee Selection -->
                        <div class="mb-3">
                            <label for="employee_id" class="form-label">
                                <i class="fas fa-id-badge text-sea-primary"></i> Employee <span class="text-danger">*</span>
                            </label>
                            <select name="employee_id" id="employee_id" class="form-select @error('employee_id') is-invalid @enderror" required>
                                <option value="">Select Employee</option>
                                @foreach($availableEmployees as $employee)
                                    <option value="{{ $employee->employee_id }}" 
                                            {{ old('employee_id', $user->employee_id) == $employee->employee_id ? 'selected' : '' }}>
                                        {{ $employee->full_name }} - {{ $employee->phone }}
                                        @if($employee->employee_id == $user->employee_id)
                                            (Current)
                                        @endif
                                    </option>
                                @endforeach
                            </select>
                            @error('employee_id')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>

                        <!-- Username -->
                        <div class="mb-3">
                            <label for="username" class="form-label">
                                <i class="fas fa-user text-sea-primary"></i> Username <span class="text-danger">*</span>
                            </label>
                            <input type="text" name="username" id="username" 
                                   class="form-control @error('username') is-invalid @enderror" 
                                   value="{{ old('username', $user->username) }}" required>
                            @error('username')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>

                        <!-- Email -->
                        <div class="mb-3">
                            <label for="email" class="form-label">
                                <i class="fas fa-envelope text-sea-primary"></i> Email <span class="text-danger">*</span>
                            </label>
                            <input type="email" name="email" id="email" 
                                   class="form-control @error('email') is-invalid @enderror" 
                                   value="{{ old('email', $user->email) }}" required>
                            @error('email')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>

                        <!-- Role -->
                        <div class="mb-3">
                            <label for="role" class="form-label">
                                <i class="fas fa-user-tag text-sea-primary"></i> Role <span class="text-danger">*</span>
                            </label>
                            <select name="role" id="role" class="form-select @error('role') is-invalid @enderror" required>
                                <option value="">Select Role</option>
                                <option value="admin" {{ old('role', $user->role) == 'admin' ? 'selected' : '' }}>
                                    Admin
                                </option>
                                <option value="manager" {{ old('role', $user->role) == 'manager' ? 'selected' : '' }}>
                                    Manager
                                </option>
                                <option value="baker" {{ old('role', $user->role) == 'baker' ? 'selected' : '' }}>
                                    Baker
                                </option>
                                <option value="cashier" {{ old('role', $user->role) == 'cashier' ? 'selected' : '' }}>
                                    Cashier
                                </option>
                            </select>
                            @error('role')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                        </div>

                        <!-- Password (Optional for edit) -->
                        <div class="alert-admin-info">
                            <i class="fas fa-info-circle me-2"></i> Leave password fields empty to keep current password
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">
                                <i class="fas fa-lock text-sea-primary"></i> New Password
                            </label>
                            <input type="password" name="password" id="password" 
                                   class="form-control @error('password') is-invalid @enderror">
                            @error('password')
                                <div class="invalid-feedback">{{ $message }}</div>
                            @enderror
                            <div class="form-text">Minimum 8 characters required (if changing)</div>
                        </div>

                        <!-- Confirm Password -->
                        <div class="mb-3">
                            <label for="password_confirmation" class="form-label">
                                <i class="fas fa-lock text-sea-primary"></i> Confirm New Password
                            </label>
                            <input type="password" name="password_confirmation" id="password_confirmation" 
                                   class="form-control">
                        </div>

                        <!-- Status -->
                        <div class="mb-3">
                            <label for="status" class="form-label">
                                <i class="fas fa-toggle-on text-success"></i> Status
                            </label>
                            <select name="status" id="status" class="form-control" required>
                                <option value="active" {{ old('status', $user->status) === 'active' ? 'selected' : '' }}>Active</option>
                                <option value="inactive" {{ old('status', $user->status) === 'inactive' ? 'selected' : '' }}>Inactive</option>
                            </select>
                        </div>

                        <!-- Submit Buttons -->
                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn-admin-light" onclick="window.location='{{ route('admin.users.index') }}'">
                                <i class="fas fa-times me-2"></i> Cancel
                            </button>
                            <button type="submit" class="btn-admin-secondary">
                                <i class="fas fa-save me-2"></i> Update User
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- User Information Side Panel -->
        <div class="col-md-4">
            <div class="card kpi-card primary shadow">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-user-circle me-2"></i> Current User Info</h5>
                </div>
                <div class="card-body admin-card-body">
                    <!-- Current Role -->
                    <div class="mb-3">
                        <h6 class="text-sea-dark mb-2">
                            <i class="fas fa-user-tag me-2"></i> Current Role
                        </h6>
                        <span class="badge-admin-role {{ $user->role }}">
                            @switch($user->role)
                                @case('admin')
                                    <i class="fas fa-crown me-1"></i> Admin
                                    @break
                                @case('manager')
                                    <i class="fas fa-user-tie me-1"></i> Manager
                                    @break
                                @case('baker')
                                    <i class="fas fa-bread-slice me-1"></i> Baker
                                    @break
                                @case('cashier')
                                    <i class="fas fa-cash-register me-1"></i> Cashier
                                    @break
                            @endswitch
                        </span>
                    </div>

                    <!-- Employee Details -->
                    <div class="mb-3">
                        <h6 class="text-sea-dark mb-2">
                            <i class="fas fa-id-badge me-2"></i> Employee Details
                        </h6>
                        @if($user->employee)
                            <p class="mb-0 text-muted">
                                <strong>{{ $user->employee->full_name }}</strong>
                                
                                @if($user->employee->status == 'active')
                                    <span class="text-info">{{ $user->employee->phone }}</span>  
                                @else
                                    <span class="badge-admin-role baker">
                                        <i class="fas fa-times-circle me-1"></i> {{ ucfirst($user->employee->status) }}
                                    </span>
                                @endif
                            </p>
                        @else
                            <p class="mb-0 text-warning">
                                <i class="fas fa-exclamation-triangle me-1"></i> No employee linked
                            </p>
                        @endif
                    </div>

                    <!-- Account Details -->
                    <div class="mb-0">
                        <h6 class="text-sea-dark mb-2">
                            <i class="fas fa-user-circle me-2"></i> Account Details
                        </h6>
                        <p class="mb-0 text-muted">
                            <strong>Created:</strong> {{ $user->created_at->format('M d, Y') }} 
                            <strong>Updated:</strong> {{ $user->updated_at->format('M d, Y') }} 
                            <br>
                            <br>
                            <span class="badge-admin-role {{ $user->status === 'active' ? 'admin' : 'baker' }}">
                                <i class="fas fa-{{ $user->status === 'active' ? 'check-circle' : 'times-circle' }} me-1"></i>
                                {{ $user->status === 'active' ? 'Active' : 'Inactive' }}
                            </span>
                        </p>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="card kpi-card info shadow mt-3">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-bolt me-2"></i> Quick Actions</h5>
                </div>
                <div class="card-body admin-card-body">
                    <div class="d-grid gap-2">
                        <form action="{{ route('admin.users.toggle-status', $user) }}" method="POST" class="d-inline">
                            @csrf
                            @method('PATCH')
                            <button type="submit" class="btn-admin-light w-100">
                                <i class="fas fa-{{ $user->status === 'active' ? 'pause' : 'play' }} me-2"></i> 
                                {{ $user->status === 'active' ? 'Deactivate' : 'Activate' }} User
                            </button>
                        </form>
                        
                        @if($user->user_id !== auth()->id())
                            <button type="button" class="btn btn-sm btn-danger w-100" data-bs-toggle="modal" data-bs-target="#deleteModal">
                                <i class="fas fa-trash me-2"></i> Delete User
                            </button>
                        @endif
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if($user->user_id !== auth()->id())
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete user <strong>{{ $user->username }}</strong>?</p>
                <p class="text-danger"><i class="fas fa-exclamation-triangle me-2"></i> This action cannot be undone!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-admin-light" data-bs-dismiss="modal">Cancel</button>
                <form action="{{ route('admin.users.destroy', $user) }}" method="POST" class="d-inline">
                    @csrf
                    @method('DELETE')
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-2"></i> Delete User
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>
@endif
@endsection



--- End of File ---

File: .\resources\views\admin\users\index.blade.php
@extends('layouts.admin')

@section('title', 'User Management')
@section('page-title', 'User Management')

@section('content')
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-muted-sea">
            <i class="fas fa-users"></i> User Management
        </h1>
        <a href="{{ route('admin.users.create') }}" class="btn-admin-secondary">
            <i class="fas fa-plus me-2"></i> Add New User
        </a>
    </div>

    <!-- Filters -->
    <div class="card admin-filter-card shadow mb-4">
        <div class="card-body admin-card-body">
            <form method="GET" action="{{ route('admin.users.index') }}" class="row g-3">
                <div class="col-md-3">
                    <label for="role" class="form-label">Role</label>
                    <select name="role" id="role" class="form-select">
                        <option value="">All Roles</option>
                        <option value="admin" {{ request('role') == 'admin' ? 'selected' : '' }}>Admin</option>
                        <option value="manager" {{ request('role') == 'manager' ? 'selected' : '' }}>Manager</option>
                        <option value="baker" {{ request('role') == 'baker' ? 'selected' : '' }}>Baker</option>
                        <option value="cashier" {{ request('role') == 'cashier' ? 'selected' : '' }}>Cashier</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label for="status" class="form-label">Status</label>
                    <select name="status" id="status" class="form-select">
                        <option value="">All Status</option>
                        <option value="active" {{ request('status') == 'active' ? 'selected' : '' }}>Active</option>
                        <option value="inactive" {{ request('status') == 'inactive' ? 'selected' : '' }}>Inactive</option>
                        <option value="pending" {{ request('status') == 'pending' ? 'selected' : '' }}>Pending Approval</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="search" class="form-label">Search</label>
                    <input type="text" name="search" id="search" class="form-control" 
                           placeholder="Username or email..." value="{{ request('search') }}">
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button type="submit" class="btn-admin-secondary me-2">
                        <i class="fas fa-search me-1"></i> Filter
                    </button>
                    <button type="reset" class="btn-admin-light me-2" onclick="window.location='{{ route('admin.users.index') }}'">
                        <i class="fas fa-times me-1"></i> Clear
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Users Table -->
    <div class="card kpi-card shadow">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-sea-primary">
                Users List ({{ $users->total() }} total)
            </h6>
        </div>
        <div class="card-body admin-card-body">
            @if($users->count() > 0)
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th width="30">
                                    <input type="checkbox" id="selectAll">
                                </th>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Employee</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($users as $user)
                                <tr>
                                    <td>
                                        <input type="checkbox" class="user-checkbox" value="{{ $user->user_id }}">
                                    </td>
                                    <td>
                                        <strong>{{ $user->username }}</strong>
                                    </td>
                                    <td>{{ $user->email }}</td>
                                    <td>
                                        <span class="badge-admin-role {{ $user->role }}">
                                            {{ ucfirst($user->role) }}
                                        </span>
                                    </td>
                                    <td>
                                        @if($user->employee)
                                            {{ $user->employee->full_name }}
                                            <small class="text-muted d-block">ID: {{ $user->employee->employee_id }}</small>
                                        @else
                                            <span class="text-muted">No employee linked</span>
                                        @endif
                                    </td>
                                    <td>
                                        @if($user->status === 'active')
                                            <span class="badge-admin-role" style="background: linear-gradient(135deg, #4CAF50 0%, #8BC34A 100%) !important; color: #fff !important;">
                                                <i class="fas fa-check-circle me-1" aria-label="Active"></i> Active
                                            </span>
                                        @elseif($user->status === 'pending')
                                            <span class="badge-admin-role manager" style="background: linear-gradient(135deg, #FFEAA5 0%, #FFD700 100%) !important; color: #333 !important;">
                                                <i class="fas fa-user-clock me-1" aria-label="Pending"></i> Pending
                                            </span>
                                        @else
                                            <span class="badge-admin-role baker"><i class="fas fa-times-circle me-1" aria-label="Inactive"></i> Inactive</span>
                                        @endif
                                    </td>
                                    <td>
                                        <small>{{ $user->created_at->format('M d, Y') }}</small>
                                    </td>
                                    <td>
                                        <div class="d-flex gap-2 align-items-center">
                                            <button type="button" class="btn-admin-light btn-sm border border-1 d-flex align-items-center gap-1" 
                                                    onclick="window.location='{{ route('admin.users.show', $user->user_id) }}'" 
                                                    title="View">
                                                <i class="fas fa-eye" aria-label="View"></i>
                                                <span class="small text-muted">View</span>
                                            </button>
                                            <button type="button" class="btn-admin-secondary btn-sm border border-1 d-flex align-items-center gap-1" 
                                                    onclick="window.location='{{ route('admin.users.edit', $user->user_id) }}'" 
                                                    title="Edit">
                                                <i class="fas fa-edit" aria-label="Edit"></i>
                                                <span class="small text-muted">Edit</span>
                                            </button>
                                            @if($user->status === 'pending')
                                                <form action="{{ route('admin.users.approve', $user) }}" method="POST" class="d-inline">
                                                    @csrf
                                                    @method('PATCH')
                                                    <button type="submit" class="btn-admin-primary btn-sm"><i class="fas fa-check me-1"></i> Approve</button>
                                                </form>
                                                <form action="{{ route('admin.users.reject', $user) }}" method="POST" class="d-inline ms-2">
                                                    @csrf
                                                    @method('PATCH')
                                                    <button type="submit" class="btn-admin-light btn-sm"><i class="fas fa-times me-1"></i> Reject</button>
                                                </form>
                                            @else
                                                <button type="button" class="btn-admin-info btn-sm border border-1 d-flex align-items-center gap-1" 
                                                        onclick="toggleStatus({{ $user->user_id }})" title="Toggle Status">
                                                    <i class="fas fa-{{ $user->status === 'active' ? 'ban' : 'check' }}" aria-label="{{ $user->status === 'active' ? 'Deactivate' : 'Activate' }}"></i>
                                                    <span class="small text-muted">{{ $user->status === 'active' ? 'Deactivate' : 'Activate' }}</span>
                                                </button>
                                                @if($user->role !== 'admin' || \App\Models\User::where('role', 'admin')->where('status', 'active')->count() > 1)
                                                    <button type="button" class="btn-admin-delete btn-sm border border-1 d-flex align-items-center gap-1" 
                                                            onclick="deleteUser({{ $user->user_id }})" title="Delete">
                                                        <i class="fas fa-trash" aria-label="Delete"></i>
                                                        <span class="small text-white">Delete</span>
                                                    </button>
                                                @endif
                                            @endif
                                        </div>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>
                        Showing {{ $users->firstItem() }} to {{ $users->lastItem() }} of {{ $users->total() }} results
                    </div>
                    {{ $users->links() }}
                </div>
            @else
                <div class="text-center py-4">
                    <i class="fas fa-users fa-3x text-gray-300 mb-3"></i>
                    <h5>No users found</h5>
                    <p class="text-muted">Try adjusting your search criteria or create a new user.</p>
                    <a href="{{ route('admin.users.create') }}" class="btn-admin-primary">
                        <i class="fas fa-plus me-2"></i> Create First User
                    </a>
                </div>
            @endif
        </div>
    </div>
</div>

<!-- Modals -->
<div class="modal fade" id="confirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="confirmMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-admin-light" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmAction">Confirm</button>
            </div>
        </div>
    </div>
</div>

<script>
// Select all functionality
document.getElementById('selectAll').addEventListener('change', function() {
    const checkboxes = document.querySelectorAll('.user-checkbox');
    checkboxes.forEach(checkbox => checkbox.checked = this.checked);
});

// Toggle user status
function toggleStatus(userId) {
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = `/admin/users/${userId}/toggle-status`;
    
    const csrfToken = document.createElement('input');
    csrfToken.type = 'hidden';
    csrfToken.name = '_token';
    csrfToken.value = '{{ csrf_token() }}';
    
    const methodField = document.createElement('input');
    methodField.type = 'hidden';
    methodField.name = '_method';
    methodField.value = 'PATCH';
    
    form.appendChild(csrfToken);
    form.appendChild(methodField);
    document.body.appendChild(form);
    form.submit();
}

// Delete user
function deleteUser(userId) {
    document.getElementById('confirmMessage').textContent = 'Are you sure you want to delete this user? This action cannot be undone.';
    
    document.getElementById('confirmAction').onclick = function() {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = `/admin/users/${userId}`;
        
        const csrfToken = document.createElement('input');
        csrfToken.type = 'hidden';
        csrfToken.name = '_token';
        csrfToken.value = '{{ csrf_token() }}';
        
        const methodField = document.createElement('input');
        methodField.type = 'hidden';
        methodField.name = '_method';
        methodField.value = 'DELETE';
        
        form.appendChild(csrfToken);
        form.appendChild(methodField);
        document.body.appendChild(form);
        form.submit();
    };
    
    new bootstrap.Modal(document.getElementById('confirmModal')).show();
}

// Bulk operations
function bulkActivate() {
    const selected = Array.from(document.querySelectorAll('.user-checkbox:checked')).map(cb => cb.value);
    if (selected.length === 0) {
        alert('Please select users to activate.');
        return;
    }
    
    document.getElementById('confirmMessage').textContent = `Activate ${selected.length} selected user(s)?`;
    
    document.getElementById('confirmAction').onclick = function() {
        // Implement bulk activate logic
        console.log('Bulk activate:', selected);
    };
    
    new bootstrap.Modal(document.getElementById('confirmModal')).show();
}

function bulkDeactivate() {
    const selected = Array.from(document.querySelectorAll('.user-checkbox:checked')).map(cb => cb.value);
    if (selected.length === 0) {
        alert('Please select users to deactivate.');
        return;
    }
    
    document.getElementById('confirmMessage').textContent = `Deactivate ${selected.length} selected user(s)?`;
    
    document.getElementById('confirmAction').onclick = function() {
        // Implement bulk deactivate logic
        console.log('Bulk deactivate:', selected);
    };
    
    new bootstrap.Modal(document.getElementById('confirmModal')).show();
}
</script>
@endsection

--- End of File ---

File: .\resources\views\admin\users\pending.blade.php
@extends('layouts.admin')
@section('title', 'Pending User Approvals')
@section('page-title', 'Pending User Approvals')

@section('content')
<div class="container-fluid">
    <div class="d-flex align-items-center mb-4">
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-user-clock"></i> Pending User Approvals
        </h1>
    </div>
    <div class="card kpi-card shadow">
        <div class="card-body admin-card-body">
            @if($pendingUsers->count())
                <div class="table-responsive">
                    <table class="table table-bordered align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Requested</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($pendingUsers as $user)
                                <tr>
                                    <td>{{ $user->username }}</td>
                                    <td>{{ $user->email }}</td>
                                    <td><span class="badge-admin-role {{ $user->role }}">{{ ucfirst($user->role) }}</span></td>
                                    <td>{{ $user->created_at->format('M d, Y H:i') }}</td>
                                    <td>
                                        <form action="{{ route('admin.users.approve', $user) }}" method="POST" class="d-inline">
                                            @csrf
                                            <button type="submit" class="btn-admin-primary btn-sm"><i class="fas fa-check me-1"></i> Approve</button>
                                        </form>
                                        <form action="{{ route('admin.users.reject', $user) }}" method="POST" class="d-inline ms-2">
                                            @csrf
                                            <button type="submit" class="btn-admin-light btn-sm"><i class="fas fa-times me-1"></i> Reject</button>
                                        </form>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            @else
                <div class="text-center py-4">
                    <i class="fas fa-user-clock fa-3x text-gray-300 mb-3"></i>
                    <h5>No pending user requests</h5>
                </div>
            @endif
        </div>
    </div>
</div>
@endsection


--- End of File ---

File: .\resources\views\admin\users\show.blade.php
@extends('layouts.admin')

@section('title', 'User Details')
@section('page-title', 'User Details - ' . $user->username)

@section('content')
<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex align-items-center mb-4" style="position:relative;">
        <a href="{{ route('admin.users.index') }}" class="btn-admin-light me-3 position-absolute start-0">
            <i class="fas fa-arrow-left me-1"></i> Back
        </a>
        <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
            <i class="fas fa-user-circle"></i> User Details: {{ $user->username }}
        </h1>
        <a href="{{ route('admin.users.edit', $user) }}" class="btn-admin-secondary ms-3 position-absolute end-0">
            <i class="fas fa-edit me-1"></i> Edit
        </a>
    </div>

    <div class="row">
        <!-- Main User Information -->
        <div class="col-md-8">
            <!-- Account Information -->
            <div class="card kpi-card primary shadow mb-4">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-user me-2"></i> Account Information</h5>
                </div>
                <div class="card-body admin-card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="text-sea-dark mb-3">Basic Details</h6>
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>Username:</strong></td>
                                    <td>{{ $user->username }}</td>
                                </tr>
                                <tr>
                                    <td><strong>Email:</strong></td>
                                    <td>{{ $user->email }}</td>
                                </tr>
                                <tr>
                                    <td><strong>Role:</strong></td>
                                    <td>
                                        <span class="badge-admin-role {{ $user->role }}">
                                            @switch($user->role)
                                                @case('admin')
                                                    <i class="fas fa-crown me-1"></i> Admin
                                                    @break
                                                @case('manager')
                                                    <i class="fas fa-user-tie me-1"></i> Manager
                                                    @break
                                                @case('baker')
                                                    <i class="fas fa-bread-slice me-1"></i> Baker
                                                    @break
                                                @case('cashier')
                                                    <i class="fas fa-cash-register me-1"></i> Cashier
                                                    @break
                                            @endswitch
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Status:</strong></td>
                                    <td>
                                        @if($user->status === 'active')
                                            <span class="badge-admin-role admin">
                                                <i class="fas fa-check-circle me-1"></i> Active
                                            </span>
                                        @else
                                            <span class="badge-admin-role baker">
                                                <i class="fas fa-times-circle me-1"></i> Inactive
                                            </span>
                                        @endif
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-sea-dark mb-3">Account Dates</h6>
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>Created:</strong></td>
                                    <td>{{ $user->created_at->format('F d, Y \a\t g:i A') }}</td>
                                </tr>
                                <tr>
                                    <td><strong>Last Updated:</strong></td>
                                    <td>{{ $user->updated_at->format('F d, Y \a\t g:i A') }}</td>
                                </tr>
                                <tr>
                                    <td><strong>Days Active:</strong></td>
                                    <td>{{ $user->created_at->diffInDays(now()) }} days</td>
                                </tr>
                                <tr>
                                    <td><strong>User ID:</strong></td>
                                    <td><code>#{{ $user->user_id }}</code></td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Employee Information -->
            @if($user->employee)
            <div class="card kpi-card primary shadow mb-4">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-id-badge me-2"></i> Employee Information</h5>
                </div>
                <div class="card-body admin-card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="text-sea-dark mb-3">Personal Details</h6>
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>Full Name:</strong></td>
                                    <td>{{ $user->employee->full_name }}</td>
                                </tr>
                                <tr>
                                    <td><strong>Phone:</strong></td>
                                    <td>{{ $user->employee->phone }}</td>
                                </tr>
                                <tr>
                                    <td><strong>Address:</strong></td>
                                    <td>{{ $user->employee->address ?: 'Not provided' }}</td>
                                </tr>
                                <tr>
                                    <td><strong>Employee Status:</strong></td>
                                    <td>
                                        @if($user->employee->status == 'active')
                                            <span class="badge-admin-role admin">
                                                <i class="fas fa-check-circle me-1"></i> Active
                                            </span>
                                        @else
                                            <span class="badge-admin-role baker">
                                                <i class="fas fa-times-circle me-1"></i> {{ ucfirst($user->employee->status) }}
                                            </span>
                                        @endif
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-sea-dark mb-3">Work Schedule</h6>
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>Shift Start:</strong></td>
                                    <td>{{ $user->employee->shift_start ? $user->employee->shift_start->format('g:i A') : 'Not set' }}</td>
                                </tr>
                                <tr>
                                    <td><strong>Shift End:</strong></td>
                                    <td>{{ $user->employee->shift_end ? $user->employee->shift_end->format('g:i A') : 'Not set' }}</td>
                                </tr>
                                <tr>
                                    <td><strong>Employee ID:</strong></td>
                                    <td><code>#{{ $user->employee->employee_id }}</code></td>
                                </tr>
                                <tr>
                                    <td><strong>Hired:</strong></td>
                                    <td>{{ $user->employee->created_at->format('F d, Y') }}</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            @else
            <div class="card kpi-card warning shadow mb-4">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-exclamation-triangle me-2"></i> Employee Information</h5>
                </div>
                <div class="card-body admin-card-body">
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i> No employee record linked to this user account.
                    </div>
                </div>
            </div>
            @endif

            <!-- Role Permissions -->
            <div class="card kpi-card primary shadow">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-key me-2"></i> Role Permissions & Capabilities</h5>
                </div>
                <div class="card-body admin-card-body">
                    @switch($user->role)
                        @case('admin')
                            <div class="alert-admin-danger">
                                <h6><i class="fas fa-crown me-2"></i> Administrator Privileges</h6>
                                <ul class="mb-0">
                                    <li>Full system access and control</li>
                                    <li>Manage all users and roles</li>
                                    <li>Access all reports and analytics</li>
                                    <li>System configuration and settings</li>
                                    <li>Database management and backups</li>
                                </ul>
                            </div>
                            @break
                        @case('manager')
                            <div class="alert-admin-warning">
                                <h6><i class="fas fa-user-tie me-2"></i> Manager Capabilities</h6>
                                <ul class="mb-0">
                                    <li>Manage daily operations and staff</li>
                                    <li>Access sales and inventory reports</li>
                                    <li>Approve orders and deliveries</li>
                                    <li>Schedule employees and shifts</li>
                                    <li>Handle customer complaints and refunds</li>
                                </ul>
                            </div>
                            @break
                        @case('baker')
                            <div class="alert-admin-success">
                                <h6><i class="fas fa-bread-slice me-2"></i> Baker Responsibilities</h6>
                                <ul class="mb-0">
                                    <li>Manage production schedules and recipes</li>
                                    <li>Track ingredient usage and inventory</li>
                                    <li>Quality control and product standards</li>
                                    <li>Update production status and completion</li>
                                    <li>Coordinate with supply chain for ingredients</li>
                                </ul>
                            </div>
                            @break
                        @case('cashier')
                            <div class="alert-admin-info">
                                <h6><i class="fas fa-cash-register me-2"></i> Cashier Duties</h6>
                                <ul class="mb-0">
                                    <li>Process customer sales and payments</li>
                                    <li>Handle cash register and daily tallies</li>
                                    <li>Manage customer orders and pickups</li>
                                    <li>Basic inventory level monitoring</li>
                                    <li>Customer service and support</li>
                                </ul>
                            </div>
                            @break
                    @endswitch
                </div>
            </div>
        </div>

        <!-- Side Panel -->
        <div class="col-md-4">
            <!-- Quick Actions -->
            <div class="card kpi-card primary shadow mb-4">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-bolt me-2"></i> Quick Actions</h5>
                </div>
                <div class="card-body admin-card-body">
                    <div class="d-grid gap-2">
                        <form action="{{ route('admin.users.edit', $user) }}" method="GET" class="d-inline">
                            <button type="submit" class="bg-transparent w-100 border-0 shadow-none px-0 text-start" style="color: #FFC107; font-weight: 600;">
                                <i class="fas fa-edit me-2" aria-label="Edit"></i> Edit User
                            </button>
                        </form>
                        
                        <form action="{{ route('admin.users.toggle-status', $user) }}" method="POST" class="d-inline">
                            @csrf
                            @method('PATCH')
                            <button type="submit" class="bg-transparent w-100 border-0 shadow-none px-0 text-start" style="color: #17a2b8; font-weight: 600;">
                                <i class="fas fa-{{ $user->status === 'active' ? 'pause' : 'play' }} me-2" aria-label="{{ $user->status === 'active' ? 'Deactivate' : 'Activate' }}"></i>
                                {{ $user->status === 'active' ? 'Deactivate' : 'Activate' }} User
                            </button>
                        </form>
                        
                        <form action="{{ route('admin.users.reset-password', $user) }}" method="POST" class="d-inline">
                            @csrf
                            <button type="submit" class="bg-transparent w-100 border-0 shadow-none px-0 text-start" style="color: #5a5c69; font-weight: 600;">
                                <i class="fas fa-key me-2" aria-label="Reset Password"></i> Reset Password
                            </button>
                        </form>
                        
                        @if($user->user_id !== auth()->id())
                            <hr>
                            <button type="button" class="bg-transparent w-100 border-0 shadow-none px-0 text-start text-danger fw-bold" data-bs-toggle="modal" data-bs-target="#deleteModal">
                                <i class="fas fa-trash me-2" aria-label="Delete"></i> Delete User
                            </button>
                        @else
                            <div class="alert-admin-info p-2 mt-2">
                                <small><i class="fas fa-info-circle me-1"></i> You cannot delete your own account</small>
                            </div>
                        @endif
                    </div>
                </div>
            </div>

            <!-- Statistics -->
            <div class="card kpi-card primary shadow">
                <div class="card-header">
                    <h5 class="mb-0 text-sea-primary"><i class="fas fa-chart-bar me-2"></i> Account Statistics</h5>
                </div>
                <div class="card-body admin-card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <div class="border-end">
                                <h3 class="text-sea-dark">{{ $user->created_at->diffInDays(now()) }}</h3>
                                <small class="text-muted">Days Active</small>
                            </div>
                        </div>
                        <div class="col-6">
                            <h3 class="text-sea-dark">
                                {{ $user->status === 'active' ? 'ACTIVE' : 'INACTIVE' }}
                            </h3>
                            <small class="text-muted">Current Status</small>
                        </div>
                    </div>
                    
                    <hr>
                    
                    <div class="text-center">
                        <h6 class="text-muted mb-2">Account Created</h6>
                        <p class="mb-0">{{ $user->created_at->format('F d, Y') }}</p>
                        <small class="text-muted">{{ $user->created_at->diffForHumans() }}</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if($user->user_id !== auth()->id())
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirm User Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="text-center mb-3">
                    <i class="fas fa-exclamation-triangle text-danger" style="font-size: 3rem;"></i>
                </div>
                <h5 class="text-center mb-3">Delete User: {{ $user->username }}?</h5>
                <p class="text-center">This will permanently delete:</p>
                <ul class="list-unstyled text-center">
                    <li><i class="fas fa-user text-danger"></i> User account and login credentials</li>
                    <li><i class="fas fa-key text-danger"></i> All associated permissions</li>
                    <li><i class="fas fa-history text-danger"></i> User activity history</li>
                </ul>
                <div class="alert-admin-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i> <strong>This action cannot be undone!</strong>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-admin-light" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i> Cancel
                </button>
                <form action="{{ route('admin.users.destroy', $user) }}" method="POST" class="d-inline">
                    @csrf
                    @method('DELETE')
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-2"></i> Delete User
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>
@endif
@endsection

--- End of File ---

File: .\resources\views\auth\login.blade.php
@extends('layouts.auth')

@section('title', 'Login')
@section('auth-title', 'Arbee\'s Bakeshop')

@section('content')
    <form method="POST" action="{{ route('login') }}">
        @csrf
        
        @if ($errors->any())
            <div class="auth-error">
                @foreach ($errors->all() as $error)
                    {{ $error }}
                @endforeach
            </div>
        @endif

        <div class="auth-form-group">
            <div class="auth-input-container">
                <i class="fas fa-user-circle auth-input-icon"></i>
                <input type="text" 
                       name="username" 
                       placeholder="Username" 
                       value="{{ old('username') }}" 
                       required 
                       autofocus>
            </div>
        </div>

        <div class="auth-form-group">
            <div class="auth-input-container">
                <i class="fas fa-lock auth-input-icon"></i>
                <input type="password" 
                       name="password" 
                       placeholder="Password" 
                       required>
            </div>
        </div>

        <!-- Remember Me Checkbox -->
        <div class="auth-form-group">
            <div class="auth-checkbox-container">
                <input type="checkbox" id="remember_me" name="remember" {{ old('remember') ? 'checked' : '' }}>
                <label for="remember_me">Remember me</label>
            </div>
        </div>

        <div class="auth-forgot-password">
            <a href="#" onclick="alert('Forgot password feature coming soon!')">Forgot password?</a>
        </div>

        <button type="submit" class="auth-btn">Login</button>
    </form>

    <div class="auth-switch-link">
        <p>Not registered yet? <a href="{{ route('register') }}">Sign up</a></p>
    </div>
@endsection


--- End of File ---

File: .\resources\views\auth\register.blade.php
@extends('layouts.auth')

@section('title', 'Register')
@section('auth-title', 'Sign Up')

@section('content')
    <form method="POST" action="{{ route('register') }}">
        @csrf
        
        @if ($errors->any())
            <div class="auth-error">
                @foreach ($errors->all() as $error)
                    {{ $error }}
                @endforeach
            </div>
        @endif

        <!-- Account Information Only -->
        <div class="auth-form-single">
            <h3 class="form-title">Create Account</h3>
                
                <div class="auth-form-group">
                    <div class="auth-input-container">
                        <i class="fas fa-user-circle auth-input-icon"></i>
                        <input type="text" 
                               name="username" 
                               placeholder="Username" 
                               value="{{ old('username') }}" 
                               required>
                    </div>
                </div>

                <div class="auth-form-group">
                    <div class="auth-input-container">
                        <i class="fas fa-envelope auth-input-icon"></i>
                        <input type="email" 
                               name="email" 
                               placeholder="Email Address" 
                               value="{{ old('email') }}" 
                               required>
                    </div>
                </div>

                <div class="auth-form-group">
                    <div class="auth-input-container">
                        <i class="fas fa-lock auth-input-icon"></i>
                        <input type="password" 
                               name="password" 
                               placeholder="Password" 
                               required>
                    </div>
                </div>

                <div class="auth-form-group">
                    <div class="auth-input-container">
                        <i class="fas fa-lock auth-input-icon"></i>
                        <input type="password" 
                               name="password_confirmation" 
                               placeholder="Confirm Password" 
                               required>
                    </div>
                </div>

                <div class="auth-form-group">
                    <div class="auth-input-container">
                        <i class="fas fa-user-tag auth-input-icon"></i>
                        <select name="role" required>
                            <option value="" disabled selected>Select Role</option>
                            <option value="baker" {{ old('role') == 'baker' ? 'selected' : '' }}>Baker</option>
                            <option value="cashier" {{ old('role') == 'cashier' ? 'selected' : '' }}>Cashier</option>
                        </select>
                    </div>
                </div>

                <!-- Terms and Privacy Agreement -->
                <div class="auth-form-group">
                    <div class="auth-checkbox-container">
                        <input type="checkbox" id="terms_agree" name="terms_agree" required>
                        <label for="terms_agree">
                            I agree to the <a href="#" class="terms-link">Terms of Service</a> and <a href="#" class="terms-link">Privacy Policy</a>
                        </label>
                    </div>
                </div>
        </div>

        <button type="submit" class="auth-btn">Sign Up</button>
    </form>

    <div class="auth-switch-link">
        <p>Have an account already? <a href="{{ route('login') }}">Login</a></p>
    </div>
@endsection


--- End of File ---

File: .\resources\views\baker\dashboard\baker.blade.php
@extends('layouts.baker')

@section('title', 'Dashboard')
@section('page-title', 'Baker Dashboard')

@section('content')
    <div class="dashboard-cards">
        <div class="card">
            <h3>Today's Production</h3>
            <p>View and manage today's baking schedule</p>
            <a href="/dashboard/baker/production">View Production</a>
        </div>
        <div class="card">
            <h3>Recipe Book</h3>
            <p>Access all recipes and baking instructions</p>
            <a href="/dashboard/baker/recipes">View Recipes</a>
        </div>
        <div class="card">
            <h3>Ingredient Inventory</h3>
            <p>Check available ingredients and supplies</p>
            <a href="/dashboard/baker/inventory">View Inventory</a>
        </div>
        <div class="card">
            <h3>Quality Control</h3>
            <p>Record quality checks and batch information</p>
            <a href="/dashboard/baker/quality">Quality Control</a>
        </div>
    </div>
    
    <div class="card">
        <h3>Baker's Notes</h3>
        <p>Welcome to the Baker Dashboard! Here you can manage your daily production, access recipes, and monitor ingredient levels.</p>
    </div>
@endsection

--- End of File ---

File: .\resources\views\baker\dashboard\index.blade.php
@extends('layouts.baker')

@section('title', 'Baker Dashboard')

@section('content')
@if(Auth::check() && Auth::user()->employee && Auth::user()->employee->status === 'inactive')
<!-- Profile Completion Section -->
<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header card-header-sea-secondary">
                <h4 class="mb-0">
                    <i class="fas fa-user-edit me-2"></i> Complete Your Baker Profile
                </h4>
            </div>
            <div class="card-body admin-card-body">
                <p class="text-muted mb-4">Please complete your profile information to access all baker features and start managing production.</p>
                
                <form method="POST" action="{{ route('baker.profile.complete') }}">
                    @csrf
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="first_name" class="form-label">First Name *</label>
                                <input type="text" 
                                       class="form-control" 
                                       id="first_name"
                                       name="first_name" 
                                       value="{{ old('first_name', Auth::user()->employee->first_name ?? '') }}" 
                                       required>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="middle_name" class="form-label">Middle Name</label>
                                <input type="text" 
                                       class="form-control"
                                       id="middle_name"
                                       name="middle_name" 
                                       value="{{ old('middle_name', Auth::user()->employee->middle_name ?? '') }}">
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="last_name" class="form-label">Last Name *</label>
                                <input type="text" 
                                       class="form-control"
                                       id="last_name"
                                       name="last_name" 
                                       value="{{ old('last_name', Auth::user()->employee->last_name ?? '') }}" 
                                       required>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="phone" class="form-label">Phone Number</label>
                                <input type="text" 
                                       class="form-control"
                                       id="phone"
                                       name="phone" 
                                       value="{{ old('phone', Auth::user()->employee->phone ?? '') }}">
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="address" class="form-label">Address</label>
                        <textarea class="form-control" 
                                  id="address" 
                                  name="address" 
                                  rows="3">{{ old('address', Auth::user()->employee->address ?? '') }}</textarea>
                    </div>

                    <div class="text-end">
                        <button type="submit" class="btn-admin-secondary">
                            <i class="fas fa-check me-2"></i> Complete Profile
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@else
<!-- Baker Dashboard Content -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div class="flex-grow-1" style="flex-basis:80%;">
        <h1 class="h3 mb-0 text-muted-sea">
            <i class="fas fa-bread-slice me-2"></i> Baker Dashboard
        </h1>
    </div>
    <div class="text-end" style="flex-basis:20%;">
        <button type="button" class="btn-admin-secondary" onclick="window.location='{{ route('baker.production.create') }}'">
            <i class="fas fa-plus me-2"></i> New Production
        </button>
    </div>
</div>

<!-- KPI Cards -->
<div class="row mb-4">
    <div class="col-md-3">
    <a href="{{ route('baker.production.index', ['date_from'=>$today,'date_to'=>$today]) }}" class="text-decoration-none">
    <div class="kpi-card" style="cursor:pointer;">
            <div class="d-flex align-items-center justify-content-between">
                <div class="kpi-value text-start" style="font-size:1.5rem; font-weight:600; min-width:90px;">{{ $todaysProduction ?? 0 }}</div>
                <div class="flex-grow-1 text-end">
                    <div class="kpi-label">Today's Production</div>
                </div>
                <div class="kpi-icon ms-2"><i class="fas fa-calendar-day"></i></div>
            </div>
        </div>
        </a>
    </div>
    
    <div class="col-md-3">
    <a href="{{ route('baker.production.index', ['date_from'=>$weekStart,'date_to'=>$weekEnd]) }}" class="text-decoration-none">
    <div class="kpi-card" style="cursor:pointer;">
            <div class="d-flex align-items-center justify-content-between">
                <div class="kpi-value text-start" style="font-size:1.5rem; font-weight:600; min-width:90px;">{{ $weeklyProduction ?? 0 }}</div>
                <div class="flex-grow-1 text-end">
                    <div class="kpi-label">This Week</div>
                </div>
                <div class="kpi-icon ms-2"><i class="fas fa-calendar-week"></i></div>
            </div>
        </div>
        </a>
    </div>
    
    <div class="col-md-3">
    <a href="{{ route('baker.production.index', ['date_from'=>$monthStart,'date_to'=>$monthEnd]) }}" class="text-decoration-none">
    <div class="kpi-card" style="cursor:pointer;">
            <div class="d-flex align-items-center justify-content-between">
                <div class="kpi-value text-start" style="font-size:1.5rem; font-weight:600; min-width:90px;">{{ $monthlyProduction ?? 0 }}</div>
                <div class="flex-grow-1 text-end">
                    <div class="kpi-label">This Month</div>
                </div>
                <div class="kpi-icon ms-2"><i class="fas fa-calendar-alt"></i></div>
            </div>
        </div>
        </a>
    </div>
    
    <div class="col-md-3">
    <a href="{{ route('baker.inventory.index') }}" class="text-decoration-none">
    <div class="kpi-card" style="cursor:pointer;" onclick="window.location='{{ route('baker.inventory.index', ['stock_level'=>'low']) }}'">
            <div class="d-flex align-items-center justify-content-between">
                <div class="kpi-value text-start" style="font-size:1.5rem; font-weight:600; min-width:90px;">{{ $lowStockProducts->count() ?? 0 }}</div>
                <div class="flex-grow-1 text-end">
                    <div class="kpi-label">Low Stock Alerts</div>
                </div>
                <div class="kpi-icon ms-2"><i class="fas fa-exclamation-triangle"></i></div>
            </div>
        </div>
        </a>
    </div>
</div>

<div class="row">
    <!-- Recent Production Batches -->
    <div class="col-md-8">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-industry me-2"></i> Recent Production Batches
                </h5>
                <a href="{{ route('baker.production.index') }}" class="btn-admin-secondary btn-sm">
                    <i class="fas fa-eye me-1"></i> View All
                </a>
            </div>
            <div class="card-body admin-card-body">
                @if(isset($recentBatches) && $recentBatches->count() > 0)
                    <div class="table-responsive">
                        <table class="table table-borderless">
                            <thead>
                                <tr>
                                    <th>Batch #</th>
                                    <th>Product</th>
                                    <th>Quantity</th>
                                    <th>Date</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach($recentBatches as $batch)
                                <tr>
                                    <td><strong>{{ $batch->batch_number }}</strong></td>
                                    <td>{{ $batch->product->name ?? 'N/A' }}</td>
                                    <td>{{ number_format($batch->quantity_produced) }} pcs</td>
                                    <td>
                                        @php $dateVal = $batch->production_date; @endphp
                                        @if(is_string($dateVal) && strtotime($dateVal))
                                            {{ date('M d, Y', strtotime($dateVal)) }}
                                        @else
                                            {{ $dateVal }}
                                        @endif
                                    </td>
                                    <td>
                                        @if($batch->status === 'pending')
                                            <span class="badge-admin-role admin">
                                                <i class="fas fa-clock me-1"></i> Pending
                                            </span>
                                        @elseif($batch->status === 'in_progress')
                                            <span class="badge-admin-role manager">
                                                <i class="fas fa-spinner me-1"></i> In Progress
                                            </span>
                                        @elseif($batch->status === 'completed')
                                            <span class="badge-admin-role">
                                                <i class="fas fa-check-circle me-1"></i> Completed
                                            </span>
                                        @elseif($batch->status === 'cancelled')
                                            <span class="badge bg-danger text-white">
                                                <i class="fas fa-times-circle me-1"></i> Cancelled
                                            </span>
                                        @else
                                            <span class="badge-admin-role baker">
                                                {{ ucfirst(str_replace('_', ' ', $batch->status)) }}
                                            </span>
                                        @endif
                                    </td>
                                </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                @else
                    <div class="text-center py-4">
                        <i class="fas fa-industry fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No production batches yet. <a href="{{ route('baker.production.create') }}" class="text-decoration-none">Create your first batch</a>!</p>
                    </div>
                @endif
            </div>
        </div>
    </div>

    <!-- Low Stock Alerts -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-exclamation-triangle me-2"></i> Low Stock Alerts
                </h5>
                <a href="{{ route('baker.inventory.index') }}" class="btn-admin-secondary btn-sm">
                    <i class="fas fa-boxes me-1"></i> View Inventory
                </a>
            </div>
            <div class="card-body admin-card-body">
                @if(isset($lowStockProducts) && $lowStockProducts->count() > 0)
                    @foreach($lowStockProducts as $product)
                    <div class="d-flex justify-content-between align-items-center mb-3 p-2 border-start border-warning border-3">
                        <div>
                            <strong>{{ $product->name }}</strong><br>
                            <small class="text-muted">Stock: {{ $product->inventoryStock->quantity ?? 0 }} units</small>
                        </div>
                        <div>
                            <span class="badge badge-admin-role manager">Low Stock</span>
                        </div>
                    </div>
                    @endforeach
                @else
                    <div class="text-center py-3">
                        <i class="fas fa-check-circle fa-2x text-success mb-2"></i>
                        <p class="text-muted mb-0">All products have adequate stock levels.</p>
                    </div>
                @endif
            </div>
        </div>
    </div>
</div>
@endif
@endsection

--- End of File ---

File: .\resources\views\baker\inventory\index.blade.php
@extends('layouts.baker')

@section('title', 'Inventory Overview')

@section('content')
<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3 mb-0 text-muted-sea">
        <i class="fas fa-boxes me-2"></i> Inventory Overview
    </h1>
</div>

<!-- Summary Cards -->
<div class="row mb-4">
    <div class="col-md-4">
        <div class="kpi-card">
            <div class="kpi-icon">
                <i class="fas fa-boxes"></i>
            </div>
            <div class="kpi-value">{{ $totalProducts }}</div>
            <div class="kpi-label">Total Products</div>
        </div>
    </div>
    
    <div class="col-md-4">
        <a href="{{ route('baker.inventory.index', ['stock_level'=>'low']) }}" class="text-decoration-none">
            <div class="kpi-card" style="cursor:pointer;">
                <div class="kpi-icon">
                    <i class="fas fa-arrow-down"></i>
                </div>
                <div class="kpi-value">{{ $lowStockCount }}</div>
                <div class="kpi-label">Low Stock Items</div>
            </div>
        </a>
    </div>
    
    <div class="col-md-4">
        <div class="kpi-card">
            <div class="kpi-icon">
            <i class="fas fa-box-open"></i>
            </div>
            <div class="kpi-value">{{ $outOfStockCount }}</div>
            <div class="kpi-label">Out of Stock</div>
        </div>
    </div>
</div>

<!-- Filters -->
<div class="card mb-4">
    <div class="card-body">
        <form method="GET" action="{{ route('baker.inventory.index') }}" class="row g-3">
            <div class="col-md-3">
                <label for="search" class="form-label">Search Products</label>
                <input type="text" 
                       class="form-control" 
                       id="search" 
                       name="search" 
                       placeholder="Product name or description"
                       value="{{ request('search') }}">
            </div>
            
            <div class="col-md-3">
                <label for="category" class="form-label">Category</label>
                <select class="form-select" id="category" name="category">
                    <option value="">All Categories</option>
                    @foreach($categories as $category)
                        <option value="{{ $category->category_id }}" {{ request('category') == $category->category_id ? 'selected' : '' }}>
                            {{ $category->name }}
                        </option>
                    @endforeach
                </select>
            </div>
            
            <div class="col-md-3">
                <label for="stock_level" class="form-label">Stock Level</label>
                <select class="form-select" id="stock_level" name="stock_level">
                    <option value="">All Levels</option>
                    <option value="low" {{ request('stock_level') === 'low' ? 'selected' : '' }}>Low Stock</option>
                    <option value="zero" {{ request('stock_level') === 'zero' ? 'selected' : '' }}>Out of Stock</option>
                    <option value="normal" {{ request('stock_level') === 'normal' ? 'selected' : '' }}>Normal Stock</option>
                </select>
            </div>
            
            <div class="col-md-3 d-flex align-items-end gap-2">
                <button type="submit" class="btn-admin-primary">
                    <i class="fas fa-search me-1"></i> Filter
                </button>
                <button type="submit" name="clear" value="1" class="btn-admin-light">
                    <i class="fas fa-times me-1"></i> Clear
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Inventory Table -->
<div class="card">
    <div class="card-body admin-card-body">
        @if($products->count() > 0)
            <div class="table-responsive">
                <table class="table table-border table-hover">
                    <thead>
                        <tr>
                            <th>Product Name</th>
                            <th>Category</th>
                            <th>Current Stock</th>
                            <th>Reorder Level</th>
                            <th>Price</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($products as $product)
                        <tr>
                            <td>
                                <strong>{{ $product->name }}</strong>
                                @if($product->description)
                                    <br><small class="text-muted">{{ Str::limit($product->description, 50) }}</small>
                                @endif
                            </td>
                            <td>{{ $product->category->name ?? 'N/A' }}</td>
                            <td>
                                @php
                                    $stock = $product->inventoryStock->quantity ?? 0;
                                    $reorderLevel = $product->inventoryStock->reorder_level ?? 10;
                                @endphp
                                <span class="fw-bold {{ $stock <= $reorderLevel ? 'text-danger' : 'text-success' }}">
                                    {{ number_format($stock) }} units
                                </span>
                            </td>
                            <td>{{ number_format($reorderLevel) }} units</td>
                            <td>₱{{ number_format($product->price, 2) }}</td>
                            <td>
                                @php
                                    if ($stock == 0) {
                                        $statusText = 'Out of Stock';
                                        $statusClass = 'text-danger fw-bold';
                                    } elseif ($stock <= $reorderLevel) {
                                        $statusText = 'Low Stock';
                                        $statusClass = 'text-warning fw-bold';
                                    } else {
                                        $statusText = 'In Stock';
                                        $statusClass = 'text-dark fw-bold';
                                    }
                                @endphp
                                <span class="{{ $statusClass }}">
                                    {{ $statusText }}
                                </span>
                            </td>
                            <td>
                                <div class="d-flex gap-2 align-items-center">
                                    <button type="button"
                                        class="btn-admin-light btn-sm border border-1 d-flex align-items-center gap-1"
                                        title="View Product"
                                        onclick="window.location='{{ route('baker.inventory.show', $product) }}'">
                                        <i class="fas fa-eye" aria-label="View"></i>
                                        <span class="small text-muted">View</span>
                                    </button>
                                    @if($stock <= $reorderLevel)
                                        <button type="button"
                                            class="btn-admin-primary btn-sm border border-1 d-flex align-items-center gap-1"
                                            title="Create Production Batch"
                                            onclick="window.location='{{ route('baker.production.create') }}?product={{ $product->prod_id }}'">
                                            <i class="fas fa-bread-slice" aria-label="Produce"></i>
                                            <span class="small text-muted">Produce</span>
                                        </button>
                                    @endif
                                </div>
                            </td>
                        </tr>
                        @endforeach
                    </tbody>
                </table>
            </div>
            
            <!-- Pagination -->
            <div class="d-flex justify-content-center mt-4">
                {{ $products->links('vendor.pagination.admin') }}
            </div>
        @else
            <div class="text-center py-5">
                <i class="fas fa-boxes fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">No Products Found</h4>
                <p class="text-muted">No products match your current filter criteria.</p>
                <a href="{{ route('baker.inventory.index') }}" class="btn-admin-primary">
                    <i class="fas fa-refresh me-2"></i> Clear Filters
                </a>
            </div>
        @endif
    </div>
</div>
@endsection

--- End of File ---

File: .\resources\views\baker\inventory\show.blade.php
@extends('layouts.baker')

@section('title', 'Product Inventory Details')

@section('content')
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <a href="{{ route('baker.inventory.index') }}" class="btn-admin-light">
            <i class="fas fa-arrow-left me-2"></i> Back to Inventory
        </a>
    </div>
    <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
        <i class="fas fa-box me-2"></i> {{ $product->name }}
    </h1>
    <div>
        <a href="{{ route('baker.production.create') }}?product={{ $product->prod_id }}" class="btn-admin-secondary">
            <i class="fas fa-industry me-2"></i> Create Production
        </a>
    </div>
</div>

<div class="row">
    <!-- Product Information -->
    <div class="col-md-8">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-info-circle me-2"></i> Product Information
                </h5>
            </div>
            <div class="card-body admin-card-body">
                <div class="row">
                    <div class="col-md-6">
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>Product Name:</strong></td>
                                <td>{{ $product->name }}</td>
                            </tr>
                            <tr>
                                <td><strong>Category:</strong></td>
                                <td>{{ $product->category->name ?? 'N/A' }}</td>
                            </tr>
                            <tr>
                                <td><strong>Price:</strong></td>
                                <td>₱{{ number_format($product->price, 2) }}</td>
                            </tr>
                            <tr>
                                <td><strong>Product ID:</strong></td>
                                <td>{{ $product->prod_id }}</td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        @if($product->description)
                        <div>
                            <strong>Description:</strong>
                            <p class="mt-2">{{ $product->description }}</p>
                        </div>
                        @endif
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Recent Production History -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-history me-2"></i> Recent Production History
                </h5>
                <a href="{{ route('baker.production.create') }}?product={{ $product->prod_id }}" class="btn-admin-secondary btn-sm">
                    <i class="fas fa-plus me-1"></i> New Batch
                </a>
            </div>
            <div class="card-body admin-card-body">
                @if($recentProductions->count() > 0)
                    <div class="table-responsive">
                        <table class="table table-borderless">
                            <thead>
                                <tr>
                                    <th>Batch Number</th>
                                    <th>Quantity</th>
                                    <th>Production Date</th>
                                    <th>Baker</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach($recentProductions as $production)
                                <tr>
                                    <td>
                                        <a href="{{ route('baker.production.show', $production) }}" class="text-decoration-none">
                                            <strong>{{ $production->batch_number }}</strong>
                                        </a>
                                    </td>
                                    <td>{{ number_format($production->quantity_produced) }} pcs</td>
                                    <td>{{ $production->production_date->format('M d, Y') }}</td>
                                    <td>{{ $production->baker->first_name ?? 'N/A' }} {{ $production->baker->last_name ?? '' }}</td>
                                    <td>
                                        <span class="badge-status {{ $production->status }}">
                                            {{ ucfirst(str_replace('_', ' ', $production->status)) }}
                                        </span>
                                    </td>
                                </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                @else
                    <div class="text-center py-4">
                        <i class="fas fa-industry fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No production history for this product yet.</p>
                        <a href="{{ route('baker.production.create') }}?product={{ $product->prod_id }}" class="btn-admin-secondary">
                            <i class="fas fa-plus me-2"></i> Create First Batch
                        </a>
                    </div>
                @endif
            </div>
        </div>
    </div>
    
    <!-- Stock Information Sidebar -->
    <div class="col-md-4">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-warehouse me-2"></i> Stock Information
                </h5>
            </div>
            <div class="card-body admin-card-body">
                @php
                    $stock = $product->inventoryStock;
                    $currentStock = $stock->quantity ?? 0;
                    $reorderLevel = $stock->reorder_level ?? 10;
                    $lastUpdated = $stock->last_counted_at ?? null;
                @endphp
                
                <div class="text-center mb-4">
                    <div class="kpi-card">
                        <div class="kpi-icon {{ $currentStock <= $reorderLevel ? 'text-danger' : 'text-success' }}">
                            <i class="fas fa-boxes"></i>
                        </div>
                        <div class="kpi-value">{{ number_format($currentStock) }}</div>
                        <div class="kpi-label">Current Stock</div>
                    </div>
                </div>
                
                <table class="table table-borderless">
                    <tr>
                        <td><strong>Reorder Level:</strong></td>
                        <td>{{ number_format($reorderLevel) }} units</td>
                    </tr>
                    <tr>
                        <td><strong>Status:</strong></td>
                        <td>
                            @if($currentStock == 0)
                                <span class="badge-status cancelled">Out of Stock</span>
                            @elseif($currentStock <= $reorderLevel)
                                <span class="badge-status pending">Low Stock</span>
                            @else
                                <span class="badge-status completed">In Stock</span>
                            @endif
                        </td>
                    </tr>
                    @if($lastUpdated)
                    <tr>
                        <td><strong>Last Updated:</strong></td>
                        <td>{{ $lastUpdated->format('M d, Y') }}</td>
                    </tr>
                    @endif
                </table>
                
                @if($currentStock <= $reorderLevel)
                <div class="alert-admin-warning mt-3">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Reorder Alert!</strong><br>
                    This product is {{ $currentStock == 0 ? 'out of stock' : 'running low' }}. Consider creating a new production batch.
                </div>
                @endif
            </div>
        </div>
    </div>
</div>
@endsection

--- End of File ---

File: .\resources\views\baker\production\create.blade.php
@extends('layouts.baker')

@section('title', 'Create Production Batch')

@section('content')
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <a href="{{ route('baker.production.index') }}" class="btn-admin-light">
            <i class="fas fa-arrow-left me-2"></i> Back to Production
        </a>
    </div>
    <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
        <i class="fas fa-industry me-2"></i> Create Production Batch
    </h1>
    <div></div>
</div>

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header card-header-sea-secondary">
                <h5 class="mb-0">
                    <i class="fas fa-industry me-2"></i> New Production Batch
                </h5>
            </div>
            <div class="card-body admin-card-body">
                <form action="{{ route('baker.production.store') }}" method="POST">
                    @csrf
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="prod_id" class="form-label">Product *</label>
                                <select class="form-select" id="prod_id" name="prod_id" required>
                                    <option value="">Select a product</option>
                                    @foreach($products as $product)
                                        <option value="{{ $product->prod_id }}" {{ old('prod_id') == $product->prod_id ? 'selected' : '' }}>
                                            {{ $product->name }}
                                        </option>
                                    @endforeach
                                </select>
                                @error('prod_id')
                                    <div class="text-danger small mt-1">{{ $message }}</div>
                                @enderror
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="quantity_produced" class="form-label">Quantity Produced *</label>
                                <input type="number" 
                                       class="form-control" 
                                       id="quantity_produced" 
                                       name="quantity_produced" 
                                       value="{{ old('quantity_produced') }}" 
                                       min="1"
                                       required>
                                @error('quantity_produced')
                                    <div class="text-danger small mt-1">{{ $message }}</div>
                                @enderror
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="production_date" class="form-label">Production Date *</label>
                                <input type="date" 
                                       class="form-control" 
                                       id="production_date" 
                                       name="production_date" 
                                       value="{{ old('production_date', date('Y-m-d')) }}" 
                                       required>
                                @error('production_date')
                                    <div class="text-danger small mt-1">{{ $message }}</div>
                                @enderror
                            </div>
                        </div>
                        
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="expiration_date" class="form-label">Expiration Date *</label>
                                <input type="date" 
                                       class="form-control" 
                                       id="expiration_date" 
                                       name="expiration_date" 
                                       value="{{ old('expiration_date') }}" 
                                       required>
                                <div id="shelf-life-info" class="text-info small mt-1"></div>
                                @error('expiration_date')
                                    <div class="text-danger small mt-1">{{ $message }}</div>
                                @enderror
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="status" class="form-label">Production Status *</label>
                                <select class="form-select" id="status" name="status" required onchange="showStatusInfo()">
                                    <option value="pending" {{ old('status', 'pending') == 'pending' ? 'selected' : '' }}>Pending</option>
                                    <option value="in_progress" {{ old('status') == 'in_progress' ? 'selected' : '' }}>In Progress</option>
                                    <option value="completed" {{ old('status') == 'completed' ? 'selected' : '' }}>Completed</option>
                                    <option value="cancelled" {{ old('status') == 'cancelled' ? 'selected' : '' }}>Cancelled</option>
                                </select>
                                @error('status')
                                    <div class="text-danger small mt-1">{{ $message }}</div>
                                @enderror
                                <div id="status-info" class="text-info small mt-1"></div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="notes" class="form-label">Production Notes</label>
                        <textarea class="form-control" 
                                  id="notes" 
                                  name="notes" 
                                  rows="4" 
                                  placeholder="Enter any notes about this production batch...">{{ old('notes') }}</textarea>
                        @error('notes')
                            <div class="text-danger small mt-1">{{ $message }}</div>
                        @enderror
                    </div>
                    
                    <div class="row">
                        <div class="col-12">
                            <div class="alert-admin-info">
                                <i class="fas fa-info-circle me-2"></i>
                                <strong>Smart Expiration:</strong> The system automatically calculates expiration dates based on product type. 
                                Bread products: 3 days, Pastries: 2 days, Cakes: 5 days, Cookies: 7 days, etc. 
                                You can adjust the date manually if needed.
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-12">
                            <div class="alert-admin-success">
                                <i class="fas fa-check-circle me-2"></i>
                                <strong>Note:</strong> When you create this production batch, the quantity will be automatically added to the inventory. A unique batch number will be generated automatically.
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-center gap-3 mt-4">
                        <button type="button" class="btn-admin-light" onclick="window.location='{{ route('baker.production.index') }}'">
                            <i class="fas fa-times me-2"></i> Cancel
                        </button>
                        <button type="submit" class="btn-admin-secondary">
                            <i class="fas fa-save me-2"></i> Create Production Batch
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section('extra-js')
<script>
// Product shelf life mapping (in days)
const productShelfLife = {
    'bread': 3,
    'pastry': 2,
    'cake': 5,
    'cookie': 7,
    'pie': 4,
    'muffin': 3,
    'croissant': 2,
    'donut': 1,
    'default': 3
};

// Auto-calculate expiration date based on production date and product type
function updateExpirationDate() {
    const productionDate = document.getElementById('production_date').value;
    const productSelect = document.getElementById('prod_id');
    
    if (productionDate && productSelect.selectedOptions.length > 0) {
        const productName = productSelect.selectedOptions[0].text.toLowerCase();
        
        // Determine shelf life based on product name keywords
        let shelfLifeDays = productShelfLife.default;
        
        for (const [type, days] of Object.entries(productShelfLife)) {
            if (type !== 'default' && productName.includes(type)) {
                shelfLifeDays = days;
                break;
            }
        }
        
        // Calculate expiration date
        const productionDateObj = new Date(productionDate);
        const expirationDate = new Date(productionDateObj);
        expirationDate.setDate(expirationDate.getDate() + shelfLifeDays);
        
        document.getElementById('expiration_date').value = expirationDate.toISOString().split('T')[0];
        
        // Show shelf life info
        const shelfLifeInfo = document.getElementById('shelf-life-info');
        if (shelfLifeInfo) {
            shelfLifeInfo.textContent = `Shelf life: ${shelfLifeDays} days`;
            shelfLifeInfo.className = 'text-info small mt-1';
        }
    }
}

// Event listeners
document.getElementById('production_date').addEventListener('change', updateExpirationDate);
document.getElementById('prod_id').addEventListener('change', updateExpirationDate);

// Show status information
function showStatusInfo() {
    const statusSelect = document.getElementById('status');
    const statusInfo = document.getElementById('status-info');
    
    if (statusSelect && statusInfo) {
        const status = statusSelect.value;
        let info = '';
        
        switch(status) {
            case 'pending':
                info = 'Production planned but not started yet';
                break;
            case 'in_progress':
                info = 'Currently being produced';
                break;
            case 'completed':
                info = 'Production finished - inventory will be updated automatically';
                break;
            case 'cancelled':
                info = 'Production batch cancelled';
                break;
        }
        
        statusInfo.textContent = info;
    }
}

// Set default production date to today if not set
document.addEventListener('DOMContentLoaded', function() {
    const productionDateInput = document.getElementById('production_date');
    if (!productionDateInput.value) {
        productionDateInput.value = new Date().toISOString().split('T')[0];
    }
    updateExpirationDate();
    showStatusInfo();
});
</script>
@endsection
@endsection

--- End of File ---

File: .\resources\views\baker\production\edit.blade.php
@extends('layouts.baker')

@section('title', 'Edit Production Batch')

@section('content')
<div class="d-flex align-items-center mb-4">
    <div>
        <a href="{{ route('baker.production.index') }}" class="btn-admin-light me-3">
            <i class="fas fa-arrow-left me-2"></i> Back to Production
        </a>
    </div>
    <h1 class="h3 mb-0 text-muted-sea text-center flex-grow-1">
        <i class="fas fa-edit me-2"></i> Edit Production Batch: {{ $production->batch_number }}
    </h1>
    <div>
        <a href="{{ route('baker.production.show', $production) }}" class="btn-admin-secondary">
            <i class="fas fa-eye me-2"></i> View Details
        </a>
    </div>
</div>

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header card-header-sea-secondary">
                <h5 class="mb-0">
                    <i class="fas fa-industry me-2"></i> Edit Batch Information
                </h5>
            </div>
            <div class="card-body admin-card-body">
                <form action="{{ route('baker.production.update', $production) }}" method="POST">
                    @csrf
                    @method('PUT')
                    
                    <!-- Read-only batch information -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Batch Number</label>
                                <input type="text" 
                                       class="form-control" 
                                       value="{{ $production->batch_number }}" 
                                       readonly>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Product</label>
                                <input type="text" 
                                       class="form-control" 
                                       value="{{ $production->product->name ?? 'N/A' }}" 
                                       readonly>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Quantity Produced</label>
                                <input type="text" 
                                       class="form-control" 
                                       value="{{ number_format($production->quantity_produced) }} pieces" 
                                       readonly>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Production Date</label>
                                <input type="text" 
                                       class="form-control" 
                                       value="{{ $production->production_date->format('F d, Y') }}" 
                                       readonly>
                            </div>
                        </div>
                    </div>
                    
                    <hr class="mb-4">
                    
                    <!-- Editable fields -->
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label for="status" class="form-label">Status *</label>
                                @if($production->status === 'completed')
                                    <input type="text" 
                                           class="form-control" 
                                           value="Completed" 
                                           readonly>
                                    <input type="hidden" name="status" value="completed">
                                    <small class="text-muted">
                                        <i class="fas fa-lock me-1"></i> Status cannot be changed for completed batches
                                    </small>
                                @else
                                    <select class="form-select" id="status" name="status" required>
                                        <option value="pending" {{ $production->status === 'pending' ? 'selected' : '' }}>Pending</option>
                                        <option value="in_progress" {{ $production->status === 'in_progress' ? 'selected' : '' }}>In Progress</option>
                                        <option value="completed" {{ $production->status === 'completed' ? 'selected' : '' }}>Completed</option>
                                        <option value="cancelled" {{ $production->status === 'cancelled' ? 'selected' : '' }}>Cancelled</option>
                                    </select>
                                @endif
                                @error('status')
                                    <div class="text-danger small mt-1">{{ $message }}</div>
                                @enderror
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="notes" class="form-label">Production Notes</label>
                        <textarea class="form-control" 
                                  id="notes" 
                                  name="notes" 
                                  rows="4" 
                                  placeholder="Enter any notes about this production batch...">{{ old('notes', $production->notes) }}</textarea>
                        @error('notes')
                            <div class="text-danger small mt-1">{{ $message }}</div>
                        @enderror
                    </div>
                    
                    <div class="row">
                        <div class="col-12">
                            <div class="alert-admin-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Note:</strong> Only the status and notes can be modified for existing production batches. Quantity and product changes are not allowed to maintain inventory accuracy.
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-center gap-3 mt-4">
                        <button type="button" class="btn-admin-light" onclick="window.location='{{ route('baker.production.index') }}'">
                            <i class="fas fa-times me-2"></i> Cancel
                        </button>
                        <button type="submit" class="btn-admin-primary">
                            <i class="fas fa-save me-2"></i> Update Production Batch
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@endsection

--- End of File ---

File: .\resources\views\baker\production\index.blade.php
@extends('layouts.baker')

@section('title', 'Production Management')

@section('content')
@if(request('date_from') || request('date_to'))
<div class="alert alert-info mb-3">
    <strong>Filter:</strong>
    @if(request('date_from'))
        From <span class="badge bg-primary">{{ request('date_from') }}</span>
    @endif
    @if(request('date_to'))
        To <span class="badge bg-primary">{{ request('date_to') }}</span>
    @endif
</div>
@endif
<div class="d-flex justify-content-between align-items-center mb-3">
    <h1 class="h3 mb-0 text-muted-sea">
        <i class="fas fa-industry me-1"></i> Production Management
    </h1>
    <a href="{{ route('baker.production.create') }}" class="btn-admin-secondary">
        <i class="fas fa-plus me-2"></i> New Production Batch
    </a>
</div>

<!-- Filters -->
<div class="card mb-4">
    <div class="card-body admin-card-body">
        <form method="GET" action="{{ route('baker.production.index') }}" class="row g-3">
            <div class="col-md-3">
                <label for="search" class="form-label">Search</label>
                <input type="text" 
                       class="form-control" 
                       id="search" 
                       name="search" 
                       placeholder="Batch number or product name"
                       value="{{ request('search') }}">
            </div>
            
            <div class="col-md-2">
                <label for="status" class="form-label">Status</label>
                <select class="form-select" id="status" name="status">
                    <option value="">All Status</option>
                    <option value="pending" {{ request('status') === 'pending' ? 'selected' : '' }}>Pending</option>
                    <option value="in_progress" {{ request('status') === 'in_progress' ? 'selected' : '' }}>In Progress</option>
                    <option value="completed" {{ request('status') === 'completed' ? 'selected' : '' }}>Completed</option>
                    <option value="cancelled" {{ request('status') === 'cancelled' ? 'selected' : '' }}>Cancelled</option>
                </select>
            </div>
            
            <div class="col-md-2">
                <label for="date_from" class="form-label">From Date</label>
                <input type="date" 
                       class="form-control" 
                       id="date_from" 
                       name="date_from" 
                       value="{{ request('date_from') }}">
            </div>
            
            <div class="col-md-2">
                <label for="date_to" class="form-label">To Date</label>
                <input type="date" 
                       class="form-control" 
                       id="date_to" 
                       name="date_to" 
                       value="{{ request('date_to') }}">
            </div>
            
            <div class="col-md-3 d-flex align-items-end gap-2">
                <button type="submit" class="btn-admin-primary">
                    <i class="fas fa-search me-1"></i> Filter
                </button>
                <button type="button" class="btn-admin-light" onclick="window.location='{{ route('baker.production.index') }}'">
                    <i class="fas fa-times me-1"></i> Clear
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Production Batches Table -->
<div class="card">
    <div class="card-body admin-card-body">
        @if($productions->count() > 0)
            <div class="table-responsive">
                <table class="table table-borderless">
                    <thead>
                        <tr>
                            <th>Batch Number</th>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Production Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($productions as $production)
                        <tr>
                            <td>
                                <strong>{{ $production->batch_number }}</strong>
                            </td>
                            <td>{{ $production->product->name ?? 'N/A' }}</td>
                            <td>{{ number_format($production->quantity_produced) }} pcs</td>
                            <td>
                                @php $dateVal = $production->production_date; @endphp
                                @if(is_object($dateVal) && method_exists($dateVal, 'format'))
                                    {{ $dateVal->format('M d, Y') }}
                                @elseif(is_string($dateVal) && strtotime($dateVal))
                                    {{ date('M d, Y', strtotime($dateVal)) }}
                                @else
                                    {{ $dateVal }}
                                @endif
                            </td>
                            <td>
                                @php
                                    $status = $production->status;
                                    $statusMap = [
                                        'pending' => ['label' => 'Pending', 'icon' => 'hourglass-half', 'class' => 'admin', 'time' => $production->pending_at],
                                        'in_progress' => ['label' => 'In Progress', 'icon' => 'cogs', 'class' => 'baker', 'time' => $production->in_progress_at],
                                        'completed' => ['label' => 'Completed', 'icon' => 'check-circle', 'class' => 'manager', 'time' => $production->completed_at],
                                        'cancelled' => ['label' => 'Cancelled', 'icon' => 'times-circle', 'class' => '', 'time' => $production->updated_at],
                                    ];
                                    $current = $statusMap[$status] ?? null;
                                @endphp
                                @if($current)
                                    <span class="badge-admin-role {{ $current['class'] }}">
                                        <i class="fas fa-{{ $current['icon'] }} me-1"></i> {{ $current['label'] }}
                                    </span>
                                    @if($current['time'])
                                        <span class="text-muted small ms-2">({{ $current['time']->format('M d, Y H:i') }})</span>
                                    @endif
                                @endif
                                <div class="mt-1" style="max-width:120px;">
                                    <div class="progress" style="height: 6px;">
                                        @php
                                            $progress = 0;
                                            if($status==='pending') $progress=20;
                                            elseif($status==='in_progress') $progress=60;
                                            elseif($status==='completed') $progress=100;
                                            elseif($status==='cancelled') $progress=0;
                                        @endphp
                                        <div class="progress-bar bg-success" role="progressbar" style="width: {{ $progress }}%" aria-valuenow="{{ $progress }}" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="d-flex gap-2 align-items-center">
                                    <button type="button"
                                        class="btn-admin-light btn-sm border border-1 d-flex align-items-center gap-1"
                                        title="View Details"
                                        onclick="window.location='{{ route('baker.production.show', $production) }}'">
                                        <i class="fas fa-eye" aria-label="View"></i>
                                        <span class="small text-muted">View</span>
                                    </button>
                                    <button type="button"
                                        class="btn-admin-secondary btn-sm border border-1 d-flex align-items-center gap-1"
                                        title="Edit"
                                        onclick="window.location='{{ route('baker.production.edit', $production) }}'">
                                        <i class="fas fa-edit" aria-label="Edit"></i>
                                        <span class="small text-muted">Edit</span>
                                    </button>
                                    <button type="button"
                                        class="btn-admin-delete btn-sm border border-1 d-flex align-items-center gap-1"
                                        onclick="openDeleteModal(this)"
                                        data-name="Batch #{{ $production->batch_number }}"
                                        data-id="{{ $production->batch_id }}"
                                        data-action="{{ route('baker.production.destroy', $production) }}"
                                        title="Delete">
                                        <i class="fas fa-trash" aria-label="Delete"></i>
                                        <span class="small text-white">Delete</span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        @endforeach
                    </tbody>
                </table>
            </div>
            
            <!-- Pagination -->
            <div class="d-flex justify-content-center mt-4">
                {{ $productions->links('vendor.pagination.admin') }}
            </div>
        @else
            <div class="text-center py-5">
                <i class="fas fa-industry fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">No Production Batches Found</h4>
                <p class="text-muted">Start by creating your first production batch to track your baking activities.</p>
                <a href="{{ route('baker.production.create') }}" class="btn-admin-secondary">
                    <i class="fas fa-plus me-2"></i> Create First Batch
                </a>
            </div>
        @endif
    </div>
</div>

<!-- Sea-style Delete Modal -->
<div id="deleteModal" class="sea-modal">
    <div class="sea-modal-content">
        <div class="sea-modal-header">
            <h5 class="sea-modal-title">
                <i class="fas fa-trash-alt me-2"></i> Delete Production Batch
            </h5>
        </div>
        <div class="sea-modal-body">
            <div class="alert-admin-danger mb-3">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <strong>Warning:</strong> This action cannot be undone!
            </div>
            <p>Are you sure you want to delete <strong id="deleteItemName"></strong>?</p>
            <p class="text-muted small mb-0">
                <i class="fas fa-info-circle me-1"></i> 
                This will permanently remove the production batch from the system.
            </p>
        </div>
        <div class="sea-modal-footer">
            <button type="button" class="btn-admin-light" onclick="closeModal('deleteModal')">
                <i class="fas fa-times me-2"></i> Cancel
            </button>
            <form id="deleteForm" method="POST" style="display: inline;">
                @csrf
                @method('DELETE')
                <button type="submit" class="btn-admin-primary">
                    <i class="fas fa-trash me-2"></i> Delete
                </button>
            </form>
        </div>
    </div>
</div>

<script>
function openDeleteModal(button) {
    const modal = document.getElementById('deleteModal');
    const itemName = button.getAttribute('data-name');
    const actionUrl = button.getAttribute('data-action');
    
    document.getElementById('deleteItemName').textContent = itemName;
    document.getElementById('deleteForm').action = actionUrl;
    
    modal.style.display = 'flex';
    
    // Prevent body scroll
    document.body.style.overflow = 'hidden';
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    modal.style.display = 'none';
    
    // Restore body scroll
    document.body.style.overflow = 'auto';
}

// Close modal when clicking outside
window.onclick = function(event) {
    const modal = document.getElementById('deleteModal');
    if (event.target === modal) {
        closeModal('deleteModal');
    }
}

// Close modal with Escape key
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        closeModal('deleteModal');
    }
});
</script>
@endsection



--- End of File ---

File: .\resources\views\baker\production\show.blade.php
@extends('layouts.baker')

@section('title', 'Production Batch Details')

@section('content')
<div class="d-flex align-items-center justify-content-between mb-4">
    <!-- Back Button (left) -->
    <div class="flex-shrink-0">
        <a href="{{ route('baker.production.index') }}" class="btn-admin-light">
            <i class="fas fa-arrow-left me-2"></i> Back to Production
        </a>
    </div>
    <!-- Title (center) -->
    <div class="flex-grow-1 text-center">
        <h1 class="h3 mb-0 text-muted-sea text-center">
            <i class="fas fa-industry me-2"></i> Production Batch: {{ $production->batch_number }}
        </h1>
        @if($production->expiration_date)
            @php $daysUntilExpiry = (int)\Carbon\Carbon::now()->diffInDays($production->expiration_date, false); @endphp
            @if($daysUntilExpiry < 0)
                <span class="badge badge-admin-role admin">Expired {{ abs($daysUntilExpiry) }} days ago</span>
            @elseif($daysUntilExpiry <= 1)
                <span class="badge badge-admin-role manager">Expires in {{ $daysUntilExpiry }} days</span>
            @else
                <span class="badge badge-admin-role baker">Expires in {{ $daysUntilExpiry }} days</span>
            @endif
        @endif
    </div>
    <!-- Edit Button (right) -->
    <div class="flex-shrink-0">
        <a href="{{ route('baker.production.edit', $production) }}" class="btn-admin-light">
            <i class="fas fa-edit me-2"></i> Edit Batch
        </a>
    </div>
</div>

<div class="row">
    <!-- Batch Information -->
    <div class="col-md-8">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-info-circle me-2"></i> Batch Information
                </h5>
            </div>
            <div class="card-body admin-card-body">
                <div class="row">
                    <div class="col-md-6">
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>Batch Number:</strong></td>
                                <td>{{ $production->batch_number }}</td>
                            </tr>
                            <tr>
                                <td><strong>Product:</strong></td>
                                <td>{{ $production->product->name ?? 'N/A' }}</td>
                            </tr>
                            <tr>
                                <td><strong>Quantity Produced:</strong></td>
                                <td>{{ number_format($production->quantity_produced) }} pieces</td>
                            </tr>
                            <tr>
                                <td><strong>Status:</strong></td>
                                <td>
                                    @php
                                        $status = $production->status;
                                        $statusMap = [
                                            'pending' => ['label' => 'Pending', 'icon' => 'hourglass-half', 'class' => 'admin', 'time' => $production->pending_at],
                                            'in_progress' => ['label' => 'In Progress', 'icon' => 'cogs', 'class' => 'baker', 'time' => $production->in_progress_at],
                                            'completed' => ['label' => 'Completed', 'icon' => 'check-circle', 'class' => 'manager', 'time' => $production->completed_at],
                                            'cancelled' => ['label' => 'Cancelled', 'icon' => 'times-circle', 'class' => '', 'time' => $production->updated_at],
                                        ];
                                        $current = $statusMap[$status] ?? null;
                                    @endphp
                                    @if($current)
                                        <span class="badge-admin-role {{ $current['class'] }}">
                                            <i class="fas fa-{{ $current['icon'] }} me-1"></i> {{ $current['label'] }}
                                        </span>
                                        @if($current['time'])
                                            <span class="text-muted small ms-2">({{ $current['time']->format('M d, Y H:i') }})</span>
                                        @endif
                                    @endif
                                    <!-- Progress bar -->
                                    <div class="mt-2" style="max-width:320px;">
                                        <div class="progress" style="height: 8px;">
                                            @php
                                                $progress = 0;
                                                if($status==='pending') $progress=20;
                                                elseif($status==='in_progress') $progress=60;
                                                elseif($status==='completed') $progress=100;
                                                elseif($status==='cancelled') $progress=0;
                                            @endphp
                                            <div class="progress-bar bg-success" role="progressbar" style="width: {{ $progress }}%" aria-valuenow="{{ $progress }}" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>Production Date:</strong></td>
                                <td>{{ $production->production_date->format('F d, Y') }}</td>
                            </tr>
                            <tr>
                                <td><strong>Produced At:</strong></td>
                                <td>{{ $production->produced_at ? $production->produced_at->format('F d, Y g:i A') : 'N/A' }}</td>
                            </tr>
                            <tr>
                                <td><strong>Expiration Date:</strong></td>
                                <td>{{ $production->expiration_date->format('F d, Y') }}</td>
                            </tr>
                            <tr>
                                <td><strong>Baker:</strong></td>
                                <td>{{ $production->baker->first_name ?? 'N/A' }} {{ $production->baker->last_name ?? '' }}</td>
                            </tr>
                        </table>
                    </div>
                </div>
                
                @if($production->notes)
                <div class="mt-4">
                    <h6><strong>Production Notes:</strong></h6>
                    <div class="bg-light p-3 rounded">
                        {{ $production->notes }}
                    </div>
                </div>
                @endif
            </div>
        </div>
        
        <!-- Product Information -->
        @if($production->product)
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-box me-2"></i> Product Information
                </h5>
            </div>
            <div class="card-body admin-card-body">
                <div class="row">
                    <div class="col-md-6">
                        <table class="table table-borderless">
                            <tr>
                                <td><strong>Product Name:</strong></td>
                                <td>{{ $production->product->name }}</td>
                            </tr>
                            <tr>
                                <td><strong>Category:</strong></td>
                                <td>{{ $production->product->category->name ?? 'N/A' }}</td>
                            </tr>
                            <tr>
                                <td><strong>Price:</strong></td>
                                <td>₱{{ number_format($production->product->price, 2) }}</td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        @if($production->product->description)
                        <div>
                            <strong>Description:</strong>
                            <p class="mt-2">{{ $production->product->description }}</p>
                        </div>
                        @endif
                    </div>
                </div>
            </div>
        </div>
        @endif
    </div>
    
    <!-- Action Panel -->
    <div class="col-md-4">
        
        <!-- Batch Statistics -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-chart-bar me-2"></i> Batch Statistics
                </h5>
            </div>
            <div class="card-body admin-card-body">
                <div class="text-center">
                    <div class="kpi-card">
                        <div class="kpi-icon">
                            <i class="fas fa-calendar-alt"></i>
                        </div>
                        <div class="kpi-value">
                            {{ $production->created_at->diffForHumans() }}
                        </div>
                        <div class="kpi-label">Batch Age</div>
                    </div>
                </div>
                
                @if($production->expiration_date)
                <div class="mt-3">
                    <div class="text-center">
                        @php
                            $daysUntilExpiry = (int)now()->diffInDays($production->expiration_date, false);
                        @endphp
                        
                        @if($daysUntilExpiry < 0)
                            <span class="badge badge-admin-role admin">Expired {{ abs($daysUntilExpiry) }} days ago</span>
                        @elseif($daysUntilExpiry <= 2)
                            <span class="badge badge-admin-role manager">Expires in {{ $daysUntilExpiry }} days</span>
                        @else
                            <span class="badge badge-admin-role baker">Expires in {{ $daysUntilExpiry }} days</span>
                        @endif
                    </div>
                </div>
                @endif
            </div>
        </div>
    </div>
</div>
@endsection

--- End of File ---

File: .\resources\views\cashier\dashboard\cashier.blade.php
@extends('layouts.cashier')

@section('title', 'Dashboard')
@section('page-title', 'Cashier Dashboard')

@section('content')
    <div class="dashboard-cards">
        <div class="card">
            <h3>Point of Sale</h3>
            <p>Process customer orders and payments</p>
            <a href="/dashboard/cashier/sales">New Sale</a>
        </div>
        <div class="card">
            <h3>Today's Orders</h3>
            <p>View and manage pending orders</p>
            <a href="/dashboard/cashier/orders">View Orders</a>
        </div>
        <div class="card">
            <h3>Customer Management</h3>
            <p>Manage customer information and loyalty programs</p>
            <a href="/dashboard/cashier/customers">View Customers</a>
        </div>
        <div class="card">
            <h3>Daily Summary</h3>
            <p>View today's sales summary and transactions</p>
            <a href="/dashboard/cashier/summary">View Summary</a>
        </div>
    </div>
    
    <div class="card">
        <h3>Cashier Notes</h3>
        <p>Welcome to the Cashier Dashboard! Here you can process sales, manage orders, and handle customer transactions.</p>
    </div>
@endsection

--- End of File ---

File: .\resources\views\cashier\dashboard\index.blade.php
@extends('layouts.cashier')

@section('title', 'Cashier Dashboard')

@section('content')
<div class="row mb-4">
    <div class="col-12">
        <h2 class="dashboard-title">
            <i class="fas fa-chart-line me-2"></i>
            Cashier Dashboard
        </h2>
    </div>
    </div>
    
    <!-- Today's Summary KPI Cards -->
    <div class="dashboard-cards mb-4">
    <a href="{{ route('cashier.sales.index') }}" class="text-decoration-none">
    <div class="cashier-kpi-card sales" style="cursor:pointer;" onclick="window.location='{{ route('cashier.sales.index', ['date_from'=>now()->toDateString(),'date_to'=>now()->toDateString()]) }}'">
        <div class="kpi-header d-flex align-items-center justify-content-between">
            <div class="kpi-value text-start" style="font-size:1.5rem; font-weight:600; min-width:90px;">
                ₱{{ number_format($todaysSales, 2) }}
            </div>
            <div class="flex-grow-1 text-end">
                <div class="kpi-label">Today's Sales</div>
                <small class="kpi-date">{{ now()->format('F j, Y') }}</small>
            </div>
            <i class="fas fa-money-bill-wave kpi-icon text-sea-primary ms-2"></i>
            </div>
        </div>
    </a>

    <a href="{{ route('cashier.sales.index') }}" class="text-decoration-none">
    <div class="cashier-kpi-card transactions" style="cursor:pointer;" onclick="window.location='{{ route('cashier.sales.index', ['date_from'=>now()->toDateString(),'date_to'=>now()->toDateString()]) }}'">
            <div class="kpi-header d-flex align-items-center justify-content-between">
                <div class="kpi-value text-start" style="font-size:1.5rem; font-weight:600; min-width:90px;">{{ $todaysTransactions }}</div>
                <div class="flex-grow-1 text-end">
                    <div class="kpi-label">Transactions</div>
                    <small class="kpi-date">Total orders today</small>
                </div>
                <i class="fas fa-shopping-cart kpi-icon text-sea-primary ms-2"></i>
            </div>
        </div>
        </a>

    <a href="{{ route('cashier.sales.index') }}" class="text-decoration-none">
    <div class="cashier-kpi-card average" style="cursor:pointer;" onclick="window.location='{{ route('cashier.sales.index', ['date_from'=>now()->toDateString(),'date_to'=>now()->toDateString()]) }}'">
        <div class="kpi-header d-flex align-items-center justify-content-between">
            <div class="kpi-value text-start" style="font-size:1.5rem; font-weight:600; min-width:90px;">{{ number_format($averageSale, 2) }}</div>
            <div class="flex-grow-1 text-end">
                <div class="kpi-label">Average Sale</div>
                <small class="kpi-date">Per transaction</small>
            </div>
            <i class="fas fa-chart-bar kpi-icon text-sea-primary ms-2"></i>
        </div>
    </div>
    </a>
    </div>

    <!-- Quick Actions -->
    <div class="quick-actions-section mb-4">
        <div class="quick-actions-grid">
            <a href="{{ route('cashier.pos.index') }}" class="cashier-action-btn">
                <i class="fas fa-cash-register"></i>
                <div class="action-label">New Sale</div>
                <small>Start a new transaction</small>
            </a>
            <a href="{{ route('cashier.sales.index') }}" class="cashier-action-btn">
                <i class="fas fa-history"></i>
                <div class="action-label">Sales History</div>
                <small>View past transactions</small>
            </a>
        </div>
    </div>

<div class="row">
    <div class="col-12">
        <div class="content-card">
            <div class="content-card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0 content-card-title">
                    <i class="fas fa-clock"></i>
                    Recent Sales
                </h5>
                <a href="{{ route('cashier.sales.index') }}" class="btn-admin-secondary">
                    <i class="fas fa-arrow-right"></i>
                    View All
                </a>
            </div>

            @if($recentSales->count() > 0)
                <div class="table-responsive w-100">
                    <table class="table-cashier w-100">
                        <thead>
                            <tr>
                                <th>Order #</th>
                                <th>Date & Time</th>
                                <th>Type</th>
                                <th>Items</th>
                                <th>Total Amount</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($recentSales as $sale)
                                <tr>
                                    <td>
                                        <strong class="text-primary">{{ $sale->order_number }}</strong>
                                    </td>
                                    <td>
                                        <small>
                                            <i class="fas fa-calendar-alt me-1"></i>
                                            {{ \Carbon\Carbon::parse($sale->order_date)->format('M j, Y') }}
                                            <br>
                                            <i class="fas fa-clock me-1"></i>
                                            {{ $sale->created_at->format('g:i A') }}
                                        </small>
                                    </td>
                                    <td>
                                        <span class="badge-chip {{ strtolower($sale->order_type) == 'delivery' ? 'badge-sea-secondary' : (strtolower($sale->order_type) == 'dine_in' ? 'badge-sea-light' : 'badge-sea-primary') }}">
                                            @if($sale->order_type == 'dine_in')
                                                <i class="fas fa-utensils me-1"></i> Dine In
                                            @elseif($sale->order_type == 'takeout')
                                                <i class="fas fa-shopping-bag me-1"></i> Takeout
                                            @else
                                                <i class="fas fa-truck me-1"></i> Delivery
                                            @endif
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge-chip badge-sea-light">{{ $sale->items->count() }} items</span>
                                    </td>
                                    <td>
                                        <strong>₱{{ number_format($sale->total_amount, 2) }}</strong>
                                    </td>
                                    <td>
                                        @php $status = strtolower($sale->status ?? 'pending'); @endphp
                                        <span class="badge-chip {{ $status === 'completed' ? 'badge-sea-light' : ($status === 'cancelled' ? 'badge-sea-primary' : 'badge-sea-secondary') }}">
                                            {{ ucfirst($status) }}
                                        </span>
                                    </td>
                                    <td>
                                        <a href="{{ route('cashier.sales.show', $sale->so_id) }}" 
                                           class="btn-admin-light">
                                            <i class="fas fa-eye me-1"></i> View
                                        </a>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            @else
                <div class="text-center py-5">
                    <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                    <p class="text-muted mb-0">No sales recorded yet today. Start selling!</p>
                    <a href="{{ route('cashier.pos.index') }}" class="btn-admin-primary mt-3">
                        <i class="fas fa-plus-circle me-2"></i>
                        Create New Sale
                    </a>
                </div>
            @endif
        </div>
    </div>
</div>
@endsection

--- End of File ---

File: .\resources\views\cashier\pos\index.blade.php
@extends('layouts.cashier')

@section('title', 'Point of Sale')

@section('extra-css')
<style>
    .pos-container {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 1.5rem;
        height: calc(100vh - 250px);
    }

    .products-section {
        overflow-y: auto;
    }

    .cart-section {
        position: sticky;
        top: 20px;
    }

    @media (max-width: 992px) {
        .pos-container {
            grid-template-columns: 1fr;
            height: auto;
        }
        
        .cart-section {
            position: relative;
            top: 0;
        }
    }
</style>
@endsection

@section('content')
<div class="page-header">
    <h1 class="page-title">
        <i class="fas fa-cash-register"></i>
        Point of Sale
    </h1>
    <p class="page-subtitle">Select products and process sales transactions</p>
</div>

<div class="pos-container">
    <!-- Products Grid -->
    <div class="products-section">
        <div class="content-card">
            <div class="content-card-header d-flex justify-content-between align-items-center">
                <h3 class="content-card-title mb-0">
                    <i class="fas fa-th-large"></i>
                    Available Products
                </h3>
                <input type="text" id="product-search" class="form-control-cashier" style="max-width: 420px; width: 100%;" placeholder="Search products...">
            </div>

            <div class="cashier-product-grid" id="products-grid">
                @forelse($products as $product)
                    <div class="product-item" data-name="{{ strtolower($product->name) }}">
                    <div class="cashier-product-item"
                        onclick='addToCart({{ $product->prod_id }}, @json($product->name), {{ $product->price }}, {!! ($product->inventoryStock && $product->inventoryStock->quantity !== null) ? $product->inventoryStock->quantity : 'null' !!})'>
                            <div class="product-header">
                                <h6 class="mb-1">{{ $product->name }}</h6>
                            </div>
                            <div class="product-details">
                                <div class="price text-primary">₱{{ number_format($product->price, 2) }}</div>
                                <div class="stock-info mt-1">
                                    @if((optional($product->inventoryStock)->quantity ?? 0) > 0)
                                        <span class="badge-chip badge-sea-light">
                                            <i class="fas fa-check-circle me-1"></i>
                                            {{ optional($product->inventoryStock)->quantity }} in stock
                                        </span>
                                    @else
                                        <span class="badge-chip badge-sea-info">
                                            <i class="fas fa-times-circle me-1"></i>
                                            Out of stock
                                        </span>
                                    @endif
                                </div>
                            </div>
                        </div>
                    </div>
                @empty
                    <div class="text-center py-5">
                        <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No products available</p>
                    </div>
                @endforelse
            </div>
        </div>
    </div>

    <!-- Cart Section -->
    <div class="cart-section">
        <div class="content-card">
            <div class="content-card-header">
                <h3 class="content-card-title">
                    <i class="fas fa-shopping-cart"></i>
                    Current Order
                </h3>
            </div>

            <div id="cart-items" class="mb-3" style="max-height: 300px; overflow-y: auto;">
                <div class="text-center text-muted py-4" id="empty-cart">
                    <i class="fas fa-shopping-cart fa-2x mb-2"></i>
                    <p class="mb-0">Cart is empty</p>
                </div>
            </div>

            <hr>

            <div class="mb-3">
                <div class="d-flex justify-content-between mb-2">
                    <span class="text-muted">Subtotal:</span>
                    <strong id="subtotal">₱0.00</strong>
                </div>
                <div class="d-flex justify-content-between mb-2">
                    <span class="text-muted">VAT ({{ config('vat.vat_rate', 12) }}%):</span>
                    <strong id="vat-amount">₱0.00</strong>
                </div>
                <hr>
                <div class="d-flex justify-content-between">
                    <h5 class="mb-0">Total:</h5>
                    <h5 class="mb-0 text-primary" id="total">₱0.00</h5>
                </div>
            </div>

            <hr>

            <!-- Payment Section -->
            <div class="mb-3">
                <label class="form-label-cashier">Cash Received</label>
                <div class="input-group">
                    <span class="input-group-text">₱</span>
                    <input type="number" 
                           id="cash-received" 
                           class="form-control-cashier" 
                           placeholder="0.00" 
                           step="0.01" 
                           min="0"
                           oninput="calculateChange()">
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label-cashier">Change</label>
                <div class="p-3 text-center bg-light border rounded">
                    <h3 class="mb-0 fw-bold" id="change-amount">₱0.00</h3>
                </div>
                <small id="change-warning" class="text-danger d-none mt-1 d-block">
                    <i class="fas fa-exclamation-triangle me-1"></i> Insufficient cash
                </small>
            </div>

            <hr>

            <form id="checkout-form" action="{{ route('cashier.pos.checkout') }}" method="POST">
                @csrf
                <input type="hidden" name="cart" id="cart-data">
                <input type="hidden" name="cash_given" id="cash-given-hidden">
                <input type="hidden" name="change" id="change-hidden">
                
                <div class="mb-3">
                    <label class="form-label-cashier">Order Type</label>
                    <select name="order_type" class="form-control-cashier" required>
                        <option value="dine_in">Dine In</option>
                        <option value="takeout" selected>Takeout</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label class="form-label-cashier">Notes (Optional)</label>
                    <textarea name="notes" class="form-control-cashier" rows="2" placeholder="Order notes..."></textarea>
                </div>

                <div class="d-grid gap-2">
                    <button type="submit" class="btn-admin-primary" id="checkout-btn" disabled>
                        <i class="fas fa-credit-card me-1"></i>
                        Complete Sale
                    </button>
                    <div class="d-flex justify-content-center">
                        <button type="button" class="btn-admin-light d-flex flex-row align-items-center justify-content-center" onclick="clearCart()">
                            <i class="fas fa-trash me-2"></i>
                            <span>Clear Cart</span>
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
@endsection

@section('extra-js')
<script>
let cart = [];
const VAT_RATE = {{ config('vat.vat_rate', 12) }};

// Ensure hidden fields are updated before form submit
document.addEventListener('DOMContentLoaded', function() {
    const checkoutForm = document.getElementById('checkout-form');
    if (checkoutForm) {
        checkoutForm.addEventListener('submit', function(e) {
            // Always update totals and hidden fields before submit
            updateTotals();
        });
    }
});

function addToCart(prodId, prodName, price, stock) {
    console.log('✅ Adding to cart:', {prodId, prodName, price, stock});
    
    // Parse values properly
    const productId = parseInt(prodId);
    const productPrice = parseFloat(price);
    const productStock = stock === null || stock === undefined ? 999999 : parseInt(stock);
    
    // Block if out of stock
    if (productStock <= 0) {
        alert('Product is out of stock!');
        return;
    }

    // Find existing item
    const existingItem = cart.find(item => parseInt(item.prod_id) === productId);
    
    if (existingItem) {
        // Item exists - increase quantity
        if (productStock !== 999999 && existingItem.quantity >= productStock) {
            alert('Cannot add more than available stock!');
            return;
        }
        existingItem.quantity++;
        console.log('✅ Increased quantity for existing item');
    } else {
        // New item - add to cart
        cart.push({
            prod_id: productId,
            prod_name: prodName,
            price: productPrice,
            quantity: 1,
            stock: productStock
        });
        console.log('✅ Added new item to cart');
    }

    updateCartDisplay();
    updateTotals();
}

function removeFromCart(prodId) {
    console.log('🗑️ Removing from cart:', prodId);
    const productId = parseInt(prodId);
    const initialLength = cart.length;
    cart = cart.filter(item => parseInt(item.prod_id) !== productId);
    console.log(`✅ Cart length: ${initialLength} → ${cart.length}`);
    updateCartDisplay();
    updateTotals();
}

function updateQuantity(prodId, change) {
    console.log('🔄 Updating quantity:', {prodId, change});
    const productId = parseInt(prodId);
    const item = cart.find(item => parseInt(item.prod_id) === productId);
    
    if (item) {
        const newQuantity = item.quantity + change;
        console.log(`Quantity will change: ${item.quantity} → ${newQuantity}`);
        
        if (newQuantity <= 0) {
            // Remove item if quantity becomes 0 or negative
            removeFromCart(prodId);
        } else if (item.stock === 999999 || newQuantity <= item.stock) {
            // Update quantity if within stock limits
            item.quantity = newQuantity;
            console.log('✅ Quantity updated successfully');
            updateCartDisplay();
            updateTotals();
        } else {
            alert(`Cannot exceed available stock of ${item.stock}!`);
        }
    } else {
        console.log('❌ Item not found in cart');
    }
}

function setQuantity(prodId, value) {
    console.log('📝 Setting quantity manually:', {prodId, value});
    const productId = parseInt(prodId);
    const newQuantity = parseInt(value);
    const item = cart.find(item => parseInt(item.prod_id) === productId);
    
    if (!item) {
        console.log('❌ Item not found in cart');
        return;
    }
    
    // Validate quantity
    if (isNaN(newQuantity) || newQuantity < 1) {
        alert('Please enter a valid quantity (minimum 1)');
        updateCartDisplay(); // Reset to previous value
        return;
    }
    
    if (item.stock !== 999999 && newQuantity > item.stock) {
        alert(`Cannot exceed available stock of ${item.stock}!`);
        updateCartDisplay(); // Reset to previous value
        return;
    }
    
    // Update quantity
    item.quantity = newQuantity;
    console.log('✅ Quantity set to:', newQuantity);
    updateCartDisplay();
    updateTotals();
}

function updateCartDisplay() {
    const cartItemsDiv = document.getElementById('cart-items');
    const emptyCart = document.getElementById('empty-cart');
    
    if (cart.length === 0) {
        // Show empty cart message
        if (emptyCart) {
            emptyCart.style.display = 'block';
            cartItemsDiv.innerHTML = '';
            cartItemsDiv.appendChild(emptyCart);
        } else {
            cartItemsDiv.innerHTML = '<div class="text-center text-muted py-4"><i class="fas fa-shopping-cart fa-2x mb-2"></i><p class="mb-0">Cart is empty</p></div>';
        }
        document.getElementById('checkout-btn').disabled = true;
    } else {
        // Hide empty cart message
        if (emptyCart) {
            emptyCart.style.display = 'none';
        }
        cartItemsDiv.innerHTML = '';
        
        // Render cart items
        cart.forEach(item => {
            const itemDiv = document.createElement('div');
            itemDiv.className = 'cart-item mb-3 p-3 border rounded bg-light';
            itemDiv.innerHTML = `
                <div class="row align-items-center">
                    <div class="col-7">
                        <h5 class="mb-1 fw-bold text-dark">${item.prod_name}</h5>
                        <small class="text-muted">₱${item.price.toFixed(2)} each</small>
                    </div>
                    <div class="col-5 d-flex justify-content-end align-items-center gap-2">
                        <div class="btn-group align-items-center" role="group" style="gap: 8px;">
                            <button type="button" class="btn-admin-light btn-sm d-flex align-items-center justify-content-center"
                                onclick="updateQuantity(${item.prod_id}, -1)"
                                style="width: 36px; height: 36px; padding: 0;">
                                <i class="fas fa-minus"></i>
                            </button>
                            <input type="number" 
                                class="form-control form-control-sm text-center" 
                                value="${item.quantity}" 
                                min="1" 
                                max="${item.stock === 999999 ? 9999 : item.stock}"
                                onchange="setQuantity(${item.prod_id}, this.value)"
                                onclick="this.select()"
                                style="width: 60px; height: 36px; padding: 0; margin: 0 5px; font-weight: bold;">
                            <button type="button" class="btn-admin-light btn-sm d-flex align-items-center justify-content-center"
                                onclick="updateQuantity(${item.prod_id}, 1)"
                                style="width: 36px; height: 36px; padding: 0;">
                                <i class="fas fa-plus"></i>
                            </button>
                            <button type="button" class="btn-admin-warning btn-sm d-flex align-items-center justify-content-center"
                                onclick="removeFromCart(${item.prod_id})" title="Remove"
                                style="width: 36px; height: 36px; padding: 0; margin-left: 5px;">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="d-flex justify-content-between align-items-center mt-2">
                    <div style="width: 70%;"></div>
                    <div style="width: 30%;" class="text-end">
                        <strong class="text-success fs-5">₱${(item.price * item.quantity).toFixed(2)}</strong>
                    </div>
                </div>
            `;
            cartItemsDiv.appendChild(itemDiv);
        });
        
        document.getElementById('checkout-btn').disabled = false;
    }
}

function updateTotals() {
    const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const vatAmount = +(subtotal * (VAT_RATE / 100)).toFixed(2);
    const total = +(subtotal + vatAmount).toFixed(2);

    document.getElementById('subtotal').textContent = '₱' + subtotal.toFixed(2);
    document.getElementById('vat-amount').textContent = '₱' + vatAmount.toFixed(2);
    document.getElementById('total').textContent = '₱' + total.toFixed(2);

    // Update hidden form data
    document.getElementById('cart-data').value = JSON.stringify(cart);
    // Also update cash_given and change hidden fields
    const cashInput = document.getElementById('cash-received');
    const cashGiven = parseFloat(cashInput.value) || 0;
    const change = +(cashGiven - total).toFixed(2);
    document.getElementById('cash-given-hidden').value = cashGiven.toFixed(2);
    document.getElementById('change-hidden').value = change >= 0 ? change.toFixed(2) : '0.00';

    // Recalculate change when total changes
    calculateChange();

    console.log('💰 Totals updated:', {subtotal: subtotal.toFixed(2), vat: vatAmount.toFixed(2), total: total.toFixed(2), cash_given: cashGiven.toFixed(2), change: (change >= 0 ? change.toFixed(2) : '0.00'), items: cart.length});
}

function calculateChange() {
    const totalElement = document.getElementById('total');
    const cashInput = document.getElementById('cash-received');
    const changeDisplay = document.getElementById('change-amount');
    const checkoutBtn = document.getElementById('checkout-btn');
    const warningText = document.getElementById('change-warning');
    
    if (!totalElement || !cashInput || !changeDisplay || !checkoutBtn) return;
    
    // Get total amount (remove ₱ and parse)
    const total = parseFloat(totalElement.textContent.replace('₱', '').replace(',', ''));
    const cashReceived = parseFloat(cashInput.value) || 0;
    
    // Calculate change
    const change = cashReceived - total;
    
    if (cashReceived === 0) {
        // No cash entered yet
        changeDisplay.textContent = '₱0.00';
        changeDisplay.style.color = '#6c757d';
        warningText.classList.add('d-none');
        checkoutBtn.disabled = cart.length === 0;
    } else if (change < 0) {
        // Insufficient cash
        changeDisplay.textContent = '₱' + Math.abs(change).toFixed(2);
        changeDisplay.style.color = '#dc3545';
        warningText.classList.remove('d-none');
        checkoutBtn.disabled = true;
    } else {
        // Sufficient cash
        changeDisplay.textContent = '₱' + change.toFixed(2);
        changeDisplay.style.color = '#28a745';
        warningText.classList.add('d-none');
        checkoutBtn.disabled = cart.length === 0;
    }
}

function clearCart() {
    if (confirm('Are you sure you want to clear the cart?')) {
        cart = [];
        console.log('🧹 Cart cleared');
        
        // Reset cash input
        const cashInput = document.getElementById('cash-received');
        if (cashInput) cashInput.value = '';
        
        updateCartDisplay();
        updateTotals();
    }
}

// Product search functionality
document.getElementById('product-search').addEventListener('input', function(e) {
    const searchTerm = e.target.value.toLowerCase();
    const productItems = document.querySelectorAll('.product-item');
    
    productItems.forEach(item => {
        const name = item.getAttribute('data-name') || '';
        if (name.includes(searchTerm)) {
            item.style.display = '';
        } else {
            item.style.display = 'none';
        }
    });
});

// Initialize cart when page loads
document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 POS System initialized');
    updateCartDisplay();
    updateTotals();
});

// Initialize immediately
updateCartDisplay();
updateTotals();
</script>
@endsection


--- End of File ---

File: .\resources\views\cashier\sales\index.blade.php
@extends('layouts.cashier')

@section('title', 'Sales History')

@section('content')
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="page-title">
                <i class="fas fa-receipt"></i>
                Sales History
            </h1>
            <p class="page-subtitle">View and manage your sales transactions</p>
        </div>
        <a href="{{ route('cashier.pos.index') }}" class="btn-admin-primary">
            <i class="fas fa-plus-circle"></i>
            New Sale
        </a>
    </div>
</div>

<!-- Filters -->
<div class="filter-section">
    <form action="{{ route('cashier.sales.index') }}" method="GET">
        <div class="filter-row">
            <div class="filter-group">
                <label class="form-label-cashier">Start Date</label>
                <input type="date" name="start_date" class="form-control-cashier" value="{{ request('start_date') }}">
            </div>
            <div class="filter-group">
                <label class="form-label-cashier">End Date</label>
                <input type="date" name="end_date" class="form-control-cashier" value="{{ request('end_date') }}">
            </div>
            <div class="filter-group">
                <label class="form-label-cashier">Search</label>
                <input type="text" name="search" class="form-control-cashier" placeholder="Order number..." value="{{ request('search') }}">
            </div>
            <div class="filter-group" style="flex: 0 0 auto;">
                <button type="submit" class="btn-admin-secondary">
                    <i class="fas fa-filter"></i>
                    Filter
                </button>
            </div>
        </div>
    </form>
</div>

<!-- Sales Table -->
<div class="content-card w-100">
    <div class="content-card-header">
        <h3 class="content-card-title">
            <i class="fas fa-list"></i>
            Your Sales ({{ $sales->total() }} records)
        </h3>
    </div>

    @if($sales->count() > 0)
        <div class="table-responsive w-100">
            <table class="table-cashier w-100">
                <thead>
                    <tr>
                        <th>Order #</th>
                        <th>Date & Time</th>
                        <th>Order Type</th>
                        <th>Items</th>
                        <th>Total Amount</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach($sales as $sale)
                        <tr>
                            <td>
                                <strong class="text-primary">{{ $sale->order_number }}</strong>
                            </td>
                            <td>
                                <small>
                                    <i class="fas fa-calendar-alt me-1"></i>
                                    {{ \Carbon\Carbon::parse($sale->order_date)->format('M j, Y') }}
                                    <br>
                                    <i class="fas fa-clock me-1"></i>
                                    {{ $sale->created_at->format('g:i A') }}
                                </small>
                            </td>
                            <td>
                                <span class="badge-chip {{ strtolower($sale->order_type) == 'dine_in' ? 'badge-sea-light' : 'badge-sea-primary' }}">
                                    @if($sale->order_type == 'dine_in')
                                        <i class="fas fa-utensils me-1"></i> Dine In
                                    @elseif($sale->order_type == 'takeout')
                                        <i class="fas fa-shopping-bag me-1"></i> Takeout
                                    @else
                                        <i class="fas fa-question me-1"></i> {{ ucfirst($sale->order_type) }}
                                    @endif
                                </span>
                            </td>
                            <td>
                                <span class="badge bg-secondary">{{ $sale->items->count() }} items</span>
                            </td>
                            <td>
                                <strong class="text-primary">₱{{ number_format($sale->total_amount, 2) }}</strong>
                            </td>
                            <td>
                                <a href="{{ route('cashier.sales.show', $sale->so_id) }}" 
                                   class="btn-admin-light">
                                    <i class="fas fa-eye"></i> View
                                </a>
                            </td>
                        </tr>
                    @endforeach
                </tbody>
            </table>
        </div>

        @if($sales->hasPages())
            <div class="mt-3">
                {{ $sales->links('vendor.pagination.admin') }}
            </div>
        @endif
    @else
        <div class="text-center py-5">
            <i class="fas fa-receipt fa-3x text-muted mb-3"></i>
            <p class="text-muted mb-3">No sales records found</p>
            <a href="{{ route('cashier.pos.index') }}" class="btn-admin-primary">
                <i class="fas fa-plus-circle"></i>
                Create Your First Sale
            </a>
        </div>
    @endif
</div>

@endsection


--- End of File ---

File: .\resources\views\cashier\sales\receipt_pdf.blade.php
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Receipt - Arbee's Bakeshop</title>
    <style>
        body { font-family: DejaVu Sans, Arial, Helvetica, sans-serif; font-size: 12px; color: #222; margin: 0; padding: 0; }
        .receipt-container { width: 340px; margin: 0 auto; padding: 18px 12px; background: #fff; border: 1px solid #eee; border-radius: 8px; }
        .logo { text-align: center; margin-bottom: 10px; }
        .logo img { height: 60px; border-radius: 50%; border: 2px solid #222; }
        .shop-title { text-align: center; font-size: 1.3em; font-weight: bold; margin-bottom: 2px; letter-spacing: 1px; }
        .shop-address { text-align: center; font-size: 11px; color: #666; margin-bottom: 10px; }
        .receipt-title { text-align: center; font-size: 1.1em; font-weight: bold; margin: 10px 0 8px; }
        .info-table, .summary-table { width: 100%; margin-bottom: 10px; }
        .info-table td { font-size: 11px; padding: 2px 0; }
        .summary-table td { font-size: 12px; padding: 3px 0; }
        .summary-table .label { text-align: left; color: #555; }
        .summary-table .value { text-align: right; font-weight: bold; }
        .items-table { width: 100%; border-collapse: collapse; margin-bottom: 10px; }
        .items-table th, .items-table td { font-size: 11px; padding: 3px 2px; border-bottom: 1px dashed #ccc; }
        .items-table th { text-align: left; font-weight: bold; background: #f7f7f7; }
        .items-table td.qty, .items-table td.price, .items-table td.total { text-align: right; }
        .footer { text-align: center; font-size: 10px; color: #888; margin-top: 12px; }
    </style>
</head>
<body>
<div class="receipt-container">
    <div class="logo">
        <img src="{{ public_path('images/Arbee\'s_logo_round.png') }}" alt="Arbee's Logo">
    </div>
    <div class="shop-title">Arbee's Bakeshop</div>
    <div class="shop-address">Brgy 76-A, New Matina, Bucana, Davao City<br>VAT Reg TIN: 123-456-789-000</div>
    <div class="receipt-title">OFFICIAL RECEIPT</div>
    <table class="info-table">
        <tr><td>Order #:</td><td>{{ $sale->order_number }}</td></tr>
        <tr><td>Date:</td><td>{{ $sale->order_date }}</td></tr>
        <tr><td>Time:</td><td>{{ $sale->created_at->format('g:i A') }}</td></tr>
        <tr><td>Cashier:</td><td>{{ $sale->cashier->first_name ?? 'N/A' }} {{ $sale->cashier->last_name ?? '' }}</td></tr>
        <tr><td>Order Type:</td><td>{{ ucfirst(str_replace('_',' ', $sale->order_type)) }}</td></tr>
    </table>
    <table class="items-table">
        <thead>
        <tr><th>Item</th><th class="qty">Qty</th><th class="price">Price</th><th class="total">Total</th></tr>
        </thead>
        <tbody>
        @foreach($sale->items as $item)
            <tr>
                <td>{{ $item->product->name ?? 'N/A' }}</td>
                <td class="qty">{{ $item->quantity }}</td>
                <td class="price">₱{{ number_format($item->unit_price, 2) }}</td>
                <td class="total">₱{{ number_format($item->unit_price * $item->quantity, 2) }}</td>
            </tr>
        @endforeach
        </tbody>
    </table>
    <table class="summary-table">
        <tr><td class="label">Subtotal:</td><td class="value">₱{{ number_format($sale->subtotal, 2) }}</td></tr>
        <tr><td class="label">VAT ({{ config('vat.vat_rate', 12) }}%):</td><td class="value">₱{{ number_format($sale->vat_amount, 2) }}</td></tr>
        <tr><td class="label">Total:</td><td class="value">₱{{ number_format($sale->total_amount, 2) }}</td></tr>
        <tr><td class="label">Amount Paid:</td><td class="value">₱{{ number_format($sale->cash_given, 2) }}</td></tr>
        <tr><td class="label">Change:</td><td class="value">₱{{ number_format($sale->change, 2) }}</td></tr>
        <tr><td class="label">Payment:</td><td class="value">{{ ucfirst($sale->payment_method ?? 'Cash') }}</td></tr>
    </table>
    <div class="footer">
        Thank you for your purchase!<br>
        This serves as your official receipt.<br>
        <b>Arbee's Bakeshop</b>
    </div>
</div>
</body>
</html>


--- End of File ---

File: .\resources\views\cashier\sales\show.blade.php
@extends('layouts.cashier')

@section('title', 'Sale Details')

@section('content')
<div class="d-flex justify-content-between align-items-center mb-4">
    <a href="{{ route('cashier.sales.index') }}" class="btn-admin-light">
        <i class="fas fa-arrow-left me-2"></i>
        Back to Sales
    </a>
    <h1 class="h3 mb-0 text-muted-sea">
        <i class="fas fa-receipt"></i>
        Sale Details
    </h1>
    <div></div>
</div>

<div class="row">
    <!-- Order Information -->
    <div class="col-md-8">
        <div class="content-card mb-4">
            <div class="content-card-header">
                <h3 class="content-card-title">
                    <i class="fas fa-info-circle"></i>
                    Order Information
                </h3>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <table class="table table-borderless">
                        <tr>
                            <td class="text-muted">Order Number:</td>
                            <td><strong>{{ $sale->order_number }}</strong></td>
                        </tr>
                        <tr>
                            <td class="text-muted">Order Date:</td>
                            <td>{{ \Carbon\Carbon::parse($sale->order_date)->format('F j, Y') }}</td>
                        </tr>
                        <tr>
                            <td class="text-muted">Order Time:</td>
                            <td>{{ $sale->created_at->format('g:i A') }}</td>
                        </tr>
                        <tr>
                            <td class="text-muted">Order Type:</td>
                            <td>
                                <span class="badge-chip {{ strtolower($sale->order_type) == 'delivery' ? 'badge-sea-secondary' : (strtolower($sale->order_type) == 'dine_in' ? 'badge-sea-light' : 'badge-sea-primary') }}">
                                    {{ ucfirst(str_replace('_', ' ', $sale->order_type)) }}
                                </span>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="col-md-6">
                    <table class="table table-borderless">
                        <tr>
                            <td class="text-muted">Customer:</td>
                            <td>{{ $sale->customer_name ?? 'Walk-in Customer' }}</td>
                        </tr>
                        <tr>
                            <td class="text-muted">Cashier:</td>
                            <td>{{ $sale->cashier->first_name ?? 'N/A' }} {{ $sale->cashier->last_name ?? '' }}</td>
                        </tr>
                        <tr>
                            <td class="text-muted">Status:</td>
                            <td>
                                @php $status = strtolower($sale->status ?? 'pending'); @endphp
                                <span class="badge-chip {{ $status === 'completed' ? 'badge-sea-light' : ($status === 'cancelled' ? 'badge-sea-primary' : 'badge-sea-secondary') }}">
                                    {{ ucfirst($status) }}
                                </span>
                            </td>
                        </tr>
                        <tr>
                            <td class="text-muted">Payment Method:</td>
                            <td>{{ ucfirst($sale->payment_method ?? 'Cash') }}</td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>

        <!-- Order Items -->
        <div class="cashier-card">
            <h5 class="mb-3">
                <i class="fas fa-box me-2"></i>
                Order Items
            </h5>

            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>#</th>
                            <th>Product</th>
                            <th>Category</th>
                            <th>Unit Price</th>
                            <th>Quantity</th>
                            <th>Subtotal</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($sale->items as $index => $item)
                            <tr>
                                <td>{{ $index + 1 }}</td>
                                <td>
                                    <strong>{{ $item->product->name ?? 'N/A' }}</strong>
                                </td>
                                <td>
                                    <span class="badge-chip badge-sea-light">
                                        {{ $item->product->category->cat_name ?? 'N/A' }}
                                    </span>
                                </td>
                                <td>₱{{ number_format($item->unit_price, 2) }}</td>
                                <td>
                                    <span class="badge-chip badge-sea-primary">{{ $item->quantity }}</span>
                                </td>
                                <td>
                                    <strong>₱{{ number_format($item->unit_price * $item->quantity, 2) }}</strong>
                                </td>
                            </tr>
                        @endforeach
                    </tbody>
                    <tfoot class="table-light">
                        <tr>
                            <td colspan="5" class="text-end"><strong>Total Items:</strong></td>
                            <td><strong>{{ $sale->items->sum('quantity') }}</strong></td>
                        </tr>
                        <tr>
                            <td colspan="5" class="text-end"><h5 class="mb-0">Total Amount:</h5></td>
                            <td><h5 class="mb-0 text-primary">₱{{ number_format($sale->total_amount, 2) }}</h5></td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>

    <!-- Summary Card -->
    <div class="col-md-4">
        <div class="cashier-card mb-4">
            <h5 class="mb-3">
                <i class="fas fa-calculator me-2"></i>
                Order Summary
            </h5>

            <div class="d-flex justify-content-between mb-2">
                <span class="text-muted">Subtotal:</span>
                <strong>₱{{ number_format($sale->subtotal, 2) }}</strong>
            </div>
            <div class="d-flex justify-content-between mb-2">
                <span class="text-muted">VAT ({{ config('vat.vat_rate', 12) }}%):</span>
                <strong>₱{{ number_format($sale->vat_amount, 2) }}</strong>
            </div>
            <div class="d-flex justify-content-between mb-2">
                <span class="text-muted">Discount:</span>
                <strong>₱{{ number_format($sale->discount ?? 0, 2) }}</strong>
            </div>
            <div class="d-flex justify-content-between mb-2">
                <span class="text-muted">Amount Paid:</span>
                <strong>₱{{ number_format($sale->cash_given, 2) }}</strong>
            </div>
            <div class="d-flex justify-content-between mb-2">
                <span class="text-muted">Change:</span>
                <strong>₱{{ number_format($sale->change, 2) }}</strong>
            </div>
            <hr>
            <div class="d-flex justify-content-between">
                <h5 class="mb-0">Total:</h5>
                <h5 class="mb-0 text-primary">₱{{ number_format($sale->total_amount, 2) }}</h5>
            </div>

            <hr>

            <div class="d-grid gap-2">
                <a href="{{ route('cashier.sales.receipt.pdf', $sale->so_id) }}" class="btn-admin-warning" target="_blank">
                    <i class="fas fa-file-pdf me-2"></i>
                    Download PDF Receipt
                </a>
                <button class="btn-admin-light" onclick="window.print()">
                    <i class="fas fa-print me-2"></i>
                    Print (Browser)
                </button>
                <button type="button" class="btn-admin-light" onclick="window.location='{{ route('cashier.sales.index') }}'">
                    <i class="fas fa-list me-2"></i>
                    Back to List
                </button>
            </div>
        </div>

        <!-- Quick Stats -->
        <div class="cashier-card">
            <h6 class="mb-3 text-muted">Quick Stats</h6>
            <div class="mb-3">
                <small class="text-muted d-block">Total Items</small>
                <h4 class="mb-0">{{ $sale->items->sum('quantity') }}</h4>
            </div>
            <div class="mb-3">
                <small class="text-muted d-block">Unique Products</small>
                <h4 class="mb-0">{{ $sale->items->count() }}</h4>
            </div>
            <div>
                <small class="text-muted d-block">Average Item Price</small>
                <h4 class="mb-0">₱{{ number_format($sale->items->avg('unit_price'), 2) }}</h4>
            </div>
        </div>
    </div>
</div>
@endsection

@section('extra-css')
<style>
@media print {
    .cashier-header,
    .cashier-nav,
    .cashier-footer,
    .cashier-btn,
    .btn {
        display: none !important;
    }
    
    .cashier-card {
        box-shadow: none !important;
        border: 1px solid #ddd;
    }
}
</style>
@endsection


--- End of File ---

File: .\resources\views\layouts\admin.blade.php
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>Arbees Bakeshop - @yield('title')</title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="{{ asset('favicon.ico') }}">
    <link rel="icon" type="image/png" sizes="32x32" href="{{ asset('images/Arbee\'s_logo_round.png') }}">
    <link rel="icon" type="image/png" sizes="16x16" href="{{ asset('images/Arbee\'s_logo_round.png') }}">
    <link rel="apple-touch-icon" sizes="180x180" href="{{ asset('images/Arbee\'s_logo_round.png') }}">
    
    <link rel="stylesheet" href="/css/app.css">
    <link rel="stylesheet" href="/css/sea-styles.css">
    <link rel="stylesheet" href="/css/admin-styles.css">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- FontAwesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="admin-wrapper">
        <!-- Left Sidebar -->
        <div class="admin-sidebar" id="adminSidebar">
            <div class="sidebar-header">
                <div class="sidebar-brand-container">
                    <div class="sidebar-brand" onclick="toggleSidebarCollapse()">
                        <img src="{{ asset('images/Arbee\'s_Logo.png') }}" alt="Arbee's Logo">
                        <div class="brand-text text-white">
                            <div>Arbees Bakeshop</div>
                            <small class="text-muted-sea" style="color: #EEF5DB !important;">Admin Panel</small>
                        </div>
                    </div>
                </div>
            </div>
            
            <nav class="sidebar-nav">
                <!-- Dashboard -->
                <div class="nav-section">
                    <div class="nav-item">
                        <a href="{{ route('admin.dashboard') }}" class="nav-link {{ Request::is('admin/dashboard') ? 'active' : '' }}" data-title="Dashboard">
                            <i class="fas fa-tachometer-alt nav-icon"></i>
                            <span>Dashboard</span>
                        </a>
                    </div>
                </div>
                
                <!-- User Management -->
                <div class="nav-section">
                    <div class="nav-section-title">User & Employee Management</div>
                    <div class="nav-item">
                        <a href="{{ route('admin.users.index') }}" class="nav-link {{ (Request::is('admin/users*') && !Request::is('admin/users/pending')) ? 'active' : '' }}" data-title="User Management">
                            <i class="fas fa-users nav-icon"></i>
                            <span>User Management</span>
                        </a>
                        <div class="nav-subitem ms-4">
                            @if(\App\Models\User::where('status', 'pending')->count() > 0)
                                <span class="badge bg-warning text-dark ms-2">{{ \App\Models\User::where('status', 'pending')->count() }}</span>
                            @endif
                        </div>
                    </div>
                    <div class="nav-item">
                        <a href="{{ route('admin.employees.index') }}" class="nav-link {{ Request::is('admin/employees*') ? 'active' : '' }}" data-title="Employee Management">
                            <i class="fas fa-id-badge nav-icon"></i>
                            <span>Employee Management</span>
                        </a>
                    </div>
                </div>
                
                <!-- Product Management -->
                <div class="nav-section">
                    <div class="nav-section-title">Product & Inventory</div>
                    <div class="nav-item">
                        <a href="{{ route('admin.products.index') }}" class="nav-link {{ Request::is('admin/products*') ? 'active' : '' }}" data-title="Product Management">
                            <i class="fas fa-box nav-icon"></i>
                            <span>Product Management</span>
                        </a>
                    </div>
                    <div class="nav-item">
                        <a href="{{ route('admin.categories.index') }}" class="nav-link {{ Request::is('admin/categories*') ? 'active' : '' }}" data-title="Categories">
                            <i class="fas fa-tags nav-icon"></i>
                            <span>Categories</span>
                        </a>
                    </div>
                    <div class="nav-item">
                        <a href="{{ route('admin.inventory.index') }}" class="nav-link {{ Request::is('admin/inventory') || Request::is('admin/inventory/create') || Request::is('admin/inventory/*/edit') || (Request::is('admin/inventory/*') && !Request::is('admin/inventory-reports*')) ? 'active' : '' }}" data-title="Inventory Management">
                            <i class="fas fa-warehouse nav-icon"></i>
                            <span>Inventory Management</span>
                        </a>
                    </div>
                </div>
                
                <!-- Operations -->
                <div class="nav-section">
                    <div class="nav-section-title">Operations</div>
                    <div class="nav-item">
                        <a href="{{ route('admin.productions.index') }}" class="nav-link {{ Request::is('admin/productions*') ? 'active' : '' }}" data-title="Production">
                            <i class="fas fa-bread-slice nav-icon"></i>
                            <span>Production</span>
                        </a>
                    </div>
                    <div class="nav-item">
                        <a href="{{ route('admin.sales.index') }}" class="nav-link {{ Request::is('admin/sales') || Request::is('admin/sales/create') || Request::is('admin/sales/*/edit') || preg_match('/^admin\/sales\/\d+$/', Request::path()) ? 'active' : '' }}" data-title="Sales Management">
                            <i class="fas fa-cash-register nav-icon"></i>
                            <span>Sales Management</span>
                        </a>
                    </div>
                </div>
                
                <!-- Reports & Analytics -->
                <div class="nav-section">
                    <div class="nav-section-title">Reports & Analytics</div>
                    <div class="nav-item">
                        <a href="{{ route('admin.sales-reports.index') }}" class="nav-link {{ Request::is('admin/sales-reports*') ? 'active' : '' }}" data-title="Sales Reports">
                            <i class="fas fa-chart-line nav-icon"></i>
                            <span>Sales Reports</span>
                        </a>
                    </div>
                    <div class="nav-item">
                        <a href="{{ route('admin.inventory-reports.index') }}" class="nav-link {{ Request::is('admin/inventory-reports*') ? 'active' : '' }}" data-title="Inventory Reports">
                            <i class="fas fa-chart-pie nav-icon"></i>
                            <span>Inventory Reports</span>
                        </a>
                    </div>
                    <div class="nav-item">
                        <a href="{{ route('admin.analytics.index') }}" class="nav-link {{ Request::is('admin/analytics*') ? 'active' : '' }}" data-title="Analytics Dashboard">
                            <i class="fas fa-chart-line nav-icon"></i>
                            <span>Analytics Dashboard</span>
                        </a>
                    </div>
                </div>
                
                <!-- System -->
                <div class="nav-section">
                    <div class="nav-section-title">System</div>
                    <div class="nav-item">
                        <a href="{{ route('admin.audit-logs.index') }}" class="nav-link {{ Request::is('admin/audit-logs*') ? 'active' : '' }}" data-title="Audit Logs">
                            <i class="fas fa-history nav-icon"></i>
                            <span>Audit Logs</span>
                        </a>
                    </div>
                    <div class="nav-item">
                        <a href="{{ route('admin.settings.index') }}" class="nav-link {{ Request::is('admin/settings*') ? 'active' : '' }}" data-title="System Settings">
                            <i class="fas fa-cog nav-icon"></i>
                            <span>System Settings</span>
                        </a>
                    </div>
                    <div class="nav-item">
                        <a href="{{ route('admin.backup.index') }}" class="nav-link {{ Request::is('admin/backup*') ? 'active' : '' }}" data-title="Backup & Restore">
                            <i class="fas fa-database nav-icon"></i>
                            <span>Backup & Restore</span>
                        </a>
                    </div>
                </div>
            </nav>
        </div>

        <!-- Early restore of sidebar scroll to prevent visible jump -->
        <script>
            (function() {
                try {
                    var sidebar = document.getElementById('adminSidebar');
                    if (sidebar) {
                        var saved = parseInt(localStorage.getItem('sidebarScrollTop') || '0', 10);
                        if (!isNaN(saved) && saved >= 0) {
                            sidebar.scrollTop = saved;
                        }
                        // Also restore collapsed state as early as possible
                        var collapsed = localStorage.getItem('sidebarCollapsed') === 'true';
                        if (collapsed) {
                            sidebar.classList.add('collapsed');
                            var adminMain = document.querySelector('.admin-main');
                            if (adminMain) adminMain.classList.add('sidebar-collapsed');
                        }
                    }
                } catch (e) {}
            })();
        </script>

        <!-- Main Content Area -->
        <div class="admin-main">
            <!-- Top Header -->
            <header class="admin-header">
                <div class="header-left">
                    <button class="mobile-toggle" onclick="toggleSidebar()">
                        <i class="fas fa-bars"></i>
                    </button>
                </div>
                <h1 class="page-title">@yield('page-title', 'Dashboard')</h1>
                <div class="header-right">
                    <div class="user-info">
                        <span class="user-name">{{ Auth::user()->employee ? Auth::user()->employee->first_name . ' ' . Auth::user()->employee->last_name : Auth::user()->username }}</span>
                        <span class="role-badge">ADMIN</span>
                    </div>
                    <form method="POST" action="{{ route('logout') }}" class="d-inline">
                        @csrf
                        <button type="submit" class="logout-btn">
                            <i class="fas fa-sign-out-alt"></i> Logout
                        </button>
                    </form>
                </div>
            </header>

            <!-- Main Content -->
            <main class="admin-content">
                <!-- Flash Messages -->
                @if(session('success'))
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <i class="fas fa-check-circle"></i> {{ session('success') }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                @endif

                @if(session('error'))
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="fas fa-exclamation-circle"></i> {{ session('error') }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                @endif

                @if($errors->any())
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="fas fa-exclamation-circle"></i>
                        <strong>Please fix the following errors:</strong>
                        <ul class="mb-0 mt-2">
                            @foreach($errors->all() as $error)
                                <li>{{ $error }}</li>
                            @endforeach
                        </ul>
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                @endif
                
                @yield('content')
            </main>
        </div>
    </div>

    <!-- Bootstrap Bundle JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Custom Admin Scripts -->
    <script>
        // Desktop sidebar collapse toggle
        function toggleSidebarCollapse() {
            const sidebar = document.getElementById('adminSidebar');
            const adminMain = document.querySelector('.admin-main');
            sidebar.classList.toggle('collapsed');
            adminMain.classList.toggle('sidebar-collapsed');
            
            // Save the sidebar state to localStorage
            const isCollapsed = sidebar.classList.contains('collapsed');
            localStorage.setItem('sidebarCollapsed', isCollapsed);
        }
        
        // Restore sidebar state on page load
        document.addEventListener('DOMContentLoaded', function() {
            const sidebar = document.getElementById('adminSidebar');
            const adminMain = document.querySelector('.admin-main');

            // Restore collapsed state
            const isCollapsed = localStorage.getItem('sidebarCollapsed') === 'true';
            if (isCollapsed) {
                sidebar.classList.add('collapsed');
                adminMain.classList.add('sidebar-collapsed');
            }

            // Restore sidebar scroll position
            const savedScroll = parseInt(localStorage.getItem('sidebarScrollTop') || '0', 10);
            if (!isNaN(savedScroll)) {
                sidebar.scrollTop = savedScroll;
            }

            // Persist scroll position on scroll (throttled)
            let scrollTick = false;
            sidebar.addEventListener('scroll', function() {
                if (!scrollTick) {
                    window.requestAnimationFrame(function() {
                        localStorage.setItem('sidebarScrollTop', String(sidebar.scrollTop));
                        scrollTick = false;
                    });
                    scrollTick = true;
                }
            });

            // Handle navigation link clicks without expanding sidebar in collapsed mode
            const navLinks = document.querySelectorAll('.nav-link');
            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    if (sidebar.classList.contains('collapsed')) {
                        e.stopPropagation();
                    }
                    // Persist current scroll immediately on navigation clicks
                    try {
                        localStorage.setItem('sidebarScrollTop', String(sidebar.scrollTop));
                    } catch (err) {}
                });
            });

            // Persist scroll before page unload as a last resort
            window.addEventListener('beforeunload', function() {
                try {
                    localStorage.setItem('sidebarScrollTop', String(sidebar.scrollTop));
                } catch (err) {}
            });

        });
        
        // Mobile sidebar toggle
        function toggleSidebar() {
            const sidebar = document.getElementById('adminSidebar');
            sidebar.classList.toggle('show');
        }
        
        // Auto-hide success alerts after 5 seconds
        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert-success');
            alerts.forEach(function(alert) {
                if (alert) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }
            });
        }, 5000);

        // CSRF token setup for AJAX requests
        const token = document.querySelector('meta[name="csrf-token"]');
        if (token) {
            window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.getAttribute('content');
        }
    </script>
    
    @stack('scripts')
</body>
</html>

--- End of File ---

File: .\resources\views\layouts\auth.blade.php
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arbee's Bakeshop - @yield('title')</title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="{{ asset('favicon.ico') }}">
    <link rel="icon" type="image/png" sizes="32x32" href="{{ asset('images/Arbee\'s_logo_round.png') }}">
    <link rel="icon" type="image/png" sizes="16x16" href="{{ asset('images/Arbee\'s_logo_round.png') }}">
    <link rel="apple-touch-icon" sizes="180x180" href="{{ asset('images/Arbee\'s_logo_round.png') }}">
    
    <!-- Circular Favicon CSS -->
    <style>
        /* Make favicon appear circular in browsers that support it */
        link[rel="icon"], link[rel="apple-touch-icon"] {
            border-radius: 50% !important;
        }
        /* Additional circular styling for favicon */
        head link[rel*="icon"] {
            border-radius: 50%;
            overflow: hidden;
        }
    </style>
    
    <link rel="stylesheet" href="/css/sea-styles.css">
    <link rel="stylesheet" href="/css/auth-styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body class="auth-modern-container">
    <!-- Background shapes -->
    <div class="auth-bg-shapes">
        <div class="shape shape-1"></div>
        <div class="shape shape-2"></div>
        <div class="shape shape-3"></div>
        <div class="shape shape-4"></div>
        <div class="shape shape-5"></div>
        <div class="shape shape-6"></div>
    </div>

    <div class="auth-main-content">
        <div class="auth-card">
            <div class="auth-card-logo">
                <img src="images/Arbee's_Logo.png" alt="Arbee's Bakeshop Logo">
            </div>
            <h2 class="auth-card-title">@yield('auth-title', 'Login')</h2>
            
            @yield('content')
        </div>
    </div>
</body>
</html>

--- End of File ---

File: .\resources\views\layouts\baker.blade.php
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>@yield('title', 'Baker Dashboard') - Arbees Bakeshop</title>

    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="{{ asset('favicon.ico') }}">
    <link rel="icon" type="image/png" sizes="32x32" href="{{ asset('images/Arbee\'s_logo_round.png') }}">
    
    <!-- Bootstrap 5.3 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Sea-style CSS -->
    <link href="{{ asset('css/sea-styles.css') }}?v={{ time() }}" rel="stylesheet">
    <!-- Admin (Sea-style) CSS for button/badge parity -->
    <link href="{{ asset('css/admin-styles.css') }}?v={{ time() }}" rel="stylesheet">
    
    <!-- Baker-specific CSS -->
    <link href="{{ asset('css/baker-styles.css') }}?v={{ time() }}" rel="stylesheet">

    @yield('extra-css')
</head>
<body class="baker-body">
    
    <!-- Baker Header -->
    <header class="baker-header">
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <img src="{{ asset('images/Arbee\'s_Logo.png') }}" alt="Arbee's Logo" class="header-logo me-3">
                    <div class="brand-content">
                        <div class="logo">Arbees Bakeshop</div>
                        <div class="company-name">Baker Portal</div>
                    </div>
                </div>
                
                <div class="user-info">
                    <span class="user-name">
                        <i class="fas fa-user-circle me-1"></i>
                        {{ auth()->check() && auth()->user()->employee ? auth()->user()->employee->first_name : 'User' }} 
                        {{ auth()->check() && auth()->user()->employee ? auth()->user()->employee->last_name : '' }}
                    </span>
                    <form action="{{ route('logout') }}" method="POST" class="d-inline">
                        @csrf
                        <button type="submit" class="logout-btn">
                            <i class="fas fa-sign-out-alt me-1"></i> Logout
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </header>

    <!-- Navigation -->
    <nav class="baker-nav">
        <div class="container-fluid">
            <ul>
                <li>
                    <a href="{{ route('baker.dashboard') }}" 
                       class="{{ request()->routeIs('baker.dashboard') ? 'active' : '' }}">
                        <i class="fas fa-chart-line me-2"></i> Dashboard
                    </a>
                </li>
                <li>
                    <a href="{{ route('baker.production.index') }}" 
                       class="{{ request()->routeIs('baker.production.*') ? 'active' : '' }}">
                        <i class="fas fa-industry me-2"></i> Production
                    </a>
                </li>
                <li>
                    <a href="{{ route('baker.inventory.index') }}" 
                       class="{{ request()->routeIs('baker.inventory.*') ? 'active' : '' }}">
                        <i class="fas fa-boxes me-2"></i> Inventory
                    </a>
                </li>
            </ul>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="baker-content">
        <div class="container-fluid py-4">
            
            <!-- Flash Messages -->
            @if(session('success'))
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i>
                    {{ session('success') }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            @endif

            @if(session('error'))
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    {{ session('error') }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            @endif

            @if(isset($errors) && $errors->any())
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <ul class="mb-0">
                        @foreach($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            @endif

            <!-- Page Content -->
            @yield('content')
        </div>
    </main>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    @yield('extra-js')
</body>
</html>

--- End of File ---

File: .\resources\views\layouts\cashier.blade.php
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>@yield('title', 'Cashier Dashboard') - Arbees Bakeshop</title>

    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="{{ asset('favicon.ico') }}">
    <link rel="icon" type="image/png" sizes="32x32" href="{{ asset('images/Arbee\'s_logo_round.png') }}">
    
    <!-- Bootstrap 5.3 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Sea-style CSS -->
    <link href="{{ asset('css/sea-styles.css') }}" rel="stylesheet">
    <!-- Admin (Sea-style) CSS for button/badge parity -->
    <link href="{{ asset('css/admin-styles.css') }}" rel="stylesheet">
    
    <!-- Cashier-specific CSS -->
    <link href="{{ asset('css/cashier-styles.css') }}" rel="stylesheet">

    @yield('extra-css')
</head>
<body class="cashier-body">
    
    <!-- Cashier Header -->
    <header class="cashier-header">
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <img src="{{ asset('images/Arbee\'s_Logo.png') }}" alt="Arbee's Logo" class="header-logo me-3">
                    <div class="brand-content">
                        <div class="logo">Arbees Bakeshop</div>
                        <div class="company-name">Cashier Portal</div>
                    </div>
                </div>
                
                <div class="user-info">
                    <span class="user-name">
                        <i class="fas fa-user-circle me-1"></i>
                        {{ auth()->user()->employee->first_name ?? 'User' }} {{ auth()->user()->employee->last_name ?? '' }}
                    </span>
                    <form action="{{ route('logout') }}" method="POST" class="d-inline">
                        @csrf
                        <button type="submit" class="logout-btn">
                            <i class="fas fa-sign-out-alt me-1"></i> Logout
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </header>

    <!-- Navigation -->
    <nav class="cashier-nav">
        <div class="container-fluid">
            <ul>
                <li>
                    <a href="{{ route('cashier.dashboard') }}" 
                       class="{{ request()->routeIs('cashier.dashboard') ? 'active' : '' }}">
                        <i class="fas fa-chart-line me-2"></i> Dashboard
                    </a>
                </li>
                <li>
                    <a href="{{ route('cashier.pos.index') }}" 
                       class="{{ request()->routeIs('cashier.pos.*') ? 'active' : '' }}">
                        <i class="fas fa-cash-register me-2"></i> Point of Sale
                    </a>
                </li>
                <li>
                    <a href="{{ route('cashier.sales.index') }}" 
                       class="{{ request()->routeIs('cashier.sales.*') ? 'active' : '' }}">
                        <i class="fas fa-receipt me-2"></i> Sales History
                    </a>
                </li>
            </ul>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="cashier-content">
        <div class="container-fluid py-4">
            
            <!-- Flash Messages -->
            @if(session('success'))
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i>
                    {{ session('success') }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            @endif

            @if(session('error'))
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    {{ session('error') }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            @endif

            @if($errors->any())
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Validation Errors:</strong>
                    <ul class="mb-0 mt-2">
                        @foreach($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            @endif

            <!-- Page Content -->
            @yield('content')
        </div>
    </main>



    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>

    @yield('extra-js')
</body>
</html>

--- End of File ---

File: .\resources\views\layouts\manager.blade.php
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arbee's Manager - @yield('title')</title>
    <link rel="stylesheet" href="/css/app.css">
    <link rel="stylesheet" href="/css/sea-styles.css">
    <link rel="stylesheet" href="/css/manager-styles.css">
    <style>
        /* Manager layout specific overrides only */
    </style>
</head>
<body class="manager-layout">
    <header class="manager-header">
        <div class="manager-logo">Arbee's Bakeshop [MANAGER]</div>
        <div class="user-info">
            <span>Welcome, {{ Auth::user()->full_name }}</span>
            <span class="manager-badge role-badge">MANAGER</span>
            <form method="POST" action="{{ route('logout') }}" style="display: inline;">
                @csrf
                <button type="submit" class="logout-btn">Logout</button>
            </form>
        </div>
    </header>

    <nav class="manager-nav">
        <ul>
            <li><a href="/dashboard/manager" class="{{ Request::is('dashboard/manager') ? 'active' : '' }}">Dashboard</a></li>
            <li><a href="/dashboard/manager/users" class="{{ Request::is('dashboard/manager/users') ? 'active' : '' }}">Manage Users</a></li>
            <li><a href="/dashboard/manager/reports" class="{{ Request::is('dashboard/manager/reports') ? 'active' : '' }}">Reports</a></li>
            <li><a href="/dashboard/manager/inventory" class="{{ Request::is('dashboard/manager/inventory') ? 'active' : '' }}">Inventory</a></li>
        </ul>
    </nav>

    <main class="manager-content">
        <div class="content-header">
            <h1>@yield('page-title')</h1>
        </div>
        @yield('content')
    </main>

    <footer>
        <p>&copy; 2025 Sea++ Bakery Management System - Manager Panel</p>
    </footer>
</body>
</html>

--- End of File ---

File: .\resources\views\manager\dashboard\manager.blade.php
@extends('layouts.manager')

@section('title', 'Dashboard')
@section('page-title', 'Manager Dashboard')

@section('content')
    <div class="dashboard-cards">
        <div class="card">
            <h3>Total Users</h3>
            <p>Manage all bakery staff and their roles</p>
            <a href="/dashboard/manager/users">View Users</a>
        </div>
        <div class="card">
            <h3>Daily Reports</h3>
            <p>View sales, production, and financial reports</p>
            <a href="/dashboard/manager/reports">View Reports</a>
        </div>
        <div class="card">
            <h3>Inventory Overview</h3>
            <p>Monitor ingredient levels and supplies</p>
            <a href="/dashboard/manager/inventory">View Inventory</a>
        </div>
        <div class="card">
            <h3>Performance Metrics</h3>
            <p>Track bakery performance and efficiency</p>
            <a href="/dashboard/manager/metrics">View Metrics</a>
        </div>
    </div>
    
    <div class="card">
        <h3>Quick Actions</h3>
        <p>Welcome to the Manager Dashboard! You have full access to manage users, view reports, and oversee bakery operations.</p>
    </div>
@endsection

--- End of File ---

File: .\routes\console.php
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');


--- End of File ---

File: .\routes\web.php
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\AuthController;

// Redirect to login page
Route::get('/', function () {
    return redirect()->route('login');
});

// Authentication routes
Route::get('/login', [AuthController::class, 'showLogin'])->name('login');
Route::post('/login', [AuthController::class, 'login']);
Route::post('/logout', function () {
    \Auth::logout();
    return redirect()->route('login');
})->name('logout');

// Register routes
Route::get('/register', [AuthController::class, 'showRegister'])->name('register');
Route::post('/register', [AuthController::class, 'register']);

// Test route (no middleware)
Route::get('/test-admin-simple', function () {
    if (Auth::check()) {
        $user = Auth::user();
        return "Logged in as: {$user->username}, Role: {$user->role}, IsAdmin: " . ($user->isAdmin() ? 'YES' : 'NO');
    }
    return "Not logged in";
});

// Direct admin dashboard test (no middleware)
Route::get('/test-dashboard', function () {
    if (Auth::check()) {
        return view('admin.dashboard.index');
    }
    return "Not logged in - redirecting to login";
});

// Admin dashboard routes
Route::middleware(['auth', 'role:admin'])->group(function () {
    // Dashboard
    Route::get('/admin/dashboard', [App\Http\Controllers\Admin\AdminDashboardController::class, 'index'])->name('admin.dashboard');
    Route::get('/admin/api/system-overview', [App\Http\Controllers\Admin\AdminDashboardController::class, 'getSystemOverview'])->name('admin.api.system-overview');
    
    // User Management
    Route::resource('admin/users', App\Http\Controllers\Admin\UserManagementController::class, ['as' => 'admin']);
    Route::post('/admin/users/{user}/reset-password', [App\Http\Controllers\Admin\UserManagementController::class, 'resetPassword'])->name('admin.users.reset-password');
    Route::patch('/admin/users/{user}/toggle-status', [App\Http\Controllers\Admin\UserManagementController::class, 'toggleStatus'])->name('admin.users.toggle-status');

    // Pending User Approval
    Route::get('/admin/users/pending', [App\Http\Controllers\Admin\UserController::class, 'pending'])->name('admin.users.pending');
    Route::patch('/admin/users/{user}/approve', [App\Http\Controllers\Admin\UserController::class, 'approve'])->name('admin.users.approve');
    Route::patch('/admin/users/{user}/reject', [App\Http\Controllers\Admin\UserController::class, 'reject'])->name('admin.users.reject');
    
    // Employee Management
    Route::resource('admin/employees', App\Http\Controllers\Admin\EmployeeController::class, ['as' => 'admin']);
    Route::patch('/admin/employees/{employee}/toggle-status', [App\Http\Controllers\Admin\EmployeeController::class, 'toggleStatus'])->name('admin.employees.toggle-status');
    
    // Product Management
    Route::resource('admin/products', App\Http\Controllers\Admin\ProductManagementController::class, ['as' => 'admin']);
    Route::post('/admin/products/{product}/adjust-stock', [App\Http\Controllers\Admin\ProductManagementController::class, 'adjustStock'])->name('admin.products.adjust-stock');
    Route::post('/admin/products/bulk-update', [App\Http\Controllers\Admin\ProductManagementController::class, 'bulkUpdate'])->name('admin.products.bulk-update');
    Route::get('/admin/products/export/pdf', [App\Http\Controllers\Admin\ProductManagementController::class, 'export'])->name('admin.products.export');
    
    // Category Management
    Route::resource('admin/categories', App\Http\Controllers\Admin\CategoryManagementController::class, ['as' => 'admin']);
    Route::patch('/admin/categories/{category}/toggle-status', [App\Http\Controllers\Admin\CategoryManagementController::class, 'toggleStatus'])->name('admin.categories.toggle-status');
    
    // Inventory Management
    Route::resource('admin/inventory', App\Http\Controllers\Admin\InventoryManagementController::class, ['as' => 'admin']);
    Route::get('/admin/inventory/low-stock/alerts', [App\Http\Controllers\Admin\InventoryManagementController::class, 'lowStockAlerts'])->name('admin.inventory.low-stock-alerts');
    Route::post('/admin/inventory/bulk-adjust', [App\Http\Controllers\Admin\InventoryManagementController::class, 'bulkAdjust'])->name('admin.inventory.bulk-adjust');

    // Production Orders
    Route::resource('admin/productions', App\Http\Controllers\Admin\ProductionOrderController::class, ['as' => 'admin']);
    Route::patch('/admin/productions/{production}/start', [App\Http\Controllers\Admin\ProductionOrderController::class, 'start'])->name('admin.productions.start');
    Route::patch('/admin/productions/{production}/complete', [App\Http\Controllers\Admin\ProductionOrderController::class, 'complete'])->name('admin.productions.complete');
    Route::patch('/admin/productions/{production}/cancel', [App\Http\Controllers\Admin\ProductionOrderController::class, 'cancel'])->name('admin.productions.cancel');

    // Sales Management
    Route::resource('admin/sales', App\Http\Controllers\Admin\SaleManagementController::class, ['as' => 'admin'])->only(['index','create','store','show','edit','update','destroy']);
    Route::patch('/admin/sales/{sale}/cancel', [App\Http\Controllers\Admin\SaleManagementController::class, 'cancel'])->name('admin.sales.cancel');

    // Sales Reports
    Route::get('/admin/sales-reports', [App\Http\Controllers\Admin\SalesReportController::class, 'index'])->name('admin.sales-reports.index');
    Route::get('/admin/sales-reports/detailed', [App\Http\Controllers\Admin\SalesReportController::class, 'show'])->name('admin.sales-reports.show');
    Route::get('/admin/sales-reports/export', [App\Http\Controllers\Admin\SalesReportController::class, 'export'])->name('admin.sales-reports.export');
    
    // Analytics Dashboard
    Route::get('/admin/analytics', [App\Http\Controllers\Admin\AnalyticsDashboardController::class, 'index'])->name('admin.analytics.index');

    // Inventory Reports
    Route::get('/admin/inventory-reports', [App\Http\Controllers\Admin\InventoryReportController::class, 'index'])->name('admin.inventory-reports.index');
    Route::get('/admin/inventory-reports/detailed', [App\Http\Controllers\Admin\InventoryReportController::class, 'show'])->name('admin.inventory-reports.show');
    Route::get('/admin/inventory-reports/export', [App\Http\Controllers\Admin\InventoryReportController::class, 'export'])->name('admin.inventory-reports.export');
    
    // Audit Logs
    Route::resource('admin/audit-logs', App\Http\Controllers\Admin\AuditLogController::class, ['as' => 'admin']);
    Route::get('/admin/audit-logs/export/csv', [App\Http\Controllers\Admin\AuditLogController::class, 'export'])->name('admin.audit-logs.export');
    Route::get('/admin/audit-logs/export/pdf', [App\Http\Controllers\Admin\AuditLogController::class, 'exportPdf'])->name('admin.audit-logs.export-pdf');

    // System Settings
    Route::get('/admin/settings', [App\Http\Controllers\Admin\SettingsController::class, 'index'])->name('admin.settings.index');
    Route::put('/admin/settings', [App\Http\Controllers\Admin\SettingsController::class, 'update'])->name('admin.settings.update');

    // Backup & Restore
    Route::get('/admin/backup', [App\Http\Controllers\Admin\BackupController::class, 'index'])->name('admin.backup.index');
    Route::get('/admin/backup/download', [App\Http\Controllers\Admin\BackupController::class, 'download'])->name('admin.backup.download');
    Route::post('/admin/backup/restore', [App\Http\Controllers\Admin\BackupController::class, 'restore'])->name('admin.backup.restore');
});

// Baker dashboard routes
Route::middleware(['auth', 'role:baker'])->group(function () {
    Route::get('/dashboard/baker', [App\Http\Controllers\Baker\DashboardController::class, 'index'])->name('baker.dashboard');
    
    Route::post('/baker/profile/complete', [App\Http\Controllers\Baker\DashboardController::class, 'completeProfile'])->name('baker.profile.complete');
    
    // Production Management
    Route::resource('baker/production', App\Http\Controllers\Baker\ProductionController::class)->names([
        'index' => 'baker.production.index',
        'create' => 'baker.production.create',
        'store' => 'baker.production.store',
        'show' => 'baker.production.show',
        'edit' => 'baker.production.edit',
        'update' => 'baker.production.update',
        'destroy' => 'baker.production.destroy',
    ]);
    
    // Inventory Management
    Route::get('baker/inventory', [App\Http\Controllers\Baker\InventoryController::class, 'index'])->name('baker.inventory.index');
    Route::get('baker/inventory/{product}', [App\Http\Controllers\Baker\InventoryController::class, 'show'])->name('baker.inventory.show');
});

// Cashier dashboard routes  
Route::middleware(['auth', 'role:cashier'])->group(function () {
    Route::get('/dashboard/cashier', [App\Http\Controllers\Cashier\CashierDashboardController::class, 'index'])->name('cashier.dashboard');
    
    // POS
    Route::get('/cashier/pos', [App\Http\Controllers\Cashier\POSController::class, 'index'])->name('cashier.pos.index');
    Route::post('/cashier/pos/checkout', [App\Http\Controllers\Cashier\POSController::class, 'checkout'])->name('cashier.pos.checkout');
    
    // Sales History
    Route::get('/cashier/sales', [App\Http\Controllers\Cashier\SalesHistoryController::class, 'index'])->name('cashier.sales.index');
    Route::get('/cashier/sales/{sale}', [App\Http\Controllers\Cashier\SalesHistoryController::class, 'show'])->name('cashier.sales.show');
    Route::get('/cashier/sales/{sale}/receipt/pdf', [App\Http\Controllers\Cashier\ReceiptController::class, 'pdf'])->name('cashier.sales.receipt.pdf');
    
    Route::post('/cashier/profile/complete', function(\Illuminate\Http\Request $request) {
        $validated = $request->validate([
            'first_name' => 'required|string|max:255',
            'last_name' => 'required|string|max:255',
            'middle_name' => 'nullable|string|max:255',
            'phone' => 'nullable|string|max:20',
            'address' => 'nullable|string|max:500',
        ]);
        
        $user = Auth::user();
        if ($user->employee) {
            $user->employee->update([
                'first_name' => $validated['first_name'],
                'last_name' => $validated['last_name'],
                'middle_name' => $validated['middle_name'],
                'phone' => $validated['phone'],
                'address' => $validated['address'],
                'status' => 'active', // Mark as active when profile is complete
            ]);
        }
        
        return redirect()->route('cashier.dashboard')->with('success', 'Profile completed successfully!');
    })->name('cashier.profile.complete');
});


--- End of File ---

